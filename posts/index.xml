<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Some reminders to myself on Abdullah Turabi</title>
        <link>https://abdullah.today/posts/</link>
        <description>Recent content in Some reminders to myself on Abdullah Turabi</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 06 Jun 2020 18:13:35 +0500</lastBuildDate>
        <atom:link href="https://abdullah.today/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Creating a New Theme</title>
            <link>https://abdullah.today/posts/creating-a-new-theme/</link>
            <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/posts/creating-a-new-theme/</guid>
            <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&rsquo;t cover using CSS to style your theme.</p>
<p>We&rsquo;ll start with creating a new site with a very basic template. Then we&rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.</p>
<p>In this tutorial, commands that you enter will start with the &ldquo;$&rdquo; prompt. The output will follow. Lines that start with &ldquo;#&rdquo; are comments that I&rsquo;ve added to explain a point. When I show updates to a file, the &ldquo;:wq&rdquo; on the last line means to save the file.</p>
<p>Here&rsquo;s an example:</p>
<pre><code>## this is a comment
url
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Migrate to Hugo from Jekyll</title>
            <link>https://abdullah.today/posts/migrate-from-jekyll/</link>
            <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/posts/migrate-from-jekyll/</guid>
            <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
            <content type="html"><![CDATA[<h2 id="move-static-content-to-static">Move static content to <code>static</code></h2>
<p>Jekyll has a rule that any directory not starting with <code>_</code> will be copied as-is to the <code>_site</code> output. Hugo keeps all static content under <code>static</code>. You should therefore move it all there.
With Jekyll, something that looked like</p>
<pre><code>▾ &lt;root&gt;/
    ▾ images/
        logo.png
</code></pre>
<p>should become</p>
<pre><code>▾ &lt;root&gt;/
    ▾ static/
        ▾ images/
            logo.png
</code></pre>
<p>Additionally, you&rsquo;ll want any files that should reside at the root (such as <code>CNAME</code>) to be moved to <code>static</code>.</p>
<h2 id="create-your-hugo-configuration-file">Create your Hugo configuration file</h2>
<p>Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the <a href="/overview/configuration/">Hugo configuration documentation</a> for details.</p>
<h2 id="set-your-configuration-publish-folder-to-_site">Set your configuration publish folder to <code>_site</code></h2>
<p>The default is for Jekyll to publish to <code>_site</code> and for Hugo to publish to <code>public</code>. If, like me, you have <a href="http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html"><code>_site</code> mapped to a git submodule on the <code>gh-pages</code> branch</a>, you&rsquo;ll want to do one of two alternatives:</p>
<ol>
<li>
<p>Change your submodule to point to map <code>gh-pages</code> to public instead of <code>_site</code> (recommended).</p>
<pre><code> git submodule deinit _site
 git rm _site
 git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
</code></pre>
</li>
<li>
<p>Or, change the Hugo configuration to use <code>_site</code> instead of <code>public</code>.</p>
<pre><code> {
     ..
     &quot;publishdir&quot;: &quot;_site&quot;,
     ..
 }
</code></pre>
</li>
</ol>
<h2 id="convert-jekyll-templates-to-hugo-templates">Convert Jekyll templates to Hugo templates</h2>
<p>That&rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to <a href="http://jekyllrb.com/docs/templates/">Jekyll&rsquo;s template documentation</a> if you need to refresh your memory on how you built your blog and <a href="/layout/templates/">Hugo&rsquo;s template</a> to learn Hugo&rsquo;s way.</p>
<p>As a single reference data point, converting my templates for <a href="http://heyitsalex.net/">heyitsalex.net</a> took me no more than a few hours.</p>
<h2 id="convert-jekyll-plugins-to-hugo-shortcodes">Convert Jekyll plugins to Hugo shortcodes</h2>
<p>Jekyll has <a href="http://jekyllrb.com/docs/plugins/">plugins</a>; Hugo has <a href="/doc/shortcodes/">shortcodes</a>. It&rsquo;s fairly trivial to do a port.</p>
<h3 id="implementation">Implementation</h3>
<p>As an example, I was using a custom <a href="https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb"><code>image_tag</code></a> plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.</p>
<p>Jekyll&rsquo;s plugin:</p>
<pre><code>module Jekyll
  class ImageTag &lt; Liquid::Tag
    @url = nil
    @caption = nil
    @class = nil
    @link = nil
    // Patterns
    IMAGE_URL_WITH_CLASS_AND_CAPTION =
    IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&quot;(.*?)&quot;(\s+)-&gt;((https?:\/\/|\/)(\S+))(\s*)/i
    IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&quot;(.*?)&quot;/i
    IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
    IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
    def initialize(tag_name, markup, tokens)
      super
      if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
        @class   = $1
        @url     = $3
        @caption = $7
        @link = $9
      elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
        @class   = $1
        @url     = $3
        @caption = $7
      elsif markup =~ IMAGE_URL_WITH_CAPTION
        @url     = $1
        @caption = $5
      elsif markup =~ IMAGE_URL_WITH_CLASS
        @class = $1
        @url   = $3
      elsif markup =~ IMAGE_URL
        @url = $1
      end
    end
    def render(context)
      if @class
        source = &quot;&lt;figure class='#{@class}'&gt;&quot;
      else
        source = &quot;&lt;figure&gt;&quot;
      end
      if @link
        source += &quot;&lt;a href=\&quot;#{@link}\&quot;&gt;&quot;
      end
      source += &quot;&lt;img src=\&quot;#{@url}\&quot;&gt;&quot;
      if @link
        source += &quot;&lt;/a&gt;&quot;
      end
      source += &quot;&lt;figcaption&gt;#{@caption}&lt;/figcaption&gt;&quot; if @caption
      source += &quot;&lt;/figure&gt;&quot;
      source
    end
  end
end
Liquid::Template.register_tag('image', Jekyll::ImageTag)
</code></pre>
<p>is written as this Hugo shortcode:</p>
<pre><code>&lt;!-- image --&gt;
&lt;figure {{ with .Get &quot;class&quot; }}class=&quot;{{.}}&quot;{{ end }}&gt;
    {{ with .Get &quot;link&quot;}}&lt;a href=&quot;{{.}}&quot;&gt;{{ end }}
        &lt;img src=&quot;{{ .Get &quot;src&quot; }}&quot; {{ if or (.Get &quot;alt&quot;) (.Get &quot;caption&quot;) }}alt=&quot;{{ with .Get &quot;alt&quot;}}{{.}}{{else}}{{ .Get &quot;caption&quot; }}{{ end }}&quot;{{ end }} /&gt;
    {{ if .Get &quot;link&quot;}}&lt;/a&gt;{{ end }}
    {{ if or (or (.Get &quot;title&quot;) (.Get &quot;caption&quot;)) (.Get &quot;attr&quot;)}}
    &lt;figcaption&gt;{{ if isset .Params &quot;title&quot; }}
        {{ .Get &quot;title&quot; }}{{ end }}
        {{ if or (.Get &quot;caption&quot;) (.Get &quot;attr&quot;)}}&lt;p&gt;
        {{ .Get &quot;caption&quot; }}
        {{ with .Get &quot;attrlink&quot;}}&lt;a href=&quot;{{.}}&quot;&gt; {{ end }}
            {{ .Get &quot;attr&quot; }}
        {{ if .Get &quot;attrlink&quot;}}&lt;/a&gt; {{ end }}
        &lt;/p&gt; {{ end }}
    &lt;/figcaption&gt;
    {{ end }}
&lt;/figure&gt;
&lt;!-- image --&gt;
</code></pre>
<h3 id="usage">Usage</h3>
<p>I simply changed:</p>
<pre><code>{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &quot;having fun&quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&quot; -&gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
</code></pre>
<p>to this (this example uses a slightly extended version named <code>fig</code>, different than the built-in <code>figure</code>):</p>
<pre><code>{{% fig class=&quot;full&quot; src=&quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&quot; title=&quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&quot; link=&quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&quot; %}}
</code></pre>
<p>As a bonus, the shortcode named parameters are, arguably, more readable.</p>
<h2 id="finishing-touches">Finishing touches</h2>
<h3 id="fix-content">Fix content</h3>
<p>Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that <code>hugo server --watch</code> is your friend. Test your changes and fix errors as needed.</p>
<h3 id="clean-up">Clean up</h3>
<p>You&rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn&rsquo;t used, delete it.</p>
<h2 id="a-practical-example-in-a-diff">A practical example in a diff</h2>
<p><a href="http://heyitsalex.net/">Hey, it&rsquo;s Alex</a> was migrated in less than a <em>father-with-kids day</em> from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this <a href="https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610">diff</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>TMUX</title>
            <link>https://abdullah.today/posts/tmux/</link>
            <pubDate>Sat, 06 Jun 2020 18:13:35 +0500</pubDate>
            
            <guid>https://abdullah.today/posts/tmux/</guid>
            <description>TMUX tmux is a terminal multiplexer. You can run programs inside a tmux session, detach session and continue running programs in background, reattach later.
Installation tmux is available in all linux distributions. You can install it using your distribution&amp;rsquo;s package manager. In Arch Linux:
$ sudo pacman -S tmux Start You can start tmux by invoking tmux command inside your terminal.
Keybindings The default modifier key is Ctrl + b followed by a key.</description>
            <content type="html"><![CDATA[<h1 id="tmux">TMUX</h1>
<p><img src="/images/tmux.png" alt="vim, htop running inside tmux"></p>
<p><em>tmux</em> is a terminal multiplexer. You can run programs inside a tmux session,
detach session and continue running programs in background, reattach later.</p>
<h3 id="installation">Installation</h3>
<p><em>tmux</em> is available in all linux distributions. You can install it using your
distribution&rsquo;s package manager. In <em>Arch Linux</em>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo pacman -S tmux
</code></pre></div><h3 id="start">Start</h3>
<p>You can start <em>tmux</em> by invoking <code>tmux</code> command inside your terminal.</p>
<h3 id="keybindings">Keybindings</h3>
<p>The default modifier key is <code>Ctrl + b</code> followed by a key. Press <code>Ctrl + b</code> and
then hit another key and tmux will get it.</p>
<p>You can change the default keybindings in <code>~/.tmux.conf</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">
$ vi ~/.tmux.conf

...

unbind C-b
set option -g prefix <span style="color:#e6db74">`</span>
...
:wq
</code></pre></div><p>Here I have removed the default prefix and have bounded &ldquo;`&rdquo; as prefix.
I found it useful than default prefix.</p>
<h3 id="detach-session">Detach session</h3>
<p>You can detach a <em>tmux session</em> by sending it <code>Prefix</code> followed by <code>d</code>.</p>
<h3 id="re-attach-session">Re attach session</h3>
<p>You can reattach to a running  <em>tmux session</em> by simply invoking <code>tmux attach-session -t &lt;target_session&gt;</code>. You can get session&rsquo;s name using <code>tmux ls</code>.</p>
<h3 id="windows">Windows</h3>
<p>By default, <em>tmux</em> will start a new window running a shell inside it.
You can create new windows by pressing <code>Prefix</code> followed by <code>c</code>.</p>
<p>You can go to next window by pressing <code>Prefix</code> followed by <code>n</code>.</p>
<p>Or you can hit <code>Prefix</code> followed by <code>w</code> and tmux will show you windows opened
and you can select which window you want to go to.</p>
<p>To kill a window, go to the window and hit <code>Prefix</code> followed by <code>x</code>.</p>
<h3 id="panes">Panes</h3>
<p>A window can have multiple panes.</p>
<p>To split current window into two panes horizontally, hit <code>Prefix</code> followed by <code>%</code>.
To split current window into two panes vertically, hit <code>Prefix</code> followed by <code>&quot;</code>.
To go to next pane, hit <code>Prefix</code> followed by <code>o</code>.
To toggle between panes, hit <code>Prefix</code> followed by <code>;</code>.
To kill a pane you&rsquo;re inside, hit <code>Prefix</code> followed by <code>x</code>.</p>
<h3 id="my-tmuxconf">My tmux.conf</h3>
<p>Below is my customized <em>tmux.conf</em>. You can copy and then customize it to your
needs, its well documented with comments.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat ~/.tmux.conf


<span style="color:#75715e">#  ██████████ ████     ████ ██     ██ ██     ██</span>
<span style="color:#75715e"># ░░░░░██░░░ ░██░██   ██░██░██    ░██░░██   ██</span>
<span style="color:#75715e">#     ░██    ░██░░██ ██ ░██░██    ░██ ░░██ ██</span>
<span style="color:#75715e">#     ░██    ░██ ░░███  ░██░██    ░██  ░░███</span>
<span style="color:#75715e">#     ░██    ░██  ░░█   ░██░██    ░██   ██░██</span>
<span style="color:#75715e">#     ░██    ░██   ░    ░██░██    ░██  ██ ░░██</span>
<span style="color:#75715e">#     ░██    ░██        ░██░░███████  ██   ░░██</span>
<span style="color:#75715e">#     ░░     ░░         ░░  ░░░░░░░  ░░     ░░</span>
#
<span style="color:#75715e">#  ▓▓▓▓▓▓▓▓▓▓</span>
<span style="color:#75715e"># ░▓ Author ▓ AK &lt;abdullah@abdullah.today&gt;</span>
<span style="color:#75715e"># ░▓▓▓▓▓▓▓▓▓▓</span>
<span style="color:#75715e"># ░░░░░░░░░░</span>

<span style="color:#75715e"># source powerline</span> 
source /usr/lib/python3.8/site-packages/powerline/bindings/tmux/powerline.conf

<span style="color:#75715e"># Custom Prefix</span>
unbind C-b
set-option -g prefix <span style="color:#e6db74">`</span>
bind <span style="color:#e6db74">`</span> send-prefix

<span style="color:#75715e"># Shell</span>
set -g default-command /bin/zsh
set -g default-shell /bin/zsh

<span style="color:#75715e"># utf-8 support in status bar</span>
<span style="color:#75715e">#set -g status-utf8 on</span>

<span style="color:#75715e"># Reload the config</span>
bind r source-file ~/.tmux.conf <span style="color:#ae81ff">\;</span> display <span style="color:#e6db74">&#34;~/.tmux.conf reloaded&#34;</span>

<span style="color:#75715e"># Synchronize panes</span>
bind e setw synchronize-panes <span style="color:#ae81ff">\;</span> display <span style="color:#e6db74">&#34;synchronize mode&#34;</span>

<span style="color:#75715e"># Splits</span>
unbind %
unbind <span style="color:#e6db74">&#39;&#34;&#39;</span>
bind h split-window -v
bind v split-window -h
<span style="color:#75715e">#bind -n M-h send-keys</span> 

<span style="color:#75715e"># enable vi-mode</span>
setw -g mode-keys vi
set -g status-keys vi

<span style="color:#75715e"># copy paste</span>
unbind <span style="color:#f92672">[</span>
bind Escape copy-mode
unbind p
bind p paste-buffer
bind-key -T copy-mode-vi <span style="color:#e6db74">&#39;v&#39;</span> send -X begin-selection
bind-key -T copy-mode-vi <span style="color:#e6db74">&#39;y&#39;</span> send -X copy-pipe-and-cancel <span style="color:#e6db74">&#39;xclip -in -selection clipboard&#39;</span>

<span style="color:#75715e"># command mode</span>
bind : command-prompt

<span style="color:#75715e"># Kill panes</span>
bind x kill-pane

<span style="color:#75715e"># Status on off key</span>
bind t set status

<span style="color:#75715e"># Lock the tty</span>

bind b run-shell <span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">/.local/bin/unilock&#34;</span>

<span style="color:#75715e"># Alerts</span>
setw -g monitor-activity on
set -g visual-activity on

<span style="color:#75715e"># Enable mouse mode</span>
setw -g mouse on

<span style="color:#75715e"># Default terminal mode</span>
set -g default-terminal <span style="color:#e6db74">&#39;screen-256color&#39;</span>

<span style="color:#75715e"># Status and colors</span>
set -g status-justify left
set -g status-interval <span style="color:#ae81ff">2</span>
set -g status-bg colour25
set -g status-fg colour222

<span style="color:#75715e"># Window status</span>
set-option -g status-position bottom
setw -g window-status-format <span style="color:#e6db74">&#34;#[bg=colour246, fg=colour14, bold] #W &#34;</span>
setw -g window-status-current-format <span style="color:#e6db74">&#34;#[bg=colour25, fg=colour14, bold] #W &#34;</span>

<span style="color:#75715e"># Right status</span>
set -g status-right-length <span style="color:#ae81ff">100</span>
set -g status-right  <span style="color:#e6db74">&#39;#(~/.local/bin/tmux-status)&#39;</span>
set -g status-left-length <span style="color:#ae81ff">50</span>
set -g status-left <span style="color:#e6db74">&#39;&#39;</span>

<span style="color:#75715e"># Visuals</span>
setw -g monitor-activity on
set-option -g bell-action none
set-option -g visual-activity on
set-option -g visual-bell off
set-option -g visual-silence off

<span style="color:#75715e"># clock</span>
set -g clock-mode-colour colour20

<span style="color:#75715e"># urlview</span>
run-shell $HOME/.local/bin/tmux.urlview

<span style="color:#75715e"># resize panes</span>
setw -g aggressive-resize on

<span style="color:#75715e"># No delay</span>
set -sg escape-time <span style="color:#ae81ff">0</span>

<span style="color:#75715e"># History</span>
set -g history-limit <span style="color:#ae81ff">10000</span>

<span style="color:#75715e"># Scrolling</span>
set-option -g terminal-overrides <span style="color:#e6db74">&#39;xterm*:smcup@:rmcup@&#39;</span>

<span style="color:#75715e"># Panes index</span>
set -g pane-base-index <span style="color:#ae81ff">1</span>
set -g renumber-windows on

<span style="color:#75715e"># Windows index</span>
set -g base-index <span style="color:#ae81ff">1</span>

<span style="color:#75715e"># Layouts</span>
bind Z previous-layout
bind X next-layout

<span style="color:#75715e"># Detach others</span>
bind D detach -a

<span style="color:#75715e"># Navigate and resize splits</span>
is_vim<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ps -o state= -o comm= -t &#39;#{pane_tty}&#39; \
</span><span style="color:#e6db74">    | grep -iqE &#39;^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?</span>$<span style="color:#e6db74">&#39;&#34;</span>
bind -n C-h <span style="color:#66d9ef">if</span>-shell <span style="color:#e6db74">&#34;</span>$is_vim<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;send-keys C-h&#34;</span>  <span style="color:#e6db74">&#34;select-pane -L&#34;</span>
bind -n C-j <span style="color:#66d9ef">if</span>-shell <span style="color:#e6db74">&#34;</span>$is_vim<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;send-keys C-j&#34;</span>  <span style="color:#e6db74">&#34;select-pane -D&#34;</span>
bind -n C-k <span style="color:#66d9ef">if</span>-shell <span style="color:#e6db74">&#34;</span>$is_vim<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;send-keys C-k&#34;</span>  <span style="color:#e6db74">&#34;select-pane -U&#34;</span>
bind -n C-l <span style="color:#66d9ef">if</span>-shell <span style="color:#e6db74">&#34;</span>$is_vim<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;send-keys C-l&#34;</span>  <span style="color:#e6db74">&#34;select-pane -R&#34;</span>
bind -n M-h <span style="color:#66d9ef">if</span>-shell <span style="color:#e6db74">&#34;</span>$is_vim<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;send-keys M-h&#34;</span> <span style="color:#e6db74">&#34;resize-pane -L 2&#34;</span>
bind -n M-l <span style="color:#66d9ef">if</span>-shell <span style="color:#e6db74">&#34;</span>$is_vim<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;send-keys M-l&#34;</span> <span style="color:#e6db74">&#34;resize-pane -R 2&#34;</span>
bind -n M-k <span style="color:#66d9ef">if</span>-shell <span style="color:#e6db74">&#34;</span>$is_vim<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;send-keys M-k&#34;</span> <span style="color:#e6db74">&#34;resize-pane -U 2&#34;</span>
bind -n M-j <span style="color:#66d9ef">if</span>-shell <span style="color:#e6db74">&#34;</span>$is_vim<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;send-keys M-j&#34;</span> <span style="color:#e6db74">&#34;resize-pane -D 2&#34;</span>

</code></pre></div><h3 id="auto-start-tmux-on-boot">Auto start tmux on boot</h3>
<p>I have these lines in my shell startup file <code>~/.zprofile</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat ~/.zprofile

<span style="color:#75715e">#  ▓▓▓▓▓▓▓▓▓▓</span> 
<span style="color:#75715e"># ░▓ Author ▓ Abdullah &lt;https://abdullah.today/&gt;</span> 
<span style="color:#75715e"># ░▓▓▓▓▓▓▓▓▓▓</span> 
<span style="color:#75715e"># ░░░░░░░░░░</span> 


<span style="color:#75715e"># Start X at login</span>    
    

<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> -z $DISPLAY <span style="color:#f92672">]]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">[[</span> <span style="color:#66d9ef">$(</span>tty<span style="color:#66d9ef">)</span> <span style="color:#f92672">=</span> /dev/tty1 <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
  exec startx -- vt1 -keeptty &amp;&gt;/dev/null
  logout
<span style="color:#66d9ef">elif</span> <span style="color:#f92672">[[</span> <span style="color:#66d9ef">$(</span>tty<span style="color:#66d9ef">)</span> !<span style="color:#f92672">=</span> /dev/tty1 <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
  sudo loadkeys $HOME/.loadkeysrc
  tmux has-session -t $USER <span style="color:#f92672">||</span> tmux new-session -t $USER <span style="color:#f92672">&amp;&amp;</span> tmux attach-session -t $USER
<span style="color:#66d9ef">fi</span>

</code></pre></div><p>So if I login from other than tty1, and if there is an already running <em>tmux
session</em>, it attaches me to it. Else starts a new session and get me there.
😉</p>
]]></content>
        </item>
        
        <item>
            <title>git Cherry Pick</title>
            <link>https://abdullah.today/posts/cherry-pick/</link>
            <pubDate>Thu, 04 Jun 2020 14:25:08 +0500</pubDate>
            
            <guid>https://abdullah.today/posts/cherry-pick/</guid>
            <description>Git cherry-picking Aah picking cherries! ❤️
I&amp;rsquo;m using git since I started using linux. Cherry-pick is one of those commands I do alot with git. Right now I&amp;rsquo;m preparing a new cherry and will pick it later. 😉
What&amp;rsquo;s cherry-pick? According to man(1) git-cherry-pick:
Given one or more existing commits, apply the change each one introduces, recording a new commit for each. This requires your working tree to be clean (no modifications from the HEAD commit).</description>
            <content type="html"><![CDATA[<h1 id="git-cherry-picking">Git cherry-picking</h1>
<p>Aah picking cherries! ❤️</p>
<p>I&rsquo;m using <em>git</em> since I started using <em>linux</em>. Cherry-pick is one of those
commands I do alot with git. Right now I&rsquo;m preparing a new cherry and will pick
it later. 😉</p>
<h2 id="whats-cherry-pick">What&rsquo;s cherry-pick?</h2>
<p>According to <em>man(1) git-cherry-pick</em>:</p>
<pre><code>Given one or more existing commits, apply the change each
one introduces, recording a new commit for each. This
requires your working tree to be clean (no modifications
from the HEAD commit).
</code></pre><p>You&rsquo;re working on a git branch. And you want to introduce some new feature to
your repository, but you aren&rsquo;t sure if it will work or not yet.
What will you do?</p>
<p>You create a new branch. Get your work done there. You can always <em>rebase</em> but
what if you have only some commits you want to apply to <em>master</em> branch?
Here <em>cherry-pick</em> is your friend.</p>
<h2 id="create-a-new-branch">Create a new branch</h2>
<p>I&rsquo;m doing all this to explain it to new git_comers.
My website readers know that <a href="https://abdullah.today/">my site</a> is a git
repository.</p>
<p><img src="/images/git-site.png" alt="my site is git repository"></p>
<p>So I&rsquo;m on <em>master</em> branch. I&rsquo;m going to create a new branch from this branch,
checking out to it and start working.</p>
<p><img src="/images/creating-branch.png" alt="new branch"></p>
<h2 id="add-files">Add files</h2>
<p>You can see I have created a new branch and checked out to it. Wrote a new
<em>post</em> which is shown as <em>Untracked</em>.</p>
<p>After adding some screenshots, I&rsquo;m going to add them to my git repository.</p>
<p><img src="/images/adding-images.png" alt="Adding images"></p>
<p>I haven&rsquo;t done with this post yet so I haven&rsquo;t added it to index.</p>
<h2 id="commit-changes">Commit changes</h2>
<p>So now you&rsquo;re ready to commit your changes. Add <em>Untracked or modified files</em> and commit them.</p>
<p><img src="/images/cherry-post.png" alt="adding cherry post"></p>
<p>Commit them.</p>
<p><img src="/images/cherry-commit.png" alt="creating commit"></p>
<p>Remember to copy or remeber first 6 digits of the new commit or you can
always get it by:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">git log -n1 --format<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;%h&#39;</span>
</code></pre></div><blockquote>
<p><strong><em>NOTE:</em></strong> Run above code only on new branch. It will give you commit hash of the commit you just made in current checked out branch.</p>
</blockquote>
<h2 id="checkout-to-master-branch">Checkout to master branch</h2>
<p>So you have commits in new branch. Which you want to apply to your master
branch.
Checkout to master branch.</p>
<p><img src="/images/checkout-master.png" alt="checking out to master branch"></p>
<h2 id="cherry-pick">Cherry-pick</h2>
<p>Hmm. Here we go. Now we want commit made in new branch applied into our
master branch. You need to know the <strong>hash</strong> of the commit you made earlier into
other branch.</p>
<p><img src="/images/cherry-done.png" alt="cherry-pick being made"></p>
<p>Congrats! You just cherry-picked a new commit into your master branch from
cherry branch.</p>
<h2 id="delete-the-temp-branch">Delete the temp branch</h2>
<p>It is now safe to delete the new branch we made.</p>
<p><img src="/images/cherry-branch-deleted.png" alt="deleting the branch"></p>
<p>Feel free to ask more about advanced git topics. Enjoy cherry-picking!
❤️</p>
]]></content>
        </item>
        
        <item>
            <title>Multihead with BSPWM and Polybar</title>
            <link>https://abdullah.today/multihead/</link>
            <pubDate>Tue, 02 Jun 2020 10:52:37 +0500</pubDate>
            
            <guid>https://abdullah.today/multihead/</guid>
            <description>Multihead A few days ago, I relocated myself to new room. Actually this room I use for summer as its way cooler than others. I have a wall-mounted LCD monitor here so today I thought I should share how I do multi screening.
Hardware I have this lenovo X series machine which is my main machine I use. Its resolution is 1920x1080. The second one is a LCD monitor. And the resolution is 1280x1024.</description>
            <content type="html"><![CDATA[<h1 id="multihead">Multihead</h1>
<p><img src="/images/dual-monitor.png" alt="Multihead with bspwm and polybar"></p>
<p>A few days ago, I relocated myself to new room. Actually this room I use for
summer as its way cooler than others. I have a wall-mounted LCD monitor here so
today I thought I should share how I do multi screening.</p>
<h2 id="hardware">Hardware</h2>
<p>I have this lenovo X series machine which is my main machine I use. Its
resolution is 1920x1080.
The second one is a LCD monitor. And the resolution is 1280x1024.</p>
<p>My laptop doesn&rsquo;t have VGA port but I have a HDMI port. But I have worked on old
hardware with VGA port and it works.</p>
<h2 id="software">Software</h2>
<p><code>xrandr</code> is what you want. I&rsquo;m using Archlinux and it got installed with
<code>libinput</code> as dependency. I hope it will be there in other distributions as
well. If you don&rsquo;t have it, install it using your distribution&rsquo;s package
manager.</p>
<p>I use <em>bspwm</em> with <em>polybar</em>. You might have different <em>WMs</em> or <em>DE</em>. Apart from
polybar, everything would work fine. For polybar, you have to configure it to
your taste. Or clone my <a href="https://gitlab.com/Abdullah/cfg.git">git repository</a>
and copy/symlink all files to their respective paths and polybar will work fine.</p>
<h2 id="display-manager">Display manager</h2>
<p>I don&rsquo;t use a Display manager. Instead I use <em>xinit</em>. See next section for
configuring multihead using <em>xinit</em>.</p>
<h2 id="starting-on-boot">Starting on Boot</h2>
<p>In <em>bspwm</em>, when you plug HDMI cable in, OS detects it. But for screens to get
display, you have to logout from <em>bspwm</em>.
Login again and without configuration, the monitor would be a mirror to your
laptop. What ever you see on first screen, you would see on second one.</p>
<p>To make it work, you need to execute some commands.</p>
<p>First get outputs names using <em>xrandr</em> without some arguments.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">
xrandr 

Screen 0: minimum <span style="color:#ae81ff">320</span> x 200, current <span style="color:#ae81ff">3200</span> x 1080, maximum <span style="color:#ae81ff">16384</span> x <span style="color:#ae81ff">16384</span>
eDP-1 connected primary 1920x1080+0+0 <span style="color:#f92672">(</span>normal left inverted right x axis y axis<span style="color:#f92672">)</span> 309mm x 173mm
   1920x1080     60.03*+  60.01    59.97    59.96    59.93  
   1680x1050     59.95    59.88  
   1400x1050     59.98  
   1600x900      59.99    59.94    59.95    59.82  
   1280x1024     60.02  
   1400x900      59.96    59.88  
   1280x960      60.00  
   1440x810      60.00    59.97  
   1368x768      59.88    59.85  
   1280x800      59.99    59.97    59.81    59.91  
   1280x720      60.00    59.99    59.86    59.74  
   1024x768      60.04    60.00  
   960x720       60.00  
   928x696       60.05  
   896x672       60.01  
   1024x576      59.95    59.96    59.90    59.82  
   960x600       59.93    60.00  
   960x540       59.96    59.99    59.63    59.82  
   800x600       60.00    60.32    56.25  
   840x525       60.01    59.88  
   864x486       59.92    59.57  
   700x525       59.98  
   800x450       59.95    59.82  
   640x512       60.02  
   700x450       59.96    59.88  
   640x480       60.00    59.94  
   720x405       59.51    58.99  
   684x384       59.88    59.85  
   640x400       59.88    59.98  
   640x360       59.86    59.83    59.84    59.32  
   512x384       60.00  
   512x288       60.00    59.92  
   480x270       59.63    59.82  
   400x300       60.32    56.34  
   432x243       59.92    59.57  
   320x240       60.05  
   360x202       59.51    59.13  
   320x180       59.84    59.32  
DP-1 disconnected <span style="color:#f92672">(</span>normal left inverted right x axis y axis<span style="color:#f92672">)</span>
HDMI-1 disconnected <span style="color:#f92672">(</span>normal left inverted right x axis y axis<span style="color:#f92672">)</span>
DP-2 disconnected <span style="color:#f92672">(</span>normal left inverted right x axis y axis<span style="color:#f92672">)</span>
HDMI-2 connected 1280x1024+1920+0 <span style="color:#f92672">(</span>normal left inverted right x axis y axis<span style="color:#f92672">)</span> 708mm x 398mm
   1280x1024     60.02*+
   1920x1080     60.00    50.00    59.94    24.00    23.98  
   1920x1080i    60.00    50.00    59.94  
   1280x960      60.00  
   1280x720      60.00    50.00    59.94  
   1024x768      60.00  
   800x600       60.32    56.25  
   720x576       50.00  
   720x576i      50.00  
   720x480       60.00    59.94  
   720x480i      60.00    59.94  
   640x480       60.00    59.94  
   720x400       70.08  

</code></pre></div><p>Or to get connected monitors, you can invoke:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">
xrandr -q | awk <span style="color:#e6db74">&#39;/ connected / {print $1}&#39;</span>

</code></pre></div><p>You will get output of <em>N</em> lines where <em>N</em> is numbers of connected monitors.</p>
<p>The first one you see is your laptop. Others are external monitors if you have
not configured them already or have something in your $PATH which does something
on hardware change.</p>
<p>Okay. Let&rsquo;s assume my laptop is <em>eDP-1</em> and my external monitor is <em>HDMI-2</em>.
I want external monitor to appear at right of my laptop screen:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">xrandr --output HDMI-2 --auto --right-of eDP-1

</code></pre></div><p>That&rsquo;s it. You can save these two functions in your <em>~/.xprofile</em> to auto
start multihead on restart. As the configurations above we done, will go
away after this session.</p>
<p>Here is my <em>~/.xpofile</em>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">

<span style="color:#75715e">#!/bin/sh</span>
<span style="color:#75715e"># In the name of Allah, the most Gracious, the most Merciful.</span>
#
<span style="color:#75715e">#  ▓▓▓▓▓▓▓▓▓▓</span> 
<span style="color:#75715e"># ░▓ Author ▓ Abdullah &lt;https://abdullah.today&gt;</span> 
<span style="color:#75715e"># ░▓▓▓▓▓▓▓▓▓▓</span> 
<span style="color:#75715e"># ░░░░░░░░░░</span> 


<span style="color:#75715e"># Xresources file</span>
user_resources<span style="color:#f92672">=</span>$HOME/.Xresources
<span style="color:#75715e"># custom keymaps</span>
user_keymaps<span style="color:#f92672">=</span>$HOME/.Xmodmap
<span style="color:#75715e"># custom fonts</span>
user_fonts_dir<span style="color:#f92672">=</span>$HOME/.local/share/fonts
<span style="color:#75715e"># Inactivity timeout</span>
inactivity_timeout<span style="color:#f92672">=</span><span style="color:#ae81ff">180</span>
<span style="color:#75715e"># Time before exectuing lock</span> 
notify_time<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>

<span style="color:#75715e"># For some java apps</span>

<span style="color:#75715e">#wmname LG3D &amp;</span>

run<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">if</span> ! pgrep $1 ;
  <span style="color:#66d9ef">then</span>
    $@&amp;
  <span style="color:#66d9ef">fi</span>
<span style="color:#f92672">}</span>


<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -d /etc/X11/xinit/xinitrc.d <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
  <span style="color:#66d9ef">for</span> f in /etc/X11/xinit/xinitrc.d/?*.sh ; <span style="color:#66d9ef">do</span>
    <span style="color:#f92672">[</span> -x $f <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> . $f
    <span style="color:#66d9ef">done</span>
    unset f
<span style="color:#66d9ef">fi</span>

<span style="color:#75715e"># Session name</span>
export DESKTOP_SESSION<span style="color:#f92672">=</span>bspwm
<span style="color:#75715e"># No tty</span>
export XDG_SESSION_TYPE<span style="color:#f92672">=</span>x11

tab<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
  <span style="color:#75715e"># Configure only laptop&#39;s screen if no external monitor is connected.</span>
  xrandr --output eDP-1 --mode 1920x1080 --pos 0x0 --brightness 1.0 <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    --gamma 0.76:0.75:0.68 <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
<span style="color:#f92672">}</span>

tabular<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
  <span style="color:#75715e"># Configure external monitor if exists</span>
  tab
  xrandr --output HDMI-2 --mode 1280x1024 --pos 1920x0 <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
<span style="color:#f92672">}</span>

<span style="color:#75715e"># Start sxhkd</span> 

sxhkd &amp;

<span style="color:#75715e"># Load Xresources</span> 

<span style="color:#f92672">[</span> -f $user_resources <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> xrdb -merge <span style="color:#e6db74">&#34;</span>$user_resources<span style="color:#e6db74">&#34;</span>

<span style="color:#75715e"># Load keymaps</span>

<span style="color:#f92672">[</span> -f $user_keymaps <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> xmodmap <span style="color:#e6db74">&#34;</span>$user_keymaps<span style="color:#e6db74">&#34;</span>

<span style="color:#75715e"># Run compositor</span>

run picom -b --config <span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">&#34;</span>/.config/picom/picom.conf &amp;

<span style="color:#75715e"># Restore the last wallpaper</span>

<span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">&#34;</span>/.fehbg &amp;

<span style="color:#75715e"># Set cursor shape</span>

xsetroot -cursor_name ul_angle &amp;

<span style="color:#75715e">#xcompmgr -c -f D 5 &amp;</span>

<span style="color:#75715e"># Add fonts directories</span>

xset +fp <span style="color:#e6db74">&#34;</span>$user_fonts_dir<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">&amp;&amp;</span> xset fp rehash 

<span style="color:#75715e"># Start urxvt in daemon mode</span>

<span style="color:#75715e"># run urxvtd -q -o -f &amp;</span>

<span style="color:#75715e"># No mouse when idle</span>

run unclutter --ignore-scrolling --fork --timeout <span style="color:#ae81ff">1</span> &amp;

<span style="color:#75715e"># DPMS and lock screen</span>

xset dpms $inactivity_timeout &amp;
<span style="color:#75715e">#xss-lock -- physlock -mp &#39;Say, &#34;If the sea were ink for [writing] the words of my Lord, the sea would be exhausted before the words of my Lord were exhausted, even if We brought the like of it as a supplement.&#34;&#39; &amp;</span>
xss-lock -- i3lock -c <span style="color:#ae81ff">000000</span> &amp;

<span style="color:#75715e"># Start Notification daemon</span>

run dunst -c <span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">&#34;</span>/.config/dunst/dunstrc &amp;

<span style="color:#75715e"># Mute the mic</span>

pactl set-source-mute alsa_input.pci-0000_00_1b.0.analog-stereo true &amp;

<span style="color:#75715e"># Redshift for less eye strain</span>

<span style="color:#75715e">#redshift -c ~/.config/redshift/redshift.conf &amp;</span>

<span style="color:#75715e"># Start tmux if not already running</span>

<span style="color:#f92672">[</span> -z $TMUX <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> tmux new-session -s $USER -d 

<span style="color:#75715e"># Set brightness to 30 at boot</span>

light -S <span style="color:#ae81ff">30</span> &amp;

<span style="color:#75715e"># Configure multihead.</span>

<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>xrandr -q | awk <span style="color:#e6db74">&#39;/ connected / {print $1}&#39;</span> | wc -l<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> -eq <span style="color:#ae81ff">1</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
  tab --primary
<span style="color:#66d9ef">else</span>
  tabular
<span style="color:#66d9ef">fi</span>

<span style="color:#75715e"># Start a scratchpad</span>

<span style="color:#75715e">#sleep 1</span>
<span style="color:#75715e">#urxvtc -T &#39;scratchpad&#39; -geometry 65x20 &amp;</span> 
<span style="color:#75715e">#termite -t scratchpad &amp;</span>
xfce4-terminal -T scratchpad --font<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Fantasque Sans Mono Italic 16&#39;</span> &amp;

<span style="color:#75715e"># vim:ft=sh</span>

</code></pre></div><p>Change the resolution and outputs name in it and enjoy multiheading. 😉</p>
]]></content>
        </item>
        
        <item>
            <title>BSPWM</title>
            <link>https://abdullah.today/posts/bspwm/</link>
            <pubDate>Mon, 01 Jun 2020 19:02:44 +0500</pubDate>
            
            <guid>https://abdullah.today/posts/bspwm/</guid>
            <description>BSPWM BSPWM is a tiling window manager that represents windows as the leaves of a full binary tree. It has support for EWMH and multihead.
Installation bspwm is available in almost all major distributions. If you can&amp;rsquo;t find it in your OS, clone the repository and build it.
Configuration bspwm uses sxhkd for keyboard shortcuts. It has no other way to handle with keyboard input and instead provides bspc program as its interface.</description>
            <content type="html"><![CDATA[<h1 id="bspwm">BSPWM</h1>
<p><img src="/images/bspwm.png" alt="BSPWM running with htop, ncmpcpp and alsamixer"></p>
<p>BSPWM is a tiling window manager that represents windows as the leaves of a
full binary tree. It has support for <a href="https://specifications.freedesktop.org/wm-spec/wm-spec-latest.html">EWMH</a> and multihead.</p>
<h2 id="installation">Installation</h2>
<p>bspwm is available in almost all major distributions. If you can&rsquo;t find it in
your OS, clone the <a href="https://github.com/baskerville/bspwm">repository</a> and
build it.</p>
<h2 id="configuration">Configuration</h2>
<p><em>bspwm</em> uses <em>sxhkd</em> for keyboard shortcuts. It has no other way to handle with keyboard input and instead provides <em>bspc</em> program as its interface.
So you have to configure the keyboard shortcuts in another file.
<em>bspwm</em> installs <em>sxhkd</em> as its dependency mostly. If you don&rsquo;t want to use it and
want to use some other hotkey daemon like <em>xbindkeys</em> or something else, you can
install that and configure it for you. <em>sxhkd</em> is from the same developer as
<em>bspwm</em> with powerful and compact configuration syntax.</p>
<p>Create directories first:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mkdir -p ~/.config/<span style="color:#f92672">{</span>bspwm,sxhkd<span style="color:#f92672">}</span>

</code></pre></div><p>Copy the configuration files from <code>/usr/share/doc/</code>. You might have a
different path for these files in your filesystem. Find them and copy over
there.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cp /usr/share/doc/bspwm/examples/bspwmrc ~/.config/bspwm/
cp /usr/share/doc/bspwm/examples/sxhkdrc ~/.config/sxhkd/
</code></pre></div><p>Cool. Now you have configuration files placed in correct location, you can
start <em>bspwm</em> but wait. will you mind editing them?
Edit them with some editor and change the defaults to how you like, change default programs.</p>
<h2 id="start">Start</h2>
<p>I use <em>xinit</em> to start my window manager. But you can use any display manager
to boot into <em>bspwm</em>. Here is my <code>~/.xinitrc</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cat ~/.xinitrc


<span style="color:#75715e">#!/bin/sh</span>

coded_by<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">In the name of Allah, the most Gracious, the most Merciful.
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">▓▓▓▓▓▓▓▓▓▓
</span><span style="color:#e6db74">░▓ Author ▓ Abdullah &lt;https://abdullah.today&gt;
</span><span style="color:#e6db74">░▓▓▓▓▓▓▓▓▓▓
</span><span style="color:#e6db74">░░░░░░░░░░
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">░█▀▀░▀█▀░█▀█░█▀▄░▀█▀░█░█
</span><span style="color:#e6db74">░▀▀█░░█░░█▀█░█▀▄░░█░░▄▀▄
</span><span style="color:#e6db74">░▀▀▀░░▀░░▀░▀░▀░▀░░▀░░▀░▀
</span><span style="color:#e6db74">&#39;</span>


<span style="color:#f92672">[</span> -f ~/.xprofile <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> . ~/.xprofile
exec bspwm &gt;/tmp/bspwm-<span style="color:#e6db74">&#34;</span>$USER<span style="color:#e6db74">&#34;</span>.log 2&gt;&amp;<span style="color:#ae81ff">1</span>
</code></pre></div><p>It&rsquo;s enought to boot into <em>bspwm</em>. But we want some programs to run at
startup.</p>
<h2 id="auto-start-programs">Auto-start programs</h2>
<p>You can start applications from <code>~/.config/bspwmrc</code> or <code>~/.xprofile</code>.
If you use some display manager, you can start applications from <code>~/.xprofile</code>. It&rsquo;s sourced when display manager starts.</p>
<p>You can have a <em>autostart.sh</em> in your <code>~/.config/bspwm/</code> and execute from <code>~/.config/bspwm/bspwmrc</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cat ~/.config/bspwm/bspwmrc
...
$HOME/.config/bspwm/autostart.sh &amp;
...
</code></pre></div><p>or a better way to do this is launching your programs from  <code>~/.xprofile</code> and
source it from <code>~/.xinitrc</code>. This way you can use any display manager or xinit and you don&rsquo;t need extra configuration or a script.</p>
<p>Here is my <code>~/.xprofile</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">cat ~/.xprofile


<span style="color:#75715e">#!/bin/sh</span>
<span style="color:#75715e"># In the name of Allah, the most Gracious, the most Merciful.</span>
#
<span style="color:#75715e">#  ▓▓▓▓▓▓▓▓▓▓</span> 
<span style="color:#75715e"># ░▓ Author ▓ Abdullah &lt;https://abdullah.today&gt;</span> 
<span style="color:#75715e"># ░▓▓▓▓▓▓▓▓▓▓</span> 
<span style="color:#75715e"># ░░░░░░░░░░</span> 


<span style="color:#75715e"># Xresources file</span>
user_resources<span style="color:#f92672">=</span>$HOME/.Xresources
<span style="color:#75715e"># custom keymaps</span>
user_keymaps<span style="color:#f92672">=</span>$HOME/.Xmodmap
<span style="color:#75715e"># custom fonts</span>
user_fonts_dir<span style="color:#f92672">=</span>$HOME/.local/share/fonts
<span style="color:#75715e"># Inactivity timeout</span>
inactivity_timeout<span style="color:#f92672">=</span><span style="color:#ae81ff">180</span>
<span style="color:#75715e"># Time before exectuing lock</span> 
notify_time<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>

<span style="color:#75715e"># For some java apps</span>

<span style="color:#75715e">#wmname LG3D &amp;</span>

run<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
<span style="color:#66d9ef">if</span> ! pgrep $1 ;
<span style="color:#66d9ef">then</span>
$@&amp;
<span style="color:#66d9ef">fi</span>
<span style="color:#f92672">}</span>


<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -d /etc/X11/xinit/xinitrc.d <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
<span style="color:#66d9ef">for</span> f in /etc/X11/xinit/xinitrc.d/?*.sh ; <span style="color:#66d9ef">do</span>
<span style="color:#f92672">[</span> -x $f <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> . $f
<span style="color:#66d9ef">done</span>
unset f
<span style="color:#66d9ef">fi</span>

<span style="color:#75715e"># Session name</span>
export DESKTOP_SESSION<span style="color:#f92672">=</span>bspwm
<span style="color:#75715e"># No tty</span>
export XDG_SESSION_TYPE<span style="color:#f92672">=</span>x11

tab<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
<span style="color:#75715e"># Configure only laptop&#39;s screen if no external monitor is connected.</span>
xrandr --output eDP-1 --mode 1920x1080 --pos 0x0 --brightness 1.0 <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>--gamma 0.76:0.75:0.68 <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
<span style="color:#f92672">}</span>

tabular<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
<span style="color:#75715e"># Configure external monitor if exists</span>
tab
xrandr --output HDMI-2 --mode 1280x1024 --pos 1920x0 <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
<span style="color:#f92672">}</span>

<span style="color:#75715e"># Start sxhkd</span> 

sxhkd &amp;

<span style="color:#75715e"># Load Xresources</span> 

<span style="color:#f92672">[</span> -f $user_resources <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> xrdb -merge <span style="color:#e6db74">&#34;</span>$user_resources<span style="color:#e6db74">&#34;</span>

<span style="color:#75715e"># Load keymaps</span>

<span style="color:#f92672">[</span> -f $user_keymaps <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> xmodmap <span style="color:#e6db74">&#34;</span>$user_keymaps<span style="color:#e6db74">&#34;</span>

<span style="color:#75715e"># Run compositor</span>

run picom -b --config <span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">&#34;</span>/.config/picom/picom.conf &amp;

<span style="color:#75715e"># Restore the last wallpaper</span>

<span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">&#34;</span>/.fehbg &amp;

<span style="color:#75715e"># Set cursor shape</span>

xsetroot -cursor_name ul_angle &amp;

<span style="color:#75715e">#xcompmgr -c -f D 5 &amp;</span>

<span style="color:#75715e"># Add fonts directories</span>

xset +fp <span style="color:#e6db74">&#34;</span>$user_fonts_dir<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">&amp;&amp;</span> xset fp rehash 

<span style="color:#75715e"># Start urxvt in daemon mode</span>

<span style="color:#75715e"># run urxvtd -q -o -f &amp;</span>

<span style="color:#75715e"># No mouse when idle</span>

run unclutter --ignore-scrolling --fork --timeout <span style="color:#ae81ff">1</span> &amp;

<span style="color:#75715e"># DPMS and lock screen</span>

xset dpms $inactivity_timeout &amp;
<span style="color:#75715e">#xss-lock -- physlock -mp &#39;Say, &#34;If the sea were ink for [writing] the words of my Lord, the sea would be exhausted before the words of my Lord were exhausted, even if We brought the like of it as a supplement.&#34;&#39; &amp;</span>
xss-lock -- i3lock -c <span style="color:#ae81ff">000000</span> &amp;

<span style="color:#75715e"># Start Notification daemon</span>

run dunst -c <span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">&#34;</span>/.config/dunst/dunstrc &amp;

<span style="color:#75715e"># Mute the mic</span>

pactl set-source-mute alsa_input.pci-0000_00_1b.0.analog-stereo true &amp;

<span style="color:#75715e"># Redshift for less eye strain</span>

<span style="color:#75715e">#redshift -c ~/.config/redshift/redshift.conf &amp;</span>

<span style="color:#75715e"># Start tmux if not already running</span>

<span style="color:#f92672">[</span> -z $TMUX <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> tmux new-session -s $USER -d 

<span style="color:#75715e"># Set brightness to 30 at boot</span>

light -S <span style="color:#ae81ff">30</span> &amp;

<span style="color:#75715e"># Configure multihead.</span>

<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>xrandr -q | awk <span style="color:#e6db74">&#39;/ connected / {print $1}&#39;</span> | wc -l<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> -eq <span style="color:#ae81ff">1</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
tab --primary
<span style="color:#66d9ef">else</span>
tabular
<span style="color:#66d9ef">fi</span>

<span style="color:#75715e"># Start a scratchpad</span>

<span style="color:#75715e">#sleep 1</span>
<span style="color:#75715e">#urxvtc -T &#39;scratchpad&#39; -geometry 65x20 &amp;</span> 
<span style="color:#75715e">#termite -t scratchpad &amp;</span>
xfce4-terminal -T scratchpad --font<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Fantasque Sans Mono Italic 16&#39;</span> &amp;

<span style="color:#75715e"># vim:ft=sh</span>

</code></pre></div><p>The file is well-commented. So you can copy and edit it to your likings.</p>
<h2 id="barpanel">Bar/Panel</h2>
<p>I&rsquo;m using <a href="https://github.com/jaagr/polybar">polybar</a> with <em>bspwm</em>. To be
honest, it was the reason I left <a href="https://dwm.suckless.org">dwm</a> because
even with patching <em>dwm</em>, I wasn&rsquo;t able to use polybar with it. <em>bspwm</em> is
<em>EWMH</em> supported so you can use almost any bar with it.
I&rsquo;m starting polybar from <code>~/.config/bspwm/bspwmrc</code>. More on polybar, you
can find a <a href="https://abdullah.today/polybar">post</a> in my blog to know more about
it.</p>
<h2 id="rules">Rules</h2>
<p>In <em>bspwm</em>, you can define rules for windows how and where they appear.
You can add a rule in <code>~/.config/bswpm/bspwmrc</code> like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">bspc rule -a Chromium desktop<span style="color:#f92672">=</span>^2
</code></pre></div><p>This rule will always open Chromium on desktop 2.</p>
<p>Or if you have some applications with complex window rules, you can define
them in a script and execute that script from <code>~/.config/bspwm/bspwrc</code> like
this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">bspc config external_rules_command <span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">/.config/bspwm/external_rules&#34;</span>

</code></pre></div><p>Here is my <em>external_rules</em> script:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">cat ~/.config/bspwm/external_rules


<span style="color:#75715e">#!/bin/sh</span>

coded_by<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">In the name of Allah, the most Gracious, the most Merciful.
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">▓▓▓▓▓▓▓▓▓▓
</span><span style="color:#e6db74">░▓ Author ▓ Abdullah &lt;https://abdullah.today&gt;
</span><span style="color:#e6db74">░▓▓▓▓▓▓▓▓▓▓
</span><span style="color:#e6db74">░░░░░░░░░░
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">░█▀▄░█▀▀░█▀█░█░█░█▄█░░░█▀▄░█░█░█░░░█▀▀░█▀▀
</span><span style="color:#e6db74">░█▀▄░▀▀█░█▀▀░█▄█░█░█░░░█▀▄░█░█░█░░░█▀▀░▀▀█
</span><span style="color:#e6db74">░▀▀░░▀▀▀░▀░░░▀░▀░▀░▀░░░▀░▀░▀▀▀░▀▀▀░▀▀▀░▀▀▀
</span><span style="color:#e6db74">&#39;</span>


wid<span style="color:#f92672">=</span>$1
class<span style="color:#f92672">=</span>$2
instance<span style="color:#f92672">=</span>$3
title<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>xdotool getwindowname $wid<span style="color:#66d9ef">)</span>

<span style="color:#66d9ef">case</span> $class in
<span style="color:#f92672">[</span>Rr<span style="color:#f92672">]</span>edshift-*|<span style="color:#f92672">[</span>Tt<span style="color:#f92672">]</span>int2|<span style="color:#f92672">[</span>Pp<span style="color:#f92672">]</span>inentry-*|<span style="color:#f92672">[</span>Mm<span style="color:#f92672">]</span>pv|<span style="color:#f92672">[</span>Mm<span style="color:#f92672">]</span>u<span style="color:#f92672">[</span>Pp<span style="color:#f92672">][</span>Dd<span style="color:#f92672">][</span>Ff<span style="color:#f92672">]</span>|<span style="color:#f92672">[</span>Mm<span style="color:#f92672">]</span>Player|<span style="color:#f92672">[</span>Tt<span style="color:#f92672">]</span>hunar|<span style="color:#f92672">[</span>Ff<span style="color:#f92672">]</span>im|<span style="color:#f92672">[</span>Gg<span style="color:#f92672">]</span>picview|<span style="color:#f92672">[</span>Nn<span style="color:#f92672">]</span>itrogen|<span style="color:#f92672">[</span>Aa<span style="color:#f92672">]</span>randr|<span style="color:#f92672">[</span>Gg<span style="color:#f92672">]</span>alculator|<span style="color:#f92672">[</span>Ff<span style="color:#f92672">]</span>ont-manager|<span style="color:#f92672">[</span>Oo<span style="color:#f92672">]</span>blogout|<span style="color:#f92672">[</span>Pp<span style="color:#f92672">]</span>eek|<span style="color:#f92672">[</span>Ss<span style="color:#f92672">]</span>kype|<span style="color:#f92672">[</span>Xx<span style="color:#f92672">]</span>fce4-appfinder|<span style="color:#f92672">[</span>Xx<span style="color:#f92672">]</span>fce4-about|<span style="color:#f92672">[</span>Gg<span style="color:#f92672">]</span>pick|<span style="color:#f92672">[</span>Gg<span style="color:#f92672">]</span>mrun|<span style="color:#f92672">[</span>Xx<span style="color:#f92672">][</span>Cc<span style="color:#f92672">]</span>alc|<span style="color:#f92672">[</span>Pp<span style="color:#f92672">]</span>avucontrol|<span style="color:#f92672">[</span>Vv<span style="color:#f92672">]</span>lc|<span style="color:#f92672">[</span>Ee<span style="color:#f92672">]</span>o<span style="color:#f92672">[</span>mg<span style="color:#f92672">]</span>|<span style="color:#f92672">[</span>Ff<span style="color:#f92672">]</span>eh|<span style="color:#f92672">[</span>Rr<span style="color:#f92672">]</span>istretto|<span style="color:#f92672">[</span>Ss<span style="color:#f92672">]</span>xiv|<span style="color:#f92672">[</span>Pp<span style="color:#f92672">]</span>qiv|<span style="color:#f92672">[</span>Aa<span style="color:#f92672">]</span>tril|<span style="color:#f92672">[</span>Ee<span style="color:#f92672">]</span>vince|<span style="color:#f92672">[</span>Zz<span style="color:#f92672">]</span>athura|scratchpad<span style="color:#f92672">)</span>
echo <span style="color:#e6db74">&#34;state = floating&#34;</span>
echo <span style="color:#e6db74">&#34;center = on&#34;</span>
;;
Google-chrome<span style="color:#f92672">)</span>
echo <span style="color:#e6db74">&#34;desktop = ^2&#34;</span>
;;
Opera<span style="color:#f92672">)</span>
echo <span style="color:#e6db74">&#34;desktop = ^3&#34;</span>
;;
Gimp<span style="color:#f92672">)</span>
echo <span style="color:#e6db74">&#34;desktop = ^5&#34;</span>
;;
Anydesk<span style="color:#f92672">)</span>
echo <span style="color:#e6db74">&#34;desktop = ^4&#34;</span>
echo <span style="color:#e6db74">&#34;follow = on&#34;</span>
;;
<span style="color:#66d9ef">esac</span>

<span style="color:#66d9ef">case</span> $title in
scratchpad<span style="color:#f92672">)</span>
echo <span style="color:#e6db74">&#34;state = floating&#34;</span>
;;
<span style="color:#66d9ef">esac</span>

<span style="color:#75715e"># vim:ft=sh</span>

</code></pre></div><h2 id="scratchpad">Scratchpad</h2>
<p>I love to use a terminal emulator mostly. So I have a hidden terminal window
in floating mode. Whenever I need it, I just press the keybinds and it
appears on top of other apps so I can copy/paste something to it.</p>
<p>There are multiple way to achieve this. But what I have done is different. Not
just terminal window, any window can be pushed to scratchpad.</p>
<p>Copy this script in <code>~/.config/bspwm/scratchpad.sh</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/sh
</span><span style="color:#75715e"></span>
coded_by<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;
</span><span style="color:#e6db74">In the name of Allah, the most Gracious, the most Merciful.
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">▓▓▓▓▓▓▓▓▓▓ 
</span><span style="color:#e6db74">░▓ Author ▓ Abdullah &lt;https://abdullah.today&gt; 
</span><span style="color:#e6db74">░▓▓▓▓▓▓▓▓▓▓ 
</span><span style="color:#e6db74">░░░░░░░░░░ 
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">░█▀▀░█▀▀░█▀▄░█▀█░▀█▀░█▀▀░█░█░█▀█░█▀█░█▀▄
</span><span style="color:#e6db74">░▀▀█░█░░░█▀▄░█▀█░░█░░█░░░█▀█░█▀▀░█▀█░█░█
</span><span style="color:#e6db74">░▀▀▀░▀▀▀░▀░▀░▀░▀░░▀░░▀▀▀░▀░▀░▀░░░▀░▀░▀▀░
</span><span style="color:#e6db74">&#39;</span>


toggle_flag<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
id<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>bspc query -N -n <span style="color:#e6db74">&#34;focused&#34;</span><span style="color:#66d9ef">)</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -n <span style="color:#e6db74">&#34;</span>$id<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#66d9ef">$(</span>xprop -id <span style="color:#e6db74">&#34;</span>$id<span style="color:#e6db74">&#34;</span> | grep <span style="color:#e6db74">&#34;_SCRATCH_ORDER&#34;</span> | wc -l<span style="color:#66d9ef">)</span> -gt <span style="color:#ae81ff">0</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
xprop -id $id -remove _SCRATCH_ORDER
xprop -id $id -remove _SCRATCH_VISIBILITY
<span style="color:#66d9ef">else</span>
xprop -id $id -f _SCRATCH_ORDER 32ii -set _SCRATCH_ORDER <span style="color:#66d9ef">$(</span>date +%s,%N<span style="color:#66d9ef">)</span>
xprop -id $id -f _SCRATCH_VISIBILITY 8i -set _SCRATCH_VISIBILITY <span style="color:#ae81ff">0</span>
xdotool windowunmap $id
<span style="color:#66d9ef">fi</span>
<span style="color:#66d9ef">fi</span>
<span style="color:#f92672">}</span>

switch_app<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
id<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>bspc query -N -n <span style="color:#e6db74">&#34;focused&#34;</span><span style="color:#66d9ef">)</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#66d9ef">$(</span>xprop -id <span style="color:#e6db74">&#34;</span>$id<span style="color:#e6db74">&#34;</span> | grep <span style="color:#e6db74">&#34;_SCRATCH_VISIBILITY(INTEGER) = 1&#34;</span> | wc -l<span style="color:#66d9ef">)</span> -gt <span style="color:#ae81ff">0</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
xprop -id $id -f _SCRATCH_VISIBILITY 8i -set _SCRATCH_VISIBILITY <span style="color:#ae81ff">0</span>
xdotool windowunmap $id
<span style="color:#66d9ef">fi</span>

sid<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>
id<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>bspc query -N -n <span style="color:#e6db74">&#34;focused&#34;</span><span style="color:#66d9ef">)</span>;
<span style="color:#66d9ef">for</span> w in <span style="color:#66d9ef">$(</span>xwininfo -root -children | grep -e <span style="color:#e6db74">&#34;^\s*0x[0-9a-f]\+&#34;</span> -o<span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$w<span style="color:#e6db74">&#34;</span> !<span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span>$id<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
t<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>xprop -id $w _SCRATCH_ORDER | grep <span style="color:#e6db74">&#39; = \(.*\)&#39;</span><span style="color:#66d9ef">)</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -n <span style="color:#e6db74">&#34;</span>$t<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
echo $t $w
<span style="color:#66d9ef">fi</span>
<span style="color:#66d9ef">fi</span>
<span style="color:#66d9ef">done</span> | sort -n | head -n1 | cut -d<span style="color:#e6db74">&#34; &#34;</span> -f <span style="color:#ae81ff">5</span>
<span style="color:#66d9ef">)</span>;

<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -n <span style="color:#e6db74">&#34;</span>$sid<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>printf <span style="color:#e6db74">&#34;%04d&#34;</span> $sid<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> !<span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>printf <span style="color:#e6db74">&#34;%04d&#34;</span> $id<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
echo <span style="color:#e6db74">&#34;</span>$sid<span style="color:#e6db74">&#34;</span> !<span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span>$id<span style="color:#e6db74">&#34;</span>
xprop -id $sid -f _SCRATCH_ORDER 32ii -set _SCRATCH_ORDER <span style="color:#66d9ef">$(</span>date +%s,%N<span style="color:#66d9ef">)</span>
xprop -id $sid -f _SCRATCH_VISIBILITY 8i -set _SCRATCH_VISIBILITY <span style="color:#ae81ff">1</span>
xdotool windowmap $sid
bspc node -f $sid
<span style="color:#66d9ef">fi</span>
<span style="color:#f92672">}</span>


op<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$op<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;toggle-flag&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
toggle_flag
<span style="color:#66d9ef">elif</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$op<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;switch-app&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
switch_app
<span style="color:#66d9ef">fi</span>

</code></pre></div><p>And add this line to your <code>~/.config/sxhkd/sxhkdrc</code>:</p>
<pre><code># Push focused window to scratchpad (background)

super + shift + i
&quot;$HOME&quot;/.config/bspwm/scratchpad.sh toggle-flag

# Hide/Un-Hide a window pushed to scratchpad previously

super + i
&quot;$HOME&quot;/.config/bspwm/scratchpad.sh switch-app
</code></pre><p>Now you can use <code>Super + Shift + i</code> to hide the focused window and <code>Super + i</code>
to get it back.</p>
<h2 id="misc-settings">Misc settings</h2>
<h4 id="borders">Borders</h4>
<p>There are active, normal, focused window colors settings available:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cat ~/.config/bspwm/bspwmrc
...
<span style="color:#75715e"># Colors</span>

dark_moderate_blue<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#5e81ac&#34;</span>
pure_cyan<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#00FFFF&#34;</span>
pure_magenta<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#FF00FF&#34;</span>
vivid_red<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#ff3232&#34;</span>
hot_pink<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#ff69b4&#34;</span>
up_maroon<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#7b1113&#34;</span>



<span style="color:#75715e"># Feedback color of preselection</span>

bspc config presel_feedback_color   $up_maroon

<span style="color:#75715e"># Focused Border color</span>

bspc config focused_border_color    $hot_pink

<span style="color:#75715e"># Active border color</span> 

bspc config active_border_color     $pure_magenta

<span style="color:#75715e"># Normal border color</span>

bspc config normal_border_color     $pure_cyan

...
</code></pre></div><h4 id="mouse">Mouse</h4>
<p>While you press and hold <em>SUPER</em> key and hit these mouse buttons, these actions can be done:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cat ~/.config/bspwm/bspwmrc
...
<span style="color:#75715e"># Pointer actions when pressing mod + button</span>

bspc config pointer_action1         move
bspc config pointer_action2         resize_side
bspc config pointer_action3         resize_corner
...
</code></pre></div><h4 id="focus">Focus</h4>
<p>When you move your mouse to some window, it should get focused. This behaviour is disabled by default which I use mostly and found helpful. Enable it by appending this line to your <em>bspwmrc</em>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bspc config focus_follows_pointer true

</code></pre></div><h4 id="no-borders">No borders</h4>
<p>If you have only one window open on a desktop, you might not want it to have
borders. Append it to <em>bspwmrc</em>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">bspc config borderless_monocle true
</code></pre></div><h4 id="split-ratio">Split ratio</h4>
<p>How much area the new window should take? You can configure this behaviour using
this command or by appending it to <em>bspwmrc</em>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">bspc config split_ratio 0.50
</code></pre></div><p>It will alot half of the available screen to new window.</p>
<h4 id="ewmh">EWMH</h4>
<p>Ignore EWMH focus requests. If true, opening new program in already opened instance will have direct focus too. Like if you&rsquo;re on desktop 8 and you open a URL from mutt, and chrome is configured as url launcher, it will send the url to chrome opened
in 2nd desktop and switch to it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bspc config ignore_ewmh_focus false
</code></pre></div><p>I think its enough for now. <em>BSPWM</em> is amazing and very useful if you know
scripting. If need assistance on <em>BSPWM</em>, you can always ask in comments.
Thanks for reading. 😉</p>
]]></content>
        </item>
        
        <item>
            <title>Terminal Sharing service</title>
            <link>https://abdullah.today/tmate/</link>
            <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/tmate/</guid>
            <description>What&amp;rsquo;s tmate? On *nix systems, sometimes we need support. And geeks don&amp;rsquo;t like GUI apps just to have your system in front of them, at least I don&amp;rsquo;t like that 😉
tmate is terminal sharing software you can use it to connect with your friends and you both work from there. It&amp;rsquo;s available in many distributions repos and in case you aren&amp;rsquo;t lucky enough, you can compile it from source or there are pre-compiled binaries there in their Github page.</description>
            <content type="html"><![CDATA[<h2 id="whats-tmate">What&rsquo;s tmate?</h2>
<p>On *nix systems, sometimes we need support. And geeks don&rsquo;t like GUI apps just
to have your system in front of them, at least I don&rsquo;t like that 😉</p>
<p><a href="https://tmate.io">tmate</a> is terminal sharing software you can use it to
connect with your friends and you both work from there.
It&rsquo;s available in many distributions repos and in case you aren&rsquo;t lucky
enough, you can compile it from source or there are pre-compiled binaries
there in their Github page.</p>
<h2 id="configuration">Configuration</h2>
<p>By default, tmate loads the system configuration file from
/etc/tmux.conf, if present, then looks for a user configuration file at ~/.tmux.conf and
~/.tmate.conf.</p>
<h2 id="keybindings">Keybindings</h2>
<p>Just like tmux, tmate uses <code>C-b</code> as prefix.</p>
<p>The default command key bindings are:</p>
<pre><code>
           C-b         Send the prefix key (C-b) through to the application.
           C-o         Rotate the panes in the current window forwards.
           C-z         Suspend the tmate client.
           !           Break the current pane out of the window.
           &quot;           Split the current pane into two, top and bottom.
           #           List all paste buffers.
           $           Rename the current session.
           %           Split the current pane into two, left and right.
           &amp;           Kill the current window.
           '           Prompt for a window index to select.
           (           Switch the attached client to the previous session.
           )           Switch the attached client to the next session.
           ,           Rename the current window.
           -           Delete the most recently copied buffer of text.
           .           Prompt for an index to move the current window.
           0 to 9      Select windows 0 to 9.
           :           Enter the tmate command prompt.
           ;           Move to the previously active pane.
           =           Choose which buffer to paste interactively from a list.
           ?           List all key bindings.
           D           Choose a client to detach.
           L           Switch the attached client back to the last session.
           [           Enter copy mode to copy text or view the history.
           ]           Paste the most recently copied buffer of text.
           c           Create a new window.
           d           Detach the current client.
           f           Prompt to search for text in open windows.
           i           Display some information about the current window.
           l           Move to the previously selected window.
           n           Change to the next window.
           o           Select the next pane in the current window.
           p           Change to the previous window.
           q           Briefly display pane indexes.
           r           Force redraw of the attached client.
           m           Mark the current pane (see select-pane -m).
           M           Clear the marked pane.
           s           Select a new session for the attached client interactively.
           t           Show the time.
           w           Choose the current window interactively.
           x           Kill the current pane.
           z           Toggle zoom state of the current pane.
           {           Swap the current pane with the previous pane.
           }           Swap the current pane with the next pane.
           ~           Show previous messages from tmate, if any.
           Page Up     Enter copy mode and scroll one page up.
           Up, Down
           Left, Right
                       Change to the pane above, below, to the left, or to the right of the current pane.
           M-1 to M-5  Arrange panes in one of the five preset layouts: even-horizontal, even-vertical, main-horizontal,
                       main-vertical, or tiled.
           Space       Arrange the current window in the next preset layout.
           M-n         Move to the next window with a bell or activity marker.
           M-o         Rotate the panes in the current window backwards.
           M-p         Move to the previous window with a bell or activity marker.
           C-Up, C-Down
           C-Left, C-Right
                       Resize the current pane in steps of one cell.
           M-Up, M-Down
           M-Left, M-Right
                       Resize the current pane in steps of five cells.

     Key bindings may be changed with the bind-key and unbind-key commands.

</code></pre><h2 id="how-to-use">How to use?</h2>
<p>Once installed, just invoke <code>tmate</code> from command line.
tmate needs an ssh key so in case you don&rsquo;t have an ssh key, generate one.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ssh-keygen
</code></pre></div><p>Once ready, invoke tmate. It will start connecting to its server and show you
in status bar once connected.
You can now show the URIs by <code>show-messages</code> command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">tmate show-messages
</code></pre></div><p>It will provide you both [web, ssh] priviliged and non-privileged links.
Share with your friends how you like.</p>
<p>Enjoy!</p>
]]></content>
        </item>
        
        <item>
            <title>CRUX</title>
            <link>https://abdullah.today/crux/</link>
            <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/crux/</guid>
            <description>CRUX is like a good looking, really good looking, gorgeous, hot girl without any cheap perfume or makeup, waiting for you to customize her in any way you see fit. On top of that, she is free, permanent and wont make absurd and disturbing demands.</description>
            <content type="html"><![CDATA[<p>CRUX is like a good looking, really good looking, gorgeous, hot girl without any cheap perfume or makeup, waiting for you to customize her in any way you see fit. On top of that, she is free, permanent and wont make absurd and disturbing demands.</p>
]]></content>
        </item>
        
        <item>
            <title>How to install CRUX with encryption</title>
            <link>https://abdullah.today/encrypted-crux/</link>
            <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/encrypted-crux/</guid>
            <description>How to install fully encrypted CRUX This post is for crux users who wanna secure their crux installation.
Partitioning I&amp;rsquo;m gonna use two partitions. First boot partition will be unencrypted which holds kernel. I use secure boot with my own keys. You can find a post in my blog how to do that. and I have some ports too for secure boot. Unencrypted Boot Partition Create a partition more than 200 Mbs for boot ESP with gdisk code ef00.</description>
            <content type="html"><![CDATA[<h2 id="how-to-install-fully-encrypted-crux">How to install fully encrypted CRUX</h2>
<p>This post is for crux users who wanna secure their crux installation.</p>
<h2 id="partitioning">Partitioning</h2>
<p>I&rsquo;m gonna use two partitions. First boot partition will be unencrypted which holds kernel. I use secure boot with my own keys. You can find a post in my blog how to do that. and I have some ports too for secure boot. <!-- raw HTML omitted --></p>
<h2 id="unencrypted-boot-partition">Unencrypted Boot Partition</h2>
<p>Create a partition more than 200 Mbs for boot ESP with gdisk code ef00.</p>
<p>Let&rsquo;s create a FAT filesystem on it for EFI.</p>
<pre><code>
mkfs.fat -F32 /dev/sda1
    
</code></pre><h2 id="encrypted-partition">Encrypted Partition</h2>
<p>Create an encrypted LUKS container</p>
<pre><code>cryptsetup luksFormat /dev/sda2
        
</code></pre><p>Type uppercase &ldquo;YES&rdquo; and then enter passphrase two times.</p>
<p>Open the encrypted container.</p>
<pre><code>cryptsetup open /dev/sda2 crux 
</code></pre><p>Now the encrypted container is available at /dev/mapper/crux so lets create some lvm stuff and create filesystems and a swap partition.</p>
<pre><code>pvcreate /dev/mapper/crux
vgcreate ak /dev/mapper/crux
lvcreate -L 8G ak -n swap
lvcreate -L 50G ak -n root
lvcreate -l 100%FREE ak -n home
mkfs.ext4 /dev/ak/root -L crux-root
mkfs.ext4 /dev/ak/home -L crux-home
mkswap /dev/ak/swap -L crux-swap

</code></pre><p>Mount the partitions and start installations.</p>
<pre><code>mount /dev/mapper/ak-root /mnt
mkdir /mnt/{boot,home}
mount /dev/mapper/ak-home /mnt/home
mount /dev/sda1 /mnt/boot
swapon /dev/mapper/ak-swap
</code></pre><h2 id="base-system-installation">Base system installation</h2>
<p>Start installation. Type &ldquo;setup&rdquo; and select &ldquo;YES&rdquo;. Install all packages. Make sure you get no error messages once installation is finished.</p>
<pre><code>setup

</code></pre><h2 id="chroot">Chroot</h2>
<p>Enter chroot.</p>
<pre><code>
setup-chroot
    
</code></pre><h2 id="fstab">fstab</h2>
<p>Check fstab by going to /etc/fstab. Open it with vim. You&rsquo;ll see two uncommented entries there. Leave them as it is. In vim prompt mode just type :r! blkid and you&rsquo;ll get UUIDs of all partitions. Add them there for root, home, boot and swap partitions.</p>
<h2 id="locales">locales</h2>
<p>Generate locales.</p>
<pre><code>localedef -i en_US -f ISO-8859-1 en_US
localedef -i en_US -f ISO-8859-1 en_US.ISO-8859-1
localedef -i en_US -f UTF-8 en_US.UTF-8 
</code></pre><h2 id="rcconf">rc.conf</h2>
<p>Edit rc.conf. Mine looks like this.</p>
<pre><code>vim /etc/rc.conf

#
# /etc/rc.conf: system configuration
#

FONT=ter-v22n
KEYMAP=us
TIMEZONE=Asia/Karachi
HOSTNAME=cruz
SYSLOG=sysklogd
SERVICES=(crond wifi acpid )

# End of file
    
</code></pre><h2 id="resolvconf">resolv.conf</h2>
<p>Edit /etc/resolv.conf. I&rsquo;m using OpenDNS nameserver here.</p>
<pre><code>vim /etc/resolv.conf
    
nameserver 208.67.222.222
    
</code></pre><h2 id="wifi">wifi</h2>
<p>For wireless connection, you can use wpa_supplicant. For example if your interface is wlp3s0 and SSID is nix, add passphrase to it using wpa_passphrase like this.</p>
<pre><code>wpa_passphrase nix &gt;&gt; /etc/wpa_supplicant.conf
Reading from STDIN  # Type your passphrase.
    
wpa_supplicant -i wlp3s0 -B -c /etc/wpa_supplicant.conf
dhcpcd wlp3s0
    
</code></pre><h2 id="kernel">Kernel</h2>
<p>Compile the kernel now. Go to the /usr/src/linux directory. Configure the kernel config. Since we are gonna have an encrypted installation, we need some extra drivers. Invoke &lsquo;make menuconfig&rsquo; and enable these options. And also enable what is needed for your hardware. I&rsquo;ll add only options needed for encryption here.</p>
<pre><code>    
General setup ---&gt;

  [*] Initial RAM filesystem and RAM disk (iniramfs/initrd) support


Device Drivers ---&gt;

  Multiple devices driver support (RAID and LVM) ---&gt;
    [*] Device mapper support
    [*] Crypt target support

Cryptographic API ---&gt; 
  
  -*- CBC support
  &lt;*&gt; SHA224 and SHA256 digest algorithm
  &lt;*&gt; AES cipher algorithms

</code></pre><p>You can get my kernel config from <a href="https://gitlab.com/Abdullah/cfg/raw/master/kernel/config">https://gitlab.com/Abdullah/cfg/raw/master/kernel/config</a> by using wget and then edit it as per your hardware. This one is for Thinkpad with SSD.</p>
<pre><code>wget https://gitlab.com/Abdullah/cfg/raw/master/kernel/config &gt; .config 

</code></pre><p>After you&rsquo;re done with configuring kernel, compile it. Once it&rsquo;s compiled, copy it to /boot directory and install modules.</p>
<pre><code>make -j8
make modules_install
cp arch/x86/boot/bzImage /boot/vmlinuz
cp System.map /boot
</code></pre><h2 id="users-and-package-management">Users and package management</h2>
<h2 id="root-password-and-a-normal-user">Root password and a normal user</h2>
<p>Set root password. Create our first user. And then we will create a second user for package management.</p>
<pre><code>passwd
useradd -G wheel,audio,video -m -U abdullah
passwd abdullah
</code></pre><h2 id="give-new-user-sudo-access">Give new user sudo access</h2>
<p>Add new created user to sudoers. Uncomment this line in /etc/sudoers.</p>
<pre><code>%wheel ALL=(ALL) ALL
</code></pre><h2 id="user-for-creating-packages">User for creating packages</h2>
<p>Now let&rsquo;s create a user for package management.</p>
<pre><code>groupadd pkgmk
useradd -m -g pkgmk pkgmk
    
</code></pre><p>Add our user to this newly created group.</p>
<pre><code>usermod -aG pkgmk abdullah
    
</code></pre><h2 id="fakeroot">fakeroot</h2>
<p>Edit /etc/prt-get.conf to set up fakeroot building.</p>
<pre><code>makecommand sudo -H -u pkgmk /usr/bin/fakeroot /usr/bin/pkgmk
    
</code></pre><p>Edit /etc/pkgmk.conf.</p>
<pre><code>vim /etc/pkgmk.conf
    
PKGMK_SOURCE_DIR=&quot;/home/pkgmk/distfiles&quot;
PKGMK_PACKAGE_DIR=&quot;/home/pkgmk/packages&quot;
PKGMK_WORK_DIR=&quot;/home/pkgmk/work/$name&quot;
    
</code></pre><p>Create those directories.</p>
<pre><code>mkdir /home/pkgmk/{distfiles,packages,work}
chown pkgmk:pkgmk /home/pkgmk/*
chmod 775 /home/pkgmk/*
    
</code></pre><p>Enable contrib repository.</p>
<pre><code>
mv /etc/ports/contrib.rsync.inactive /etc/ports/contrib.rsync
    
</code></pre><p>Add my custom ports repository.</p>
<pre><code>
echo &quot;ROOT_DIR=/usr/ports/ak\nURL=https://abdullah.today/ports&quot; &gt; /etc/ports/ak.httpup

    
</code></pre><p>Enable contrib and my repository by editing /etc/prt-get.conf. Uncomment the line which says &ldquo;prtdir /usr/ports/contrib&rdquo; and add this line on top of the other port directories path. &ldquo;prtdir /usr/ports/ak&rdquo;. Also don&rsquo;t forget to uncomment the line which says, &ldquo;runscripts yes&rdquo;. After editing the file, it should be look like this.</p>
<pre><code>    
###
### prt-get conf
###

# note: the order matters: the package found first is used
prtdir /usr/ports/ak
prtdir /usr/ports/core
prtdir /usr/ports/opt
prtdir /usr/ports/xorg

# the following line enables the multilib compat-32 collection
#prtdir /usr/ports/compat-32

# the following line enables the user maintained contrib collection
prtdir /usr/ports/contrib

### use mypackage form local directory
# prtdir /home/packages/build:mypackage

### log options:
# writelog enabled         # (enabled|disabled)
# logmode  overwrite       # (append|overwrite)
# rmlog_on_success yes     # (no|yes)
logfile  /var/log/pkgbuild/%n.log
                           # path, %p=path to port dir, %n=port name
                           #       %v=version, %r=release

### use alternate cache file (default: /var/lib/pkg/prt-get.cache
# cachefile /mnt/nfs/cache

### print README information:
# readme verbose           # (verbose|compact|disabled)

### prefer higher versions in sysup / diff
# preferhigher no      # (yes|no)

### use regexp search
# useregex no        # (yes|no)

### run pre- and post-installs scripts; yes is equivalent to the
### --install-scripts option
runscripts yes            # (no|yes)


### EXPERT SECTION ###

### alternative commands
# makecommand      pkgmk
# addcommand       pkgadd
# removecommand    pkgrm
# runscriptcommand sh
makecommand sudo -H -u pkgmk /usr/bin/fakeroot /usr/bin/pkgmk

</code></pre><p>Sync ports now.</p>
<pre><code>
ports -u
    
</code></pre><p>Get fakeroot installed if you don&rsquo;t have yet.</p>
<pre><code>
prt-get install fakeroot

</code></pre><h2 id="dracut">Dracut</h2>
<p>Get dracut and create an initramfs.</p>
<pre><code>prt-get depinst dracut
dracut initramfs.img
    
</code></pre><h2 id="bootloader">Bootloader</h2>
<p>I&rsquo;m using EFISTUB. If you&rsquo;re using some other boot manager like grub, consult their wiki. There are some dracut related variables in this example. I&rsquo;d recommand, create a new file with vim, and then in prompt mode, type :r! blkid so you&rsquo;ll get all UUIDs there in the file. Just copy them in the new file, delete other lines and save it. Then redirect this file&rsquo;s output to shell like this, &lsquo;cat newCreatedFile | sh&rsquo;. It will create a new entry. root-UUID=, rd.luks.uuid=, and rd.lvm.vg=. For EFISTUB, create an entry like this.</p>
<pre><code>efibootmgr --create --disk /dev/sda --part 1 --label 'CRUX-Encrypted' --loader /vmlinuz --unicode &quot;root=UUID=XXXX-XXXX-XXXX-XXX rw resume=UUID=XXXX-XXXX-XXXX-XXXX rd.luks.uuid=XXXX-XXXX-XXXX-XXXX rd.lvm.vg=ak&quot; --verbose
    
</code></pre><h2 id="congrats">Congrats!</h2>
<p>Congrats! You have now a fully encrypted system. Reboot now. If you have some problems, just send me an email and I&rsquo;ll be glad to help.</p>
]]></content>
        </item>
        
        <item>
            <title>How to include a screenshot in Github README</title>
            <link>https://abdullah.today/github-readme/</link>
            <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/github-readme/</guid>
            <description>A picture is worth 1000 words. Working with github repos, sometimes you want to include a screenshot in your repos. Today I&amp;rsquo;ll help you getting this done in one step.
Go to your repo page and click on issues.
Click new issue
Take a screenshot you wanna add and paste it there using Control + V or whatever you like.
You will get a link once the screenshot is uploaded. Just copy it and paste it in your README.</description>
            <content type="html"><![CDATA[<p>A picture is worth 1000 words. Working with github repos, sometimes you want to
include a screenshot in your repos. Today I&rsquo;ll help you getting this done in one
step.</p>
<p>Go to your repo page and click on issues.</p>
<p>Click new issue</p>
<p>Take a screenshot you wanna add and paste it there using Control + V or whatever
you like.</p>
<p>You will get a link once the screenshot is uploaded. Just copy it and paste it
in your README.md</p>
<p><img src="https://user-images.githubusercontent.com/42554663/82585126-f4173d80-9bae-11ea-8e78-bfaf93788211.png" alt="issues screenshot"></p>
<p>Close the page &lsquo;new issue&rsquo;, you don&rsquo;t need to create an issue.</p>
<p>Commit and push changes. Done.</p>
]]></content>
        </item>
        
        <item>
            <title>How to manage a website using git</title>
            <link>https://abdullah.today/site-as-git-repo/</link>
            <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/site-as-git-repo/</guid>
            <description>Git is another awesome tool developed and maintained by Linus Torvalds who wrote linux kernel. In this post I&amp;rsquo;ll explain how can we use it for our site maintenance. I have a vps on which my site is hosted along with a mail server, git server and a web server too. But I&amp;rsquo;m sure this guide can be used with shared hosting accounts with some modifications.
Install git. Once installed, as root user, create git user and add it to www-data group.</description>
            <content type="html"><![CDATA[<p>Git is another awesome tool developed and maintained by Linus Torvalds who wrote linux kernel. In this post I&rsquo;ll explain how can we use it for our site maintenance. I have a vps on which my site is hosted along with a mail server, git server and a web server too. But I&rsquo;m sure this guide can be used with shared hosting accounts with some modifications.</p>
<p>Install git. Once installed, as root user, create git user and add it to www-data group.</p>
<pre><code>useradd git -m -G www-data
</code></pre><p>Login into this new git user.</p>
<pre><code>su - git

</code></pre><p>Create an ssh directory for this account.</p>
<pre><code>mkdir .ssh
</code></pre><p>Upload your user ssh public key to this directory how you want. I use pastebin here. Assuming you pasted your public key somewhere on pastebin, I&rsquo;ll fetch it using curl.</p>
<pre><code>curl -o .ssh/authorized_keys 'pastebin address where you pasted the public key'
</code></pre><p>Create a directory for your user you wanna use for your site or this user maybe the one you use to login to your vps using ssh. I&rsquo;ll use user z for this post.</p>
<pre><code>cd &amp;&amp; mkdir z &amp;&amp; cd z

</code></pre><p>Create a git repo here now.</p>
<pre><code>git init --bare mysite.git

</code></pre><p>Create a hook in .git directory.</p>
<pre><code>echo &quot;#!/bin/sh \
cd /var/www/html \
unset GIT_DIR  \
git pull \ &quot; &gt; ~/z/mysite.git/hooks/post-receive &amp;&amp; chmod +X ~/z/mysite.git/hooks/post-receive

</code></pre><p>That&rsquo;s it. Now go to the directory where your site is hosted, in this example we used /var/www/html for site and z as username which is used to maintain our site in future using git like in above hook we used that. You can modify both hook and here this code too according to your needs.</p>
<pre><code>
cd /var/www/html &amp;&amp; git clone ~/z/mysite.git &amp;&amp; cd mysite.git &amp;&amp; mv * /var/www/html/ &amp;&amp;  cd /var/www/html &amp;&amp; rm -rf mysite.git
</code></pre><p>We have made it. Now in your local machine, clone this repo this way.</p>
<pre><code>git clone 'your vps ip or domain if it's pointed to your vps':z/site.git

</code></pre><p>cd into the directory you just cloned, do some modifications and push the changes and you&rsquo;ll see the magic. If you have some problems just ping me and I&rsquo;ll be glad to help.</p>
]]></content>
        </item>
        
        <item>
            <title>Automate the boring stuff of wallpapers with systemd</title>
            <link>https://abdullah.today/wallpaper-automation/</link>
            <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/wallpaper-automation/</guid>
            <description>So assuming you&amp;rsquo;re not using a DE and don&amp;rsquo;t wanna install a tool which comes with a lot of dependencies just to automate the boring stuf of changing wallpapers (root window of Xorg). I wrote a simple Python program which you can use as systemd unit too.
Clone the repository or download/copy the beautify.py if you don&amp;rsquo;t want systemd part. I&amp;rsquo;d recommend ~/bin for such executable scripts. You can execute it from .</description>
            <content type="html"><![CDATA[<p>So assuming you&rsquo;re not using a DE and don&rsquo;t wanna install a tool which comes
with a lot of dependencies just to automate the boring stuf of changing
wallpapers (root window of Xorg). I wrote a simple Python
<a href="https://github.com/Awan/beautify.git">program</a> which you can use as systemd
unit too.</p>
<p>Clone the <a href="https://github.com/Awan/beautify.git">repository</a> or download/copy
the beautify.py if you don&rsquo;t want systemd part. I&rsquo;d recommend ~/bin for such
executable scripts. You can execute it from <em>.xinitrc</em> or <em>.xprofile</em>. For
systemd there is explaination in repository readme file too.</p>
<pre><code>git clone https://github.com/Awan/beautify.git
cp beautify/beautify.py ~/bin/beautify
cp beautify/systemd/beautify.service ~/.config/systemd/user/default.target.wants/
systemctl enable --user beautify.service
systemctl start --user beautify.service
</code></pre><p>Don&rsquo;t forget to edit the beautify.service. Add path
to beautify script where you copied it, and also add
your wallpapers collection&rsquo;s path and duration.</p>
<p>If you wanna execute it without systemd, you can
copy the <em>beautify.py</em> to ~/bin and execute it from
<em>~/.xinitrc</em> or <em>~/.xprofile</em> like this.</p>
<pre><code>cat ~/.xinitrc
...

~/bin/beautify ~/pix/wallpapers 300
...

</code></pre><p>It will change the wallpapers from <em>~/pix/wallpapers</em> every 5
minutes. Enjoy!</p>
]]></content>
        </item>
        
        <item>
            <title>Create/paste snippets from Terminal</title>
            <link>https://abdullah.today/gists/</link>
            <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/gists/</guid>
            <description>What&amp;rsquo;s snippet/gist? gist is a piece of code or maybe some important text shared on Github or Gitlab. It&amp;rsquo;s actually a git repository so you can clone it, work on it locally and push changes.
Share gists from Terminal There are multiple programs available in many distributions for this purpose. You just have to find it. On Arch Linux, you can install gist.
Here is how it works in terminal.</description>
            <content type="html"><![CDATA[<h2 id="whats-snippetgist">What&rsquo;s snippet/gist?</h2>
<p>gist is a piece of code or maybe some important text shared on
<a href="https://github.com">Github</a> or <a href="https://gitlab.com">Gitlab</a>.
It&rsquo;s actually a git repository so you can clone it, work on it locally and push
changes.</p>
<h2 id="share-gists-from-terminal">Share gists from Terminal</h2>
<p>There are multiple programs available in many distributions for this purpose.
You just have to find it. On <a href="https://archlinux.org">Arch Linux</a>, you can
install <a href="https://www.archlinux.org/packages/community/any/gist/">gist</a>.</p>
<p>Here is how it works in terminal.</p>
<p><img src="/images/gists-1.png" alt="share text using gist"></p>
<p>You can update an existing gist if you know its hash ID. It has a man page yeah
;-)</p>
<h2 id="share-gists-from-editor">Share gists from EDITOR</h2>
<p>If you&rsquo;re using <code>vim</code>, add this line to your <code>~/.vimrc</code>.</p>
<pre><code>command! -range=% GT &lt;line1&gt;,&lt;line2&gt;w !gist -c -p -f %

</code></pre><p>Now in command mode, you can type <code>GT</code> and hit enter to create a snippet from
your editor&rsquo;s window.</p>
<h2 id="get-gists-output-in-terminal">Get gists output in Terminal</h2>
<p>So now you know how to share snippets from terminal. But what if someone has
given you some URL and you want to see it in terminal?</p>
<p>I have got this snippet shared, for example</p>
<script type="application/javascript" src="https://gist.github.com/0962f678ff2b396cbd34cf542e56137b/.js"></script>

<p>It&rsquo;s hosted on github at this URL.</p>
<p><code>https://gist.github.com/Awan/0962f678ff2b396cbd34cf542e56137b</code></p>
<p>Using <code>cURL</code> or <code>wget</code> you will get this github page html in your terminal.</p>
<p>So here is a magic trick for you ;-)</p>
<p>Replace <code>github.com</code> to <code>githubusercontent</code> and append <code>/raw</code> at the end.</p>
<p>The above snippet&rsquo;s URL now becomes:</p>
<p><code>https://gist.githubusercontent.com/Awan/0962f678ff2b396cbd34cf542e56137b/raw</code></p>
<p>Now you can use <code>cURL</code> or <code>wget</code> to see/save the snippent right from your
terminal.</p>
<p><img src="/images/gists-2.png" alt="get text from gist"></p>
<p>That&rsquo;s it. You can save it to some file as well.</p>
<p>Thanks for reading.</p>
]]></content>
        </item>
        
        <item>
            <title>How to contribute to open source project</title>
            <link>https://abdullah.today/contribution-with-git/</link>
            <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/contribution-with-git/</guid>
            <description>So you want to contribute to some open source project which is hosted on git[hub,lab] or some other git website. Here is all you want to do.
Fork the repository Create a personal fork. On github, visit the project repository and hit fork. It will fork the project in your personal account.
Clone it Clone it in your local machine so you can work on it. Remember you are cloning the fork, and not the original project.</description>
            <content type="html"><![CDATA[<p>So you want to contribute to some open source project which is hosted on
git[hub,lab] or some other git website.
Here is all you want to do.</p>
<h2 id="fork-the-repository">Fork the repository</h2>
<p>Create a personal fork. On github, visit the project repository and hit fork.
It will fork the project in your personal account.</p>
<h2 id="clone-it">Clone it</h2>
<p>Clone it in your local machine so you can work on it.
Remember you are cloning the fork, and not the original project.</p>
<pre><code>$ git clone git@github.com:USERNAME/project
</code></pre><h2 id="add-the-upstream">Add the upstream</h2>
<p>Add the original project as upstream.</p>
<pre><code>$ git remote add upstream
https://github.com/ORIGINAL_PROJECT_USERNAME/ORIGINAL_PROJECT_REPO
</code></pre><h2 id="fetch-latest-work">Fetch latest work</h2>
<p>If you forked a project just now, you can go to next step. If there is a time
gap, fetch latest work from upstream to your fork.</p>
<pre><code>$ git pull upstream
</code></pre><h2 id="create-a-new-branch">Create a new branch</h2>
<p>Create a new branch so you can work there.</p>
<pre><code>$ git checkout -b develop
</code></pre><h2 id="add-your-contribution">Add your contribution</h2>
<p>Add your work in new created branch.
Commit changes. Make sure to write meaninigful commits.</p>
<h2 id="push-your-work-live">Push your work live</h2>
<p>Push the changes you have made to remote origin.</p>
<pre><code>$ git push
</code></pre><h2 id="create-a-pull-request">Create a pull request</h2>
<p>Go to your fork page and create a pull request. That&rsquo;s it</p>
]]></content>
        </item>
        
        <item>
            <title>Encrypted dotfiles with GnuPG</title>
            <link>https://abdullah.today/encrypted-dotfiles/</link>
            <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/encrypted-dotfiles/</guid>
            <description>What these dotfiles are? In unix world, most programs are configured command line and they save their configurations in homedir usually a file which names start with a dot. Thus dotfiles.
Power users care about them alot. You can store your dotfiles on some git server like github or gitlab and many other options there like you can host them on your VPS as well. If you use git to store them and you don&amp;rsquo;t have a private repository, anybody can see them.</description>
            <content type="html"><![CDATA[<h2 id="what-these-dotfiles-are">What these dotfiles are?</h2>
<p>In unix world, most programs are configured command line and they save their
configurations in homedir usually a file which names start with a dot. Thus
dotfiles.</p>
<p>Power users care about them alot. You can store your dotfiles on some git server
like github or gitlab and many other options there like you can host them on
your VPS as well. If you use git to store them and you don&rsquo;t have a private
repository, anybody can see them.</p>
<p>Dotfiles often contains some private data like plain text passwords and some
informations you don&rsquo;t wanna share publicly. Today I&rsquo;m gonna show you some
technique so your dotfiles will be encrypted and nobody will be able to see
them.</p>
<h2 id="requirements">Requirements</h2>
<p>You will need a gpg key, stow and a git repository.
Create a gpg key if you don&rsquo;t have one already.</p>
<h2 id="real-procedure">Real procedure?</h2>
<p>So you have a git repository now. Call it ~/cfg in my case.</p>
<p>Inside ~/cfg you have some files which you don&rsquo;t wanna share publicly
unencrypted. But you still want them to be hosted somewhere for backup.</p>
<p>For example, I have a file adbkey which is private key for adb devices
(androids).</p>
<p>I don&rsquo;t wanna share it publicly but I still wanna version control it.
So lets do it in a secure fashion.</p>
<h2 id="create-directory-structure">Create directory structure</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ mkdir -p ~/cfg/etc/.android
$ mkdir -p ~/cfg/etc/.local/share/misc
</code></pre></div><h2 id="move-the-sensitive-files">Move the sensitive files</h2>
<p>So now we have created the directories. Lets move the real files we wanna add to
git repository for tracking.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ mv ~/.android/adbkey ~/cfg/etc/.local/share/misc
</code></pre></div><h2 id="create-a-symlink-for-private-file">Create a symlink for private file</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ cd ~/cfg/etc/.android
$ ln -sf ../.local/share/misc/adbkey adbkey
</code></pre></div><h2 id="create-a-symlink-or-stow-the-files">Create a symlink or stow the file(s)</h2>
<p>Let stow do this for you. It&rsquo;s very useful piece of software and I manage my
dotfiles using it. But you can use ln too if you can&rsquo;t find stow in your
distribution repositories.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ cd ~/cfg
$ stow etc
</code></pre></div><p>It will create a symlink ~/.android/adbkey pointing to
~/cfg/etc/.android/adbkey.</p>
<h2 id="track-files-with-git">Track file(s) with git</h2>
<p>Now we can add this symlink to track. Git doesn&rsquo;t track the real file. It will
only track the symlink.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ cd ~/cfg
$ git add etc/.android
</code></pre></div><h2 id="tell-git-to-ignore-sensitive-files">Tell git to ignore sensitive file(s)</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ echo <span style="color:#e6db74">&#34;etc/.local/share/misc/&#34;</span> &gt;&gt; ~/cfg/.gitignore
</code></pre></div><p>Now it won&rsquo;t track the sensitive files in ~/cfg/.local/share/misc.</p>
<h2 id="compress-the-sensitive-files-with-tar">Compress the sensitive file(s) with tar</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ cd ~/cfg
$ tar czf encrypted.tar.gz etc/.local/share/misc 
</code></pre></div><h2 id="encrypt-the-tar-archive-and-delete-the-un-encrypted-archive">Encrypt the tar archive and delete the un-encrypted archive</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ gpg -er abdullah@abdullah.today encrypted.tar.gz
$ rm encrypted.tar.gz
</code></pre></div><p>Replace <a href="mailto:abdullah@abdullah.today">abdullah@abdullah.today</a> with your email ID you used while creating gpg
key.</p>
<h2 id="add-encrypted-archive-to-git">Add encrypted archive to git</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ cd ~/cfg
$ git add encrypted.tar.gz.gpg
</code></pre></div><h2 id="commit-and-push-the-changes-to-remote">Commit and push the changes to remote</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ git commit -m <span style="color:#e6db74">&#39;adding encrypted dotfiles&#39;</span>
$ git push 
</code></pre></div><h2 id="functions-to-automate-this-process">Functions to automate this process</h2>
<p>Here I have written two bash/zsh functions to automate this stuff.
endot to encrypt the dotfiles and dedot to decrypt them.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">endot<span style="color:#f92672">()</span>
<span style="color:#f92672">{</span>
  cd ~/cfg
  tar czf encrypted.tar.gz etc/.local/share/misc
  gpg -er abdullah@abdullah.today encrypted.tar.gz
  rm encrypted.tar.gz
<span style="color:#f92672">}</span>
</code></pre></div><p>and</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">dedot<span style="color:#f92672">()</span>
<span style="color:#f92672">{</span>
  cd ~/cfg
  gpg -do encrypted.tar.gz encrypted.tar.gz.gpg
  tar xvf encrypted.tar.gz
  rm encrypted.tar.gz
<span style="color:#f92672">}</span>
</code></pre></div><p>You can save the functions into your shell initialzing files like ~/.zshrc for zsh
and ~/.bashrc for bash.</p>
<p>Whenever you change these sensitive files, just run the endot function in the
terminal and it will encrypt the new dotfiles and git will complain that the
encrypted.tar.gz.gpg is modified so commit it and push the new version.</p>
<p>I hope this article will help many of you. If you have better alternatives or
need some assistance, just
leave a comment.</p>
]]></content>
        </item>
        
        <item>
            <title>Encrypted Arch Linux installation</title>
            <link>https://abdullah.today/encrypted-archlinux/</link>
            <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/encrypted-archlinux/</guid>
            <description>What&amp;rsquo;s Arch Linux? Arch Linux is a free and open source linux distribution based on the rule Keep it Simple.
Installation Arch Linux has no graphical installer. You have to install using CLI.
Installation media creation Go to Downloads page and select a nearby mirror. Download the iso file. If you&amp;rsquo;re on Windows, you can use rufus to create a bootable media.
On linux, you can use dd:
# dd if=downloaded iso file of=/dev/sdX status=progress where X is your USB device&amp;rsquo;s ID.</description>
            <content type="html"><![CDATA[<h1 id="whats-arch-linux">What&rsquo;s <strong>Arch Linux</strong>?</h1>
<p><img src="/images/arch.jpg" alt="Arch Linux"></p>
<p><a href="https://archlinux.org">Arch Linux</a> is a free
and open source linux distribution based on the rule Keep it Simple.</p>
<h3 id="installation">Installation</h3>
<p>Arch Linux has no graphical installer. You have to install using CLI.</p>
<h3 id="installation-media-creation">Installation media creation</h3>
<p>Go to <a href="https://archlinux.org/download">Downloads page</a> and select a nearby mirror. Download the iso file. If you&rsquo;re on Windows, you can use rufus to create a bootable media.</p>
<p>On linux, you can use <strong>dd</strong>:</p>
<pre><code># dd if=downloaded iso file of=/dev/sdX status=progress
</code></pre><p>where X is your USB device&rsquo;s ID. Don&rsquo;t use a single partition. Use the whole
device.</p>
<h3 id="boot-the-media">Boot the media</h3>
<p>Insert the USB device and reboot the computer. Press the button configured to
come boot options up. Choose your USB device from boot options.</p>
<h3 id="connect-to-internet">Connect to internet</h3>
<p>If you have ethernet, Arch linux iso will detect it. If you have a wireless
connection, you have to connect it manually.</p>
<pre><code># wpa_passphrase 'wifi APN' 'wifi password' &gt;&gt; /etc/wpa_supplicant/wpa_supplicant.conf
# wpa_supplicant -Bc /etc/wpa_supplicant/wpa_supplicant.conf -i 'wifi interface'
# dhclient
</code></pre><p>where wifi APN is the access point name you get when you scan for your wifi. And
wifi interface you can get using iwconfig. It might be wlp3s0 or wlan0.
Or you can use wifi-menu.</p>
<p>Now ping some website <strong>abdullah.today</strong> to check if you&rsquo;re connected to
internet or not.</p>
<h3 id="partitioning">Partitioning</h3>
<p>There are multiple ways to encrypt the installation. One of them in LUKS on lvm.
It&rsquo;s straightforward.</p>
<p>Assuming you have a UEFI system and sda is your drive where you wanna install
archlinux.</p>
<pre><code># gdisk /dev/sda
</code></pre><pre><code>GPT fdisk (gdisk) version 1.0.1

  Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present

Found valid GPT with protective MBR; using GPT.

Command (? for help): o
This option deletes all partitions and creates a new protective MBR.
Proceed? (Y/N): Y

Command (? for help): n
Partition number (1-128, default 1): 
First sector (34-242187466, default = 2048) or {+-}size{KMGTP}: 
Last sector (2048-242187466, default = 242187466) or {+-}size{KMGTP}:
+512M
Current type is 'Linux filesystem'
Hex code or GUID (L to show codes, Enter = 8300): EF00
Changed type of partition to 'EFI System'

Command (? for help): n
Partition number (2-128, default 2): 
First sector (34-242187466, default = 1050624) or {+-}size{KMGTP}: 
Last sector (1050624-242187466, default = 242187466) or {+-}size{KMGTP}: 
Current type is 'Linux filesystem'
Hex code or GUID (L to show codes, Enter = 8300): 8309
Changed type of partition to 'Linux LUKS'

Command (? for help): p
Disk /dev/sda: 242187500 sectors, 115.5 GiB
Logical sector size: 512 bytes
Disk identifier (GUID): 569FFB67-6969-49E4-B999-15A681987564
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 242187466
Partitions will be aligned on 2048-sector boundaries
Total free space is 2014 sectors (1007.0 KiB)

Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048         1050623   512.0 MiB   EF00  EFI System
   2         1050624       242187466   115.0 GiB   8309  Linux LUKS

command (? for help): w

</code></pre><p>Type o and then Y.</p>
<p>Type n to create a new partition. Select 1 to create a very first partition for
EFI. Hit enter and then type +512M to create a 512 Mbs partition. Enter ef00 as
partition type.</p>
<p>Again type n to create a new partition. Select 2. Hit enter and again enter to
give it rest of the storage if you don&rsquo;t wanna install some other operating
system. Hex code for LUKS is 8309 but you can go without it. By default it will
be 8300 (linux filesystem).</p>
<p>Type p to check if everything is fine. And once satisfied, type w and hit enter
to save the work.</p>
<h3 id="create-file-systems">Create file systems</h3>
<p>First, create a filesystem for EFI.</p>
<pre><code># mkfs.vfat -F32 /dev/sda1
</code></pre><p>Now create a LUKS container.</p>
<pre><code># cryptsetup luksFormat /dev/sda2
</code></pre><p>It will ask you to confirm. Type YES in all uppercase. Then choose a good
passphrase. Write it if you can&rsquo;t memorize it. Once forgotten, you can&rsquo;t recover
it.</p>
<p>Now open the new container.</p>
<pre><code># cryptsetup open /dev/sda2 cryptlvm

</code></pre><p>Create a physical volume in this LUKS container.</p>
<pre><code># pvcreate /dev/mapper/cryptlvm
</code></pre><p>Create a volume group. I&rsquo;ll name it nix.</p>
<pre><code># vgcreate nix /dev/mapper/cryptlvm
</code></pre><p>Create logical volumes on volume group. I&rsquo;m creating three, one for encrypted swap
and another for home and last one for root.</p>
<pre><code># lvcreate -L 8G nix -n swap
# lvcreate -L 25G nix -n root
# lvcreate -l +100%FREE nix -n home
</code></pre><p>Now create filesystems.</p>
<pre><code># mkfs.ext4 /dev/mapper/nix-root
# mkfs.ext4 /dev/mapper/nix-home
# mkswap /dev/mapper/nix-swap
</code></pre><p>Mount them.</p>
<pre><code># mount /dev/mapper/nix-root /mnt
# mkdir /mnt/home
# mkdir /mnt/boot
# mount /dev/mapper/nix-home /mnt/home
# mount /dev/sda1 /mnt/boot
</code></pre><p>Turn the swap partition on.</p>
<pre><code># swapon /dev/mapper/nix-swap
</code></pre><h3 id="install-the-base-system">Install the base system</h3>
<pre><code># pacstrap /mnt base base-devel linux linux-firmware
</code></pre><h3 id="generate-fstab">Generate fstab</h3>
<pre><code># genfstab -U /mnt &gt;&gt; /mnt/etc/fstab
</code></pre><blockquote>
<p><strong><em>NOTE:</em></strong> If you&rsquo;re using an SSD, replace relatime with noatime in  /mnt/etc/fstab except boot partition.</p>
</blockquote>
<h3 id="chroot-into-new-system">chroot into new system.</h3>
<pre><code># arch-chroot /mnt
</code></pre><p>Set the timezone.</p>
<pre><code># ln -s /usr/share/zoneinfo/Asia/Karachi /etc/localtime
# hwclock --systohc
</code></pre><p>Replace Asia with your continent and Karachi with city.</p>
<p>Set hostname</p>
<pre><code># echo nix &gt; /etc/hostname
</code></pre><p>Replace nix with name you wanna give your machine to.</p>
<p>Set locales</p>
<pre><code># vim /etc/locale.gen

  #en_HK ISO-8859-1  
  #en_IE.UTF-8 UTF-8  
  #en_IE ISO-8859-1  
  #en_IE@euro ISO-8859-15  
  #en_IL UTF-8  
  #en_IN UTF-8  
  #en_NG UTF-8  
  #en_NZ.UTF-8 UTF-8  
  #en_NZ ISO-8859-1  
  #en_PH.UTF-8 UTF-8  
  #en_PH ISO-8859-1  
  #en_SC.UTF-8 UTF-8  
  #en_SG.UTF-8 UTF-8  
  #en_SG ISO-8859-1  
  en_US.UTF-8 UTF-8  
  #en_US ISO-8859-1  
  #en_ZA.UTF-8 UTF-8  
  #en_ZA ISO-8859-1  
  #en_ZM UTF-8  
  #en_ZW.UTF-8 UTF-8  
  #en_ZW ISO-8859-1  
  #eo UTF-8  
  #es_AR.UTF-8 UTF-8  
  #es_AR ISO-8859-1  
  #es_BO.UTF-8 UTF-8  
</code></pre><p>Uncomment en_US.UTF-8 UTF-8 . (remove # from the beginning)</p>
<pre><code># echo LANG=en_US.UTF-8 &gt; /etc/locale.conf
# locale-gen
</code></pre><p>Install some necessary software.</p>
<pre><code># pacman -S wpa_supplicant dhclient dialog
</code></pre><p>Create a user.</p>
<pre><code># useradd -m -G wheel 'username'
# passwd 'username'
</code></pre><p>Create root password</p>
<pre><code># passwd
</code></pre><h3 id="mkinitcpio-configuration">mkinitcpio configuration</h3>
<p>Edit the file <strong>/etc/mkinitcpio.conf</strong>. Copy this line or write in order in hooks line. Order matters so don&rsquo;t ignore or you will get un-bootable system.</p>
<pre><code># vim /etc/mkinitcpio.conf

HOOKS=(base udev autodetect keyboard keymap consolefont modconf block encrypt lvm2 filesystems resume fsck)

</code></pre><p>Generate mkinitcpio</p>
<pre><code>mkinitcpio -p linux
</code></pre><h3 id="install-bootloader">Install bootloader</h3>
<pre><code># bootctl install 
</code></pre><p>Create entries.</p>
<p>Create a file <strong>/boot/loader/entries/arch.conf</strong>.</p>
<pre><code># vim /boot/loader/entries/arch.conf

title	ArchLinux
linux	/vmlinuz-linux
initrd	/initramfs-linux.img
options cryptdevice=UUID=&lt;YOUR-PARTITION-UUID&gt;:lvm:allow-discards resume=/dev/mapper/nix-swap root=/dev/mapper/nix-root rw quiet

</code></pre><p>Where UUID you can get using blkid. It would be in /dev/sda2.</p>
<h3 id="un-mount-and-reboot">Un-mount and reboot</h3>
<pre><code># exit
# umount /mnt
# reboot
</code></pre><p>Remove the USB device. And enjoy your new archlinux encrypted installation.</p>
]]></content>
        </item>
        
        <item>
            <title>Polybar - A stylish bar</title>
            <link>https://abdullah.today/polybar/</link>
            <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/polybar/</guid>
            <description>I recently tried to compile polybar and used it with tiling window manager bspwm.
Polybar Here is my bar configuration I have been using for over the years with i3, bspwm, dwm and many other window managers even with xfce4.
$ cat $HOME/.config/polybar/config [colors] background = #FF000000 background-alt = ${xrdb:polybar*color8} foreground = ${xrdb:polybar*foreground} urgent = #B34747 foreground-alt = #555 primary = ${xrdb:polybar*color3} secondary = ${xrdb:polybar*color1} alert = ${xrdb:polybar*color13} [settings] screenchange-reload = true screenchange = true throttle-output = 5 throttle-output-for = 10 throttle-input-for = 30 compositing-background = source compositing-foreground = over compositing-overline = over compositing-underline = over compositing-border = over pseudo-transparency = true [global/wm] margin-top = 0 margin-bottom = 0 [bar/eDP-1] monitor = ${env:MONITOR:eDP-1} monitor-fallback = eDP1 bottom = false width = 100% height = 25 offset-x = 0 offset-y = 0 radius = 10 fixed-center = true background = ${colors.</description>
            <content type="html"><![CDATA[<p>I recently tried to compile <a href="https://github.com/polybar/polybar.git">polybar</a> and used it with tiling window manager <a href="https://github.com/baskerville/bspwm.git">bspwm</a>.</p>
<h2 id="polybar">Polybar</h2>
<p>Here is my bar configuration I have been using for over the years with i3,
bspwm, dwm and many other window managers even with xfce4.</p>
<pre><code>$ cat $HOME/.config/polybar/config
[colors]
background = #FF000000
background-alt = ${xrdb:polybar*color8}
foreground = ${xrdb:polybar*foreground}
urgent = #B34747
foreground-alt = #555
primary = ${xrdb:polybar*color3}
secondary = ${xrdb:polybar*color1}
alert = ${xrdb:polybar*color13}


[settings]
screenchange-reload = true
screenchange = true
throttle-output = 5
throttle-output-for = 10
throttle-input-for = 30
compositing-background = source
compositing-foreground = over
compositing-overline = over
compositing-underline = over
compositing-border = over
pseudo-transparency = true


[global/wm]
margin-top = 0
margin-bottom = 0


[bar/eDP-1]
monitor = ${env:MONITOR:eDP-1}
monitor-fallback = eDP1
bottom = false
width = 100%
height = 25
offset-x = 0
offset-y = 0
radius = 10
fixed-center = true
background = ${colors.background}
foreground = ${colors.foreground}
line-size = 0
line-color = #f00
border-size = 0
border-top-size = 0
border-color = ${xrdb:background}
padding-left = 0
padding-right = 1
module-margin-left = 2
module-margin-right = 2
font-0 =  FontAwesome
font-1 = Monospace:weight=regular:pixelsize=13
font-2 = DejaVu Sans:pixelsize=11
font-3 =  Segoe UI Emoji
modules-right = bspwm
modules-center = mpd
modules-left = date hijri wlan battery temperature cpu memory pulseaudio arch_backlight
tray-position = right
tray-padding = 6
;tray-background = #24292A00
tray-background = ${root.background}
wm-restack = bspwm
override-redirect = false
;scroll-up = bspwm-desknext
;scroll-down = bspwm-deskprev


[module/bspwm]
type = internal/bspwm
pin-workspaces = true
inline-mode = false
enable-click = true
enable-scroll = true
reverse-scroll = true
fuzzy-match = false
ws-icon-0 = &quot;I&quot;
ws-icon-1 = &quot;II&quot;
ws-icon-2 = &quot;III&quot;
ws-icon-3 = &quot;IV&quot;
ws-icon-4 = &quot;V&quot;
ws-icon-5 = &quot;VI&quot;
ws-icon-6 = &quot;VII&quot;
ws-icon-7 = &quot;VIII&quot;
ws-icon-8 = &quot;IX&quot;
ws-icon-9 = &quot;X&quot;
format = &lt;label-state&gt; &lt;label-mode&gt;
label-monitor = %name%
label-dimmed-foreground = #555
;label-dimmed-focused-background = #f00
label-focused = %icon% %name%
label-focused-underline= ${colors.primary}
label-focused-foreground = #f00000
label-occupied = %icon% %name%
label-occupied-underline = #555555
label-urgent = %icon% %name%
label-urgent-underline = ${colors.primary}
label-urgent-background = ${colors.alert}
label-empty = %icon% %name%
label-empty-foreground = #d700ff
;label-empty-foreground = ${colors.foreground-alt}
label-monocle = &quot;  &quot;
label-monocle-foreground = #fff995
label-tiled = &quot;  &quot;
;label-tiled-foreground = #750080
label-tiled-foreground = #00ffff
label-fullscreen = &quot;  &quot;
;label-floating = &quot;  &quot;
label-floating = &quot;  &quot;
label-floating-foreground = #ff45ff
label-pseudotiled = &quot;  &quot;
label-locked = &quot;  &quot;
label-locked-foreground = #bd2c40
label-sticky = &quot;  &quot;
label-sticky-foreground = #fba922
label-private = &quot;     &quot;
label-private-foreground = #bd2c40
label-marked = &quot; &quot;
label-marked-foreground = #0000ff
label-separator = 
label-separator-padding = 3
label-separator-foreground = #ffb52a
label-occupied-padding = 3
label-empty-padding = 3
label-urgent-padding = 3



[module/xwindow]
type = internal/xwindow
label = &quot;    /  %title:0:48:...%&quot;


[module/backlight-acpi]
type = internal/backlight
sub = module/backlight-acpi
base = module/xbacklight
inherit = module/xbacklight
card = intel_backlight
format = &lt;ramp&gt;&lt;label&gt;
label = %percentage%%
ramp-0 = 🌕
ramp-1 = 🌔
ramp-2 = 🌓
ramp-3 = 🌒
ramp-4 = 🌑


;[module/backlight]
;type = internal/backlight
;card = intel_backlight
;;output = eDP-1
;format = &lt;ramp&gt;&lt;label&gt;
;label = %percentage%%
;label-foreground = #3EC13F
;format-padding = 1
;ramp-0 = 🌕
;ramp-1 = 🌔
;ramp-2 = 🌓
;ramp-3 = 🌒
;ramp-4 = 🌑
;enable-scroll = true
;scroll-up = exec light -A 5
;scroll-down = exec light -U 6
;

[module/pavolume]
type = custom/script
tail = true
label = %output%
label-foreground = #D1FF00
exec = ~/.config/polybar/scripts/pavolume.sh --listen
click-right = exec pavucontrol
scroll-up = ~/.config/polybar/scripts/pavolume.sh --up
scroll-down = ~/.config/polybar/scripts/pavolume.sh --down
format-underline = #3EC13F
format-foreground = ${colors.foreground}
format-background = ${colors.background}


[module/xworkspaces]
type = internal/xworkspaces
pin-workspaces = true
; Create click handler used to focus desktop
enable-click = true
index-sort = true
wrapping-scroll = false
#ws-num = 9
icon-0 = code;♚
icon-1 = office;♛
icon-2 = graphics;♜
icon-3 = mail;♝
icon-4 = web;♞
icon-default = ♟
show-all = true
label-empty-foreground =  ${colors.foreground-alt}
#label-empty = %icon%
label-mode-padding = 3
label-mode-foreground = ${colors.background}
label-mode-background = #a8df5a
label-focused = %icon%
label-focused-background = ${module/bspwm.label-focused-background}
label-focused-underline = ${module/bspwm.label-focused-underline}
label-focused-padding = ${module/bspwm.label-focused-padding}
label-unfocused = %icon%
label-unfocused-padding = ${module/bspwm.label-occupied-padding}
; visible = Active workspace on unfocused monitor
label-visible = %icon%
label-visible-background = ${self.label-focused-background}
label-visible-underline = ${self.label-focused-underline}
label-visible-padding = ${self.label-focused-padding}
; urgent = Workspace with urgency hint set
label-urgent-foreground = ${xrdb:polybar*color8}
label-urgent-background = ${module/bspwm.label-urgent-background}
label-urgent-padding = ${module/bspwm.label-urgent-padding}
; Create scroll handlers used to cycle desktops
enable-scroll = true
label-monitor = %name%
format = &lt;label-state&gt;
label-active = %icon% %name%
label-active-foreground = #ffffff
#label-active-background = #3f3f3f
label-active-underline = #fba922
label-occupied = %icon%
label-occupied-underline = #555555
label-urgent = %icon%
#label-empty = %icon%
#label-empty-foreground = #55



[module/wlan]
type = internal/network
interface = wlp3s0
#interval = 3.0
tail = true
format-connected = &lt;ramp-signal&gt; &lt;label-connected&gt;
format-connected-underline = #9f78e1
label-connected =  %essid%%{A}
label-connected-foreground = ${xrdb:polybar.color16}
label-disconnected = 
format-disconnected = &lt;label-disconnected&gt;
ramp-signal-0 = 
ramp-signal-1 = 
ramp-signal-2 = 
ramp-signal-3 = 
ramp-signal-4 = 
;ramp-signal-0 = 😱
;ramp-signal-1 = 😠
;ramp-signal-2 = 😒
;ramp-signal-3 = 😊
;ramp-signal-4 = 😃
;ramp-signal-5 = 😈

;label-connected = %essid%
;format-disconnected = &lt;label-disconnected&gt;
;label-disconnected =   Disconnected
label-disconnected-foreground = ${colors.foreground-alt}
format-packetloss = &lt;animation-packetloss&gt; &lt;label-connected&gt;
animation-packetloss-0 = ⚠
animation-packetloss-0-foreground = #ffa64c
animation-packetloss-1 = 📶
animation-packetloss-1-foreground = #000000
; Framerate in milliseconds
animation-packetloss-framerate = 500
label-packetloss = %essid%
label-packetloss-foreground = #eefafafa
;ramp-signal-0 =  
;ramp-signal-1 =  
;ramp-signal-2 =  
;ramp-signal-3 =  
;ramp-signal-4 =  
;ramp-signal-5 =  

ramp-signal-foreground = ${colors.foreground-alt}


[module/xbacklight]
type = internal/xbacklight
format = &lt;label&gt; &lt;bar&gt;
bar-width = 10
bar-indicator =  
bar-indicator-foreground = #fff
bar-empty = 
bar-fill = 
format-prefix = &quot; &quot;
label-foreground = #3EC13F
format-padding = 1


[module/cpu]
type = internal/cpu
interval = 2
format-prefix = &quot;cpu &quot;
format-prefix-foreground = ${xrdb:polybar.color3}
format-underline = #f90000
label = %percentage%%
label-foreground = ${xrdb:polybar.color16}


[module/memory]
type = internal/memory
interval = 2
format-prefix = &quot;mem &quot;
format-prefix-foreground = ${xrdb:polybar.color2}
format-underline = #4bffdc
label = %percentage_used%%
label-foreground = ${xrdb:polybar.color12}


[module/date]
type = internal/date
interval = 1
date = &quot; %a %d %b -&quot;
date-alt = &quot; %d %b -&quot;
time = %H:%M
time-alt = %H:%M:%S
format-prefix = &quot; &quot;
;format-prefix = &quot;🕓&quot;
format-prefix-foreground = ${xrdb:polybar*color5}
format-underline = #0a6cf5
;label = %date% %time%
label = %time%
label-foreground = #9A32DB

[module/time]
type = custom/script
exec = ~/.config/polybar/scripts/time.py
format-prefix = &quot; &quot;
format-prefix-foreground = ${xrdb:polybar*color4}
format-underline = #0a6cf5

[module/battery]
type = internal/battery
battery = BAT0
adapter = AC0
full-at = 100
poll-interval = 5
time-format = %H:%M
format-charging = &lt;animation-charging&gt; &lt;label-charging&gt;
format-charging-underline = #ffb52a
label-charging =  %percentage%% %time%
label-charging-foreground = ${xrdb:polybar.color9}
format-discharging = &lt;ramp-capacity&gt; &lt;label-discharging&gt;
format-discharging-underline = ${self.format-charging-underline}
label-discharging = %percentage%% %time%
label-discharging-foreground = ${xrdb:polybar.color9}
format-full = &lt;ramp-capacity&gt; &lt;label-full&gt;
format-full-prefix = &quot; &quot;
format-full-prefix-foreground = ${xrdb:polybar.color1}
format-full-underline = ${self.format-charging-underline}
;label-full = %percentage%% - fully charged!
ramp-capacity-0 = &quot; &quot;
ramp-capacity-1 = &quot; &quot;
ramp-capacity-2 = &quot; &quot;
ramp-capacity-3 = &quot; &quot;
ramp-capacity-4 = &quot; &quot;
ramp-capacity-foreground = ${colors.foreground-alt}
animation-charging-0 = &quot;  &quot;
animation-charging-1 = &quot;  &quot;
animation-charging-2 = &quot;  &quot;
animation-charging-3 = &quot;  &quot;
animation-charging-4 = &quot;  &quot;
animation-charging-foreground = ${colors.foreground}
animation-charging-framerate = 750

[module/battery2]
type = internal/battery
battery = BAT0
adapter = AC
full-at = 95

format-charging = &quot;&lt;animation-charging&gt;&lt;label-charging&gt;&quot;
;format-charging-underline = ${colors.foreground}
label-charging = %percentage%% - time left %time%
label-charging-foreground = ${colors.foreground}
label-charging-background = ${colors.background}

format-discharging = &quot;&lt;ramp-capacity&gt;&lt;label-discharging&gt;&quot;
;format-discharging-underline = ${self.format-charging-underline}
label-discharging = %percentage%% - time left %time%
label-discharging-foreground = ${colors.foreground}
label-discharging-background = ${colors.background}

format-full-prefix = &quot;  &quot;
format-full-prefix-foreground = ${colors.foreground}
format-full-prefix-background = ${colors.background}
;format-full-underline = ${self.format-charging-underline}

ramp-capacity-0 = &quot;  &quot;
ramp-capacity-0-foreground = ${colors.alert}
ramp-capacity-1 = &quot;  &quot;
ramp-capacity-2 = &quot;  &quot;
ramp-capacity-3 = &quot;  &quot;
ramp-capacity-foreground = ${colors.foreground}
ramp-capacity-background = ${colors.background}

animation-charging-0 = &quot;  &quot;
animation-charging-1 = &quot;  &quot;
animation-charging-2 = &quot;  &quot;
animation-charging-3 = &quot;  &quot;
animation-charging-foreground = ${colors.foreground}
animation-charging-background = ${colors.background}
animation-charging-framerate = 750


[module/mpd]
type = internal/mpd
format-online = &quot;&lt;label-song&gt; &lt;label-time&gt; &lt;icon-prev&gt; &lt;icon-stop&gt; &lt;toggle&gt; &lt;icon-next&gt;&quot;
format-underline = #FF00DB
format-prefix-foreground = #00A5FF
icon-prev = 
icon-stop = 
icon-play-prefix = #f00
icon-play = 
icon-pause = 
icon-next = 
label-song = %title%
label-song-foreground = #00A5FF
label-song-maxlen = 40
label-song-ellipsis = true
bar-progress-width = 10
bar-progress-indicator = 
bar-progress-fill = 
bar-progress-empty = 
bar-progress-fill-foreground = #ff0
bar-progress-fill-background = ${colors.background}
bar-progress-indicator-foreground = ${colors.foreground}
;format-online-foreground = ${colors.foreground}
;format-online-background = ${colors.background}
label-time-foreground = #ff0

[module/gmail]
type = custom/script
#exec = python3 ~/.config/polybar/gmail/run.py 2&gt;/dev/null
#exec = ping -c 1 google.com 2&amp;&gt;/dev/null &amp;&amp; python3 ~/.config/polybar/gmail/run.py || echo 'no network'
exec = ~/bin/gmailScript4Polybar 
tail = true
click-right= /usr/bin/google-chrome-stable https://mail.google.com
click-left= urxvtc -e mutg
;format-background = #00A5FF
;format-underline = #FF00DB

[module/abdullah]
type = custom/script
exec = python3 ~/.config/polybar/abdullah/inbox.py 
tail = true
interval = 60
click-right= google-chrome https://mail.google.com
click-left= urxvtc -e mutt -F ~/.config/mutt/muttrc
;format-background = #00A5FF
;format-underline = #FF00DB

[module/mail]
type = custom/script
#exec = python3 ~/.config/polybar/theak/myinbox.py 2&gt;/dev/null
#exec = python3 ~/.config/polybar/theak/networktheak.py
tail = true
#exec = &quot;if ping -c 1 google.com &amp;&gt; /dev/null \
#then python3 ~/.config/polybar/theak/myinbox.py \
#else \
#  echo &quot;no network&quot;
#  fi&quot;
#exec = &quot;ping -c 1 theak.me \&amp;&gt; /dev/null &amp;&amp; python3 ~/.config/polybar/theak/myinbox.py || echo &quot;
exec = ping -c 1 theak.me \&amp;&gt; /dev/null \&amp;&amp; python3 ~/.config/polybar/theak/myinbox.py || echo 'no network'
#click-right= qutebrowser https://mail.theak.me
click-left= urxvtc -e mutt 
#format-background = #00A5FF
format-underline = #FF00DB


[module/music]
type = custom/script
exec = mpc current | skroll -l
tail = true


[module/mpd1]
type = custom/script
exec = ~/.config/polybar/scripts/mpd.sh
tail = true
format-foreground = ${colors.foreground}
format-underline = #FF00DB
format-prefix-foreground = #00A5FF
format-background = ${colors.background}
click-left = exec smus
click-right = mpc pause &amp; pkill -F /tmp/smus.pid


[module/bluetooth]
type = custom/script
exec = ~/.config/polybar/scripts/isactive-bluetooth.sh
tail = true
;format-foreground = ${colors.foreground}
format-underline = #FF00DB
format-background = ${colors.background}
format-prefix = &quot;&quot;


[module/menu]
type = custom/menu
label-open = 
label-open-foreground = ${colors.secondary}
label-close =  cancel
label-close-foreground = ${xrdb:polybar*color9}
label-separator = |
label-separator-foreground = ${colors.foreground-alt}
format-spacing = 1
;label-open = &quot;  &quot;
;label-open-foreground = ${colors.foreground}
;label-close = &quot;  &quot;
;label-close-foreground = ${colors.foreground}
;label-separator = &quot;│&quot;
;label-separator-foreground = ${colors.foreground-alt}
menu-0-0 = Top
menu-0-0-exec = menu-open-1
menu-0-1 = Extra
menu-0-1-exec = menu-open-2
menu-0-2 = Music
menu-0-2-exec = menu-open-3
menu-0-3 = Power
menu-0-3-exec = menu-open-4
menu-1-0 = &quot;  &quot;
menu-1-0-exec = qutebrowser
menu-1-1 = &quot;  &quot;
menu-1-1-exec = urxvt
menu-1-2 = &quot;  &quot;
menu-1-2-exec = urxvtc -e ranger
menu-1-3 = &quot;  &quot;
menu-1-3-exec = subl3
menu-2-0 = &quot;  &quot;
menu-2-0-exec = gimp-2.8
menu-2-1 = &quot;  &quot;
menu-2-1-exec = spotify --force-device-scale-factor=1.5
menu-2-2 = &quot;  &quot;
menu-2-2-exec = deluge
menu-2-3 = &quot;  &quot;
menu-2-3-exec = claws-mail
menu-2-4 = &quot;  &quot;
menu-2-4-exec = steam-runtime
menu-2-5 = &quot;  &quot;
menu-2-5-exec = scrot %F-%S_$wx$h_scrot.png -e 'mv $f /tmp/foo.png'
menu-3-0 = &quot;  &quot;
menu-3-0-exec = $HOME/bin/smus
menu-3-1 = &quot;  &quot;
menu-3-1-exec = mpc prev
menu-3-2 = &quot;  &quot;
menu-3-2-exec = mpc stop 
menu-3-3 = &quot;  &quot;
menu-3-3-exec = mpc pause 
menu-3-4 = &quot;  &quot;
menu-3-4-exec = mpc next
menu-4-0 = &quot;  &quot;
menu-4-0-exec = lock
menu-4-1 = &quot;  &quot;
menu-4-1-exec = systemctl reboot
menu-4-2 = &quot;  &quot;
menu-4-2-exec = systemctl poweroff


[module/arch_backlight]
type = custom/script
exec = ~/.config/polybar/scripts/backlight.sh
tail = true
scroll-up = exec light -A 5
scroll-down = exec light -U 5
format-prefix = &quot; &quot;
label = %output%%
label-foreground = #3EC13F
format-padding = 1

[module/backlight]
type = internal/backlight
card = intel_backlight
exec = light | cut -d . -f1
format = &lt;label&gt;
;tail = true
;interval = 0.2
label = %percentage%%
enable-scroll = true
scroll-up = exec /usr/sbin/light -A 5
scroll-down = exec /usr/sbin/light -U 5
format-prefix = &quot; &quot;
;label = %output%%
label-foreground = #3EC13F
format-padding = 1



[module/mpd-new]
type = internal/mpd
format-online = &lt;label-song&gt; &lt;icon-prev&gt; &lt;toggle&gt; &lt;icon-next&gt; &lt;icon-random&gt;  &lt;icon-repeat&gt; &lt;label-time&gt; 
format-offline = &lt;label-offline&gt;
label-offline =  no music
icon-prev = 
icon-stop = o
icon-play = 
icon-pause = 
icon-next = 
icon-seekf = &gt;&gt;
icon-random = 
icon-repeat = 
label-song = 𝄞 %title% - %artist% 
label-song-maxlen = 25
label-song-ellipsis = true
toggle-on-foreground = #e60053
toggle-off-foreground = #66


[module/pulseaudio]
type = internal/pulseaudio
sink = alsa_output.pci-0000_00_1b.0.analog-stereo
use-ui-max = true
format-volume = &lt;ramp-volume&gt;&lt;label-volume&gt; 
label-volume =  %percentage%%
label-volume-foreground = ${xrdb:polybar.color13}
label-muted = 🔇 
label-muted-foreground = #
label-active-font = 4
bar-volume-width = 10
bar-volume-foreground-0 = #55aa55
bar-volume-foreground-1 = #55aa55
bar-volume-foreground-2 = #55aa55
bar-volume-foreground-3 = #55aa55
bar-volume-foreground-4 = #55aa55
bar-volume-foreground-5 = #f5a70a
bar-volume-foreground-6 = #ff5555
bar-volume-gradient = true
bar-volume-indicator = 
bar-volume-indicator-font = 2
bar-volume-fill = 
bar-volume-fill-font = 2
bar-volume-empty = 
bar-volume-empty-font = 2
bar-volume-empty-foreground = ${colors.foreground-alt}
ramp-volume-0 = 🔈
ramp-volume-1 = 🔉
ramp-volume-2 = 🔊

[module/mic]
type = internal/pulseaudio
sink = alsa_input.pci-0000_00_1b.0.analog-stereo
format-volume = &lt;label-volume&gt; &lt;bar-volume&gt;
label-volume =  %percentage%%
label-volume-foreground = ${root.foreground}
label-muted = 🔇 muted
label-muted-foreground = #666
bar-volume-width = 10
bar-volume-foreground-0 = #55aa55
bar-volume-foreground-1 = #55aa55
bar-volume-foreground-2 = #55aa55
bar-volume-foreground-3 = #55aa55
bar-volume-foreground-4 = #55aa55
bar-volume-foreground-5 = #f5a70a
bar-volume-foreground-6 = #ff5555
bar-volume-gradient = false
bar-volume-indicator = 
bar-volume-indicator-font = 2
bar-volume-fill = 
bar-volume-fill-font = 2
bar-volume-empty = 
bar-volume-empty-font = 2
bar-volume-empty-foreground = ${colors.foreground-alt}


[module/tags]
type = internal/xworkspaces
label-active = %name%
label-active-padding = 2
label-active-background = ${colors.background}
label-active-foreground = ${colors.foreground}
label-occupied = %name%
label-occupied-background = #ff0000
label-empty = %name%
label-empty-padding = 2
label-urgent = %name%
label-urgent-padding = 2
label-urgent-background = ${colors.background}
label-urgent-foreground = ${colors.foreground}


[module/temperature]
type = internal/temperature
interval = 3
thermal-zone = 0
warn-temperature = 70
format = &lt;ramp&gt;&lt;label&gt;
format-padding = 1
;label = %{A1:termite --exec='watch sensors' &amp; disown:} %temperature%%{A}
label-foreground = ${xrdb:polybar.color11}
ramp-0 = &quot;&quot;
ramp-0-foreground = ${xrdb:polybar*color4}
ramp-1 = &quot;&quot;
ramp-1-foreground = ${xrdb:polybar*color16}
ramp-2 = &quot;&quot;
ramp-2-foreground = ${xrdb:polybar*color17}
ramp-3 = &quot;&quot;
ramp-3-foreground = ${xrdb:polybar*urgent}
format-warn = &lt;label-warn&gt;
label-warn = &quot; %temperature-c%&quot;
label-warn-padding = 1
label-warn-foreground = ${xrdb:polybar.urgent}


[module/window_switch]
type = custom/script
interval = 5
label = &quot;%{A1:skippy-xd:} %{A3:skippy-xd:} %output% %{A} %{A}&quot;
exec = echo &quot;&quot;
format = &lt;label&gt;

[module/hijri]
type = custom/script
#exec = &quot;python -c 'from ummalqura.hijri_date import HijriDate; from datetime import date; print(HijriDate.get_hijri_date(date.today()))'&quot;
exec = ~/.config/polybar/scripts/hijri.py
tail = false
interval = 180
label-foreground = ${xrdb:polybar.color5}


[bar/dwm]
inherit = settings
background = ${colors.background}
foreground = ${colors.foreground}
override-redirect = true
;width = 55%
;height = 26
;offset-x = 45%
modules-left = date wlan memory cpu pulseaudio backlight-acpi battery 
modules-right = mpd-new
modules-center = window_switch
font-0 =  Segoe UI Emoji
font-1 = DejaVu Sans:pixelsize=11
bottom = true
width = 100%
height = 20
;offset-x = 1%
offset-y = -1
radius = 0
fixed-center = true
line-size = 0
line-color = #f00
border-size = 0
border-color = #00000000
padding-left = 0
padding-right = 1
module-margin-left = 2
module-margin-right = 2


[bar/HDMI-2]
inherit = bar/eDP-1
monitor = HDMI-2



[bar/XWAYLAND0]
inherit = bar/eDP-1
monitor = XWAYLAND0

; vim:ft=dosini

</code></pre><h1 id="bspwm">BSPWM</h1>
<p>bspwm is a tiling window manager, it uses <code>sxhkd</code> for keybindings and windows
management keybindings. Here is both configurations for both programs. You can use <code>xbindkeys</code> there&hellip;</p>
<pre><code>$ cat $HOME/.config/bspwm/bspwrc

#! /bin/sh

sxhkd &amp;
xsetroot -cursor_name left_ptr
$HOME/.config/bspwm/autostart.sh &amp;

bspc monitor -d I II III IV V VI VII VIII IX X

bspc config border_width         2
bspc config window_gap           7
bspc config split_ratio          0.52
bspc config borderless_monocle   true
bspc config gapless_monocle      true
bspc config top_padding	       	 0
bspc config split_ratio          0.50
bspc config borderless_monocle   true
bspc config gapless_monocle      true
bspc config focus_follows_pointer true
bspc config click_to_focus        true
bspc config focus_by_distance     true
bspc config history_aware_focus   true
bspc config single_monocle        false
bspc config normal_border_color   &quot;#4c566a&quot;
bspc config focused_border_color  &quot;#5e81ac&quot;
bspc config presel_feedback_color &quot;#5e81ac&quot;

bspc rule -a Sxiv state=floating follow=on
bspc rule -a Chromium desktop='^2'
bspc rule -a Kupfer.py focus=on
bspc rule -a Screenkey manage=off
#bspc rule -a URxvt follow=on focus=on
bspc rule -a feh state=floating follow=on
bspc rule -a Gpicview state=floating follow=on
bspc rule -a Pavucontrol state=floating follow=on
bspc rule -a mpv state=floating sticky=on
bspc rule -a feh state=floating
bspc rule -a Nitrogen state=floating
bspc rule -a Arandr state=floating
bspc rule -a Galculator state=floating
bspc rule -a Font-manager state=floating
bspc rule -a Oblogout state=floating
#bspc rule -a Peek state=floating
#bspc rule -a Skype state=floating
#bspc rule -a Pavucontrol state=floating sticky=on
#bspc rule -a Xfce4-appfinder  state=floating sticky=on
#bspc rule -a Gpick state=floating sticky=on


# Colors
bspc config focused_border_color &quot;#d8dee8&quot;
bspc config normal_border_color &quot;#2f343f&quot;

# Scratchpad 
bspc rule title=scratchpad class=scratchpad sticky=on state=floating hidden=on
urxvtc -name scratchpad -geometry 75x20 &amp;
</code></pre><h2 id="sxhkd">SXHKD</h2>
<pre><code>cat $HOME/.config/sxhkd/sxhkdrc

#!/bin/sh

# Reload functions
#super + Escape
#	&quot;$XDG_CONFIG_HOME&quot;/sxhkd/functions

# Reload sxhkd
super + Escape
  pkill -USR1 -x sxhkd

# Exit bspwm
super + shift + q
  bspc quit

# Alternate between the tiled and monocle layout
super + t
	bspc desktop -l next

# Swap the current node and the biggest node
super + g
	bspc node -s biggest

# Kill a window
super + q
  bspc node -c

# Scratchpad
super + i
  ~/.local/bin/scratchtoggle

super + Return
  urxvtc

Alt + Return
  termite

super + d
  dmenu_run

super + {h,j,k,l}
	bspc node -f {west,south,north,east}

super + w
  $BROWSER

super + alt + {0-9}
	mpc -q seek {0-9}0%

super + {_,alt + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east}

#XF86Audio{RaiseVolume,LowerVolume,Mute}
#	amixer {-q set Master 5%+,-q set Master 5%-,set Master toggle}

# set the window state
super + {t,shift + t,s,f}
	bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# set the node flags
super + ctrl + {m,x,y,z}
	bspc node -g {marked,locked,sticky,private}

# Music
XF86LaunchA
  mpc toggle

#
# focus/swap
#

# focus the node in the given direction
#super + {_,shift + }{h,j,k,l}
#	bspc node -{f,s} {west,south,north,east}

# focus the node for the given path jump
super + {p,b,comma,period}
	bspc node -f @{parent,brother,first,second}

# focus the next/previous node in the current desktop
super + {_,shift + }c
	bspc node -f {next,prev}.local

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
	bspc desktop -f {prev,next}.local

# focus the last node/desktop
super + {Tab,semicolon}
	bspc {node,desktop} -f next

# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# focus or send to the given desktop
super + {_,shift + }{1-9,0}
	bspc {desktop -f,node -d} '^{1-9,10}'

#
# preselect
#

# preselect the direction
super + ctrl + {h,j,k,l}
	bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + ctrl + space
	bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

# expand a window by moving one of its side outward
super + shift + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + alt + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-20 0,0 20,0 -20,20 0}





############################################################################ 
#                                        ▗▄▖       ▗▖                      # 
#                                        ▝▜▌       ▐▌                      # 
#     ▐▙█▙  ▟█▙  █▟█▌▗▟██▖ ▟█▙ ▐▙██▖ ▟██▖ ▐▌       ▐▌▟▛  ▟█▙ ▝█ █▌▗▟██▖    # 
#     ▐▛ ▜▌▐▙▄▟▌ █▘  ▐▙▄▖▘▐▛ ▜▌▐▛ ▐▌ ▘▄▟▌ ▐▌       ▐▙█  ▐▙▄▟▌ █▖█ ▐▙▄▖▘    # 
#     ▐▌ ▐▌▐▛▀▀▘ █    ▀▀█▖▐▌ ▐▌▐▌ ▐▌▗█▀▜▌ ▐▌       ▐▛█▖ ▐▛▀▀▘ ▐█▛  ▀▀█▖    # 
#     ▐█▄█▘▝█▄▄▌ █   ▐▄▄▟▌▝█▄█▘▐▌ ▐▌▐▙▄█▌ ▐▙▄      ▐▌▝▙ ▝█▄▄▌  █▌ ▐▄▄▟▌    # 
#     ▐▌▀▘  ▝▀▀  ▀    ▀▀▀  ▝▀▘ ▝▘ ▝▘ ▀▀▝▘  ▀▀      ▝▘ ▀▘ ▝▀▀   █   ▀▀▀     # 
#     ▐▌                                                      █▌           # 
############################################################################ 

# Brightness keys
XF86MonBrightnessDown
  xbacklight -5

XF86MonBrightnessUp
  xbacklight +5

# Raise Volume
XF86AudioRaiseVolume
        amixer set Master 10%+


# Lower Volume
XF86AudioLowerVolume
        amixer set Master 10%-

# Mute 
XF86AudioMute
        amixer -D pulse set Master 1+ toggle

# Screenshot
Print
    import -window root /tmp/foo.png; cat /tmp/foo.png | xclip -selection clipboard -t image/png

# File Manager
XF86Explorer
    urxvtc -e ranger

## Mouse buttons
#super + button{1-3}
#   bspc pointer -g {move,resize_side,resize_corner}
#
#super + !button{1-3}
#   bspc pointer -t %i %i
#
#super + @button{1-3}
#   bspc pointer -u
#

# Music little backward/forward
alt + bracket{left,right}
  mpc seek {-10,+10}

# Music backward/forward
alt + shift + bracket{left,right}
  mpc seek {-120,+120}
 
# Lock the screen
super + x
  slock

# vim:ft=sxhkdrc
</code></pre><p>I hope you will get a working desktop experience with these configurations. It&rsquo;s easy to manipulate them to your needs.</p>
]]></content>
        </item>
        
        <item>
            <title>How to use vIM as IDE in Debian, Ubuntu, Mint</title>
            <link>https://abdullah.today/vim-as-ide/</link>
            <pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/vim-as-ide/</guid>
            <description>Been using source based distributions for a long time. Source based distributions are cool for systems with limited resources. But what if you don&amp;rsquo;t have enough time?
Debian is one of the oldest distribution there which is known for stability. Stability? Well that never had been a priority for me but for some reasons I came to it and now using it for some months. It&amp;rsquo;s a cool distribution.
Well, that enough said, let&amp;rsquo;s come to the topic.</description>
            <content type="html"><![CDATA[<p>Been using source based distributions for a long time. Source based distributions are cool for systems with limited resources. But what if you don&rsquo;t have enough time?</p>
<p>Debian is one of the oldest distribution there which is known for
stability. Stability? Well that never had been a priority for me but
for some reasons I came to it and now using it for some months. It&rsquo;s
a cool distribution.</p>
<p>Well, that enough said, let&rsquo;s come to the topic. vIM has been my
editor since I started using Linux. There are many other text
editors like nano but I never been interested in them. To be honest
still I only know how to exit from nano when a command is run by me
and nano was the default editor there.</p>
<p>I have been maintaining my
<a href="https://gitlab.com/Abdullah/cfg.git">dotfiles</a> no matter which distribution I was using. But still I had to compile things for vIM and other cool software I use in my daily routine.</p>
<p>I was looking for some tool using <!-- raw HTML omitted --> apt search <!-- raw HTML omitted --> and found
<!-- raw HTML omitted --> vim-youcompleteme <!-- raw HTML omitted --> in search results. Which leaded me to
install it. I installed it and it also installed its dependencies.
In other distros I had been using before I manually had to compile
vIM and YouCompleteMe plugin. So here is the process you can follow
to have vIM with your plugins.</p>
<h3 id="installing-vim">Installing vIM</h3>
<p>Debian is a decent distribution. It has many flavours of
packages. If you don&rsquo;t want some extra features for some package,
you can have lightweight one. Others can have it how they want it to
be. Debian vIM is a light package. If you wanna use YouCompleteMe
vIM plugin, you must install vIM with extra features compiled. But
don&rsquo;t worry, Debian has it. Assuming you want vIM as your default
editor, these commands will install vIM, remove vIM with less
features and make it default editor.</p>
<p>Remove vIM if you have it.</p>
<pre><code>$ sudo apt remove vim vim-runtime gvim vim-tiny vim-common vim-gui-common vim-tiny vim-common vim-gui-common 
</code></pre><p>Install vIM.</p>
<pre><code>$ sudo apt install vim-nox
</code></pre><p>Install <em>Addon Manager</em>. You can use plugins without a plugin manager too but it really makes your life easier.</p>
<pre><code>$ sudo apt install vim-addon-manager vim-youcompleteme
</code></pre><p>Make vIM your default editor.</p>
<pre><code>$ sudo update-alternatives --set editor /usr/bin/vim.nox
$ sudo update-alternatives --install /usr/bin/vi vi /usr/bin/vim.nox 1
$ sudo update-alternatives --set vi /usr/bin/vim.nox
</code></pre><h3 id="configure-vim">Configure vIM</h3>
<p>After everything is installed, now you can configure vIM to use these plugins. For example, I use <!-- raw HTML omitted -->vim-youcompleteme<!-- raw HTML omitted -->.</p>
<pre><code>$ vam install youcompleteme
</code></pre><p>That&rsquo;s it. You can always have a look at my
<a href="https://gitlab.com/Abdullah/cfg.git">dotfiles</a>
if have some issues. Enjoy using vIM.</p>
]]></content>
        </item>
        
        <item>
            <title>Things to do after a new Debian installation</title>
            <link>https://abdullah.today/debian-fresh-install/</link>
            <pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/debian-fresh-install/</guid>
            <description>So you have a new Debian installation? Maybe a minimal install like I do? Don&amp;rsquo;t worry, I have you covered what to do next.
Setup a sudo user without password Go here.
Install software Install software for daily use.
$ sudo apt install build-essential \ git zsh mpv feh xss-lock urlview \ xbindkeys stow offlineimap mutt msmtp \ notmuch vim.nox rxvt-unicode -y Setup touchpad If you have a machine that supports multitouch, enabling tap to click is a good option.</description>
            <content type="html"><![CDATA[<p>So you have a new Debian installation? Maybe a minimal install like I do?
Don&rsquo;t worry, I have you covered what to do next.</p>
<h2 id="setup-a-sudo-user-without-password">Setup a sudo user without password</h2>
<p>Go <a href="https://abdullah.today/enable-sudo-with-no-password.html">here</a>.</p>
<h2 id="install-software">Install software</h2>
<p>Install software for daily use.</p>
<pre><code>$ sudo apt install build-essential \
 git zsh mpv feh xss-lock urlview \
 xbindkeys stow offlineimap mutt msmtp \
 notmuch vim.nox rxvt-unicode -y 
</code></pre><h2 id="setup-touchpad">Setup touchpad</h2>
<p>If you have a machine that supports multitouch, enabling tap to click is a good option. Create directories if they don&rsquo;t have already created.</p>
<pre><code>$ sudo mkdir -p /etc/X11/xorg.conf.d
</code></pre><p>Create a file here as 20-libinput.conf. Mine looks like:</p>
<pre><code>$ cat /etc/X11/xorg.conf.d/20-libinput.conf

Section &quot;InputClass&quot;
	Identifier &quot;libinput touchpad catchall&quot;
  MatchIsTouchpad &quot;on&quot;
  Driver &quot;libinput&quot;
  MatchDevicePath &quot;/dev/input/event*&quot;
  Option &quot;Tapping&quot; &quot;on&quot;
  Option &quot;TappingButtonMap&quot; &quot;lrm&quot;
  Option &quot;NaturalScrolling&quot; &quot;true&quot;
EndSection
</code></pre><h2 id="brightness-keys">Brightness Keys</h2>
<p>On some hardware, brightness keys don&rsquo;t work out of the box. So create a file
<!-- raw HTML omitted -->30-backlight.conf<!-- raw HTML omitted --> in the same directory as you did in touchpad file.</p>
<pre><code>$ cat /etc/X11/xorg.conf.d/30-backlight.conf 

Section &quot;Device&quot;
	Identifier &quot;card0&quot;
	Driver	   &quot;intel&quot;
	Option	   &quot;Backlight&quot; &quot;intel_backlight&quot;
	BusID      &quot;PCI:0:2:0&quot;
EndSection
</code></pre><h2 id="automatically-lock-screen-on-resume-from-suspension">Automatically lock screen on resume from suspension</h2>
<p>systemd-logind automatically suspends the laptop if lid is closed. But you have
to create another unit file and enable it to lock the screen on resume from
suspension.</p>
<p>Create a file <!-- raw HTML omitted -->/etc/systemd/system/wakelock@.service<!-- raw HTML omitted --> with following
contents. Put your favorite locker application path in ExecStart if you don&rsquo;t
use slock.</p>
<pre><code>$ cat /etc/systemd/system/wakelock@.service

[Unit]
Description=Automatically lock the screen on resume from suspension
Before=sleep.target suspend.target

[Service]
User=%i
Environment=DISPLAY=:0
ExecStart=/usr/bin/slock

[Install]
WantedBy=sleep.target suspend.target
</code></pre><p>Reload the systemd daemon and enable/start it. Replace <!-- raw HTML omitted -->YOUR USERNAME<!-- raw HTML omitted --> with
your username.</p>
<pre><code>$ sudo systemctl daemon-reload
$ sudo systemctl enable wakelock@&lt;YOUR USERNAME&gt;.service
$ sudo systemctl start wakelock@&lt;YOUR USERNAME&gt;.service
</code></pre><p>That&rsquo;s it. I&rsquo;ll update this article for more things I remember or anytime I had
to reinstall and find something I had to do&hellip;</p>
]]></content>
        </item>
        
        <item>
            <title>URXVT - Terminal for Geeks</title>
            <link>https://abdullah.today/urxvt/</link>
            <pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/urxvt/</guid>
            <description>What&amp;rsquo;s URxvt? As a linux user, I spend most of my time in terminal emulators. There are alot of emulators available today but none can beat rxvt-unicode.
The biggest problem most new linux users face is how to configure it. Today I&amp;rsquo;ll explain how you can use it to your needs.
Most distributions package it with less features enabled. I always compile it from source. So let&amp;rsquo;s start and in the end you&amp;rsquo;ll end up with a perfect terminal emulator.</description>
            <content type="html"><![CDATA[<h4 id="whats-urxvt">What&rsquo;s URxvt?</h4>
<p>As a linux user, I spend most of my time in terminal emulators. There are alot of emulators available today but none can beat rxvt-unicode.</p>
<p>The biggest problem most new linux users face is how to configure it. Today I&rsquo;ll explain how you can use it to your needs.</p>
<p>Most distributions package it with less features enabled. I always compile it from source. So let&rsquo;s start and in the end you&rsquo;ll end up with a perfect terminal emulator.</p>
<p>Get the source and compile it.</p>
<pre><code>$ wget http://dist.schmorp.de/rxvt-unicode/Attic/rxvt-unicode-9.22.tar.bz2
$ tar xvf rxvt-unicode-9.22.tar.bz2
$ cd rxvt-unicode-9.22
$ ./configure --enable-everything --enable-256-color
$ make
# make install
</code></pre><p>&ndash;enable-everything will compile all things for us except 256 color support. So keep that in mind.</p>
<p>So now rxvt-unicode is installed, just execute it. You won&rsquo;t like it out of the box. We have to configure it.</p>
<h4 id="configuration">Configuration</h4>
<p>rxvt-unicode reads the configuration from two files, ~/.Xresources or ~/.Xdefaults. So here I&rsquo;m gonna put my ~/.Xdefaults, just copy it to your home directory as ~/.Xdefaults. You can always get the latest one <a href="https://gitlab.com/Abdullah/cfg/-/blob/master/etc/.Xresources">here</a>.</p>
<pre><code>$ cat ~/.Xresources

! In the name of Allah, the most Gracious, the most Merciful.
! 
!  ▓▓▓▓▓▓▓▓▓▓
! ░▓ Author ▓ Abdullah &lt;https://abdullah.today&gt;
! ░▓▓▓▓▓▓▓▓▓▓
! ░░░░░░░░░░
! 
! ░█░█░█▀▄░█▀▀░█▀▀░█▀█░█░█░█▀▄░█▀▀░█▀▀░█▀▀
! ░▄▀▄░█▀▄░█▀▀░▀▀█░█░█░█░█░█▀▄░█░░░█▀▀░▀▀█
! ░▀░▀░▀░▀░▀▀▀░▀▀▀░▀▀▀░▀▀▀░▀░▀░▀▀▀░▀▀▀░▀▀▀


! Colors

!black
*color0                    : #1C1C1C
*color8                    : #4d4d4d
!red
*color1                    : #D81860
*color9                    : #F00060
!green
*color2                    : #B7CE42
*color10                   : #BDE077
!yellow
*color3                    : #FEA63C
*color11                   : #FFE863
!blue
*color4                    : #66AABB
*color12                   : #AACCBB
!magenta
*color5                    : #B7416E
*color13                   : #BB4466
!cyan
*color6                    : #5E7175
*color14                   : #A3BABF
!white
*color7                    : #DDEEDD
*color15                   : #6C887A
*.foreground  : #fffaf4
*.background  : #0e1019
*.cursorColor : #ff0018

! URxvt 

! if remote host is having problems with rxvt-unicode, copy
! /usr/share/terminfo/r/rxvt-unicode at hosts ~/.terminfo/r/rxvt-unicode

URxvt*font                 : xft:FantasqueSansMono Nerd Font:Italic:size=21,
xft:Fantasque Sans Mono:Italic:size=21, xft:DejaVu Sans Mono for
Powerline:size=21, xft:Segoe UI Emoji:size=21, xft:SimHei:size=21
URxvt*boldfont             : xft:Bitstream Vera Sans
Mono:Bold:size=17:antialias=true
URxvt*bolditalicfont       : xft:Bitstream Vera Sans
Mono:Bold:italic:size=17:antialias=true
URxvt*utf                  : 1
URxvt*locale               : 1
URxvt.imlocale             : en_US.UTF-8
URxvt*letterSpace          : 0
URxvt*termName             : rxvt-unicode-256color
URxvt*geometry             : 96x30
URxvt*background           : #1B2B34
URxvt*reverseVideo         : 0
URxvt*loginShell           : 0
URxvt*jumpScroll           : 1
URxvt*skipScroll           : 1
URxvt*pastableTabs         : 1
URxvt*scrollstyle          : plain
URxvt*scrollBar            : 0
URxvt*scrollBar_right      : 0
URxvt*scrollBar_floating   : 0
URxvt*scrollBar_align      : centre
URxvt*thickness            : 0
URxvt*scrollTtyOutput      : 0
URxvt*scrollTtyKeypress    : 1
URxvt*scrollWithBuffer     : 1
URxvt*inheritPixmap        : 0
URxvt*transparent          : 0
URxvt*tintColor            : #ffffff
URxvt*shading              : 145
URxvt*blurRadius           : 1x65
URxvt*fading               : 25
URxvt*fadeColor            : #008B8B
URxvt*utmpInhibit          : 1
URxvt*urgentOnBell         : 1
URxvt*visualBell           : 0
URxvt*mapAlert             : 0
URxvt*meta8                : 0
URxvt*mouseWheelScrollPage : 0
URxvt*tripleclickwords     : 0
URxvt*insecure             : 0
URxvt*cursorUnderline      : 1
URxvt*cursorBlink          : 0
URxvt*pointerBlank         : 1
URxvt*iconFile             :
/usr/share/icons/Adwaita/16x16/apps/utilities-terminal-symbolic.symbolic.png
URxvt*pointerShape         : ul_angle
URxvt*intensityStyles      : 1
URxvt*saveLines            : 9999
URxvt*buffered             : 1
URxvt*depth                : 32
URxvt*visual               : 0x16f
URxvt*override-redirect    : 0
URxvt*externalBorder       : 15
URxvt*internalBorder       : 15
URxvt*borderLess           : 0
URxvt*lineSpace            : 0
URxvt*skipBuiltinGlyphs    : 0
URxvt*pointerBlankDelay    : 1
URxvt*print-pipe           : cat &gt;  /tmp/$(echo urxvt.dump.$(date
+'%Y%M%d%H%m%S'))
URxvt*modifier             :
URxvt*cutchars             : BACKSLASH &quot; &quot;
'&quot;'&amp;()*,;&lt;=&gt;?@[]^{|}\&quot;()*,&lt;&gt;[]{}|''&quot;\
URxvt*secondaryScreen      : 1
URxvt*secondaryScroll      : 0
URxvt*perl-lib             : /home/ak/.urxvt/ext
URxvt*iso14755             : 1
URxvt*iso14755_52          : 1
URxvt*matcher.button       : 2
URxvt*url-launcher         : /usr/bin/google-chrome-stable
URxvt*url-select.underline : 1
URxvt*matcher.rend.0       : Uline Bold fg5
URxvt*selection.pattern-0  : ([[                           : word
: ]]+)
URxvt*keysym.M-C-c         : selection                     : rot13
URxvt*perl-ext-common      : vim,default,matcher,font-size
URxvt*vim-scrollback       : M-s
URxvt*vim-scrollback-paste : M-p
URxvt*clipboard.copycmd    : xsel -ib
URxvt.keysym.C-Up:     font-size:increase
URxvt.keysym.C-Down:   font-size:decrease
URxvt.keysym.C-S-Up:   font-size:incglobal
URxvt.keysym.C-S-Down: font-size:decglobal


! Polybar

polybar*background             : #24292A
polybar*foreground             : #ccd2be
polybar*fading                 : 15
polybar*fadeColor              : black
polybar*cursorColor            : #16A085
polybar*pointerColorBackground : #2B2C2B
polybar*pointerColorForeground : #16A085
polybar*urgent                 : #B34747

! black dark/light
polybar*color0                 : #24292A
polybar*color8                 : #3c4140

! red dark/light
polybar*color1                 : #ff8843
polybar*color9                 : #c48851

! green dark/light
polybar*color2                 : #7a8d5c
polybar*color10                : #aec199

! yellow dark/light
polybar*color3                 : #a69658
polybar*color11                : #c4b268

! blue dark/light
polybar*color4                 : #7b90a9
polybar*color12                : #91aac7

! magenta dark/light
polybar*color5                 : #aa6161
polybar*color13                : #e78484

! cyan dark/light
polybar*color6                 : #698885
polybar*color14                : #83a5a1

! white dark/light
polybar*color7                 : #a8b298
polybar*color15                : #ccd2be

! pink
polybar*color16                : #9181E7

! purple
polybar*color17                : #D7AFF9


! XTERM

XTerm.vt100.faceName         :Fantasque Sans
Mono:italic:size=15:antialias=true
XTerm.vt100.boldFont         :Fantasque Sans Mono:bold:italic:size=15
xterm.scaleHeight           : 1.01
xterm*termName              : xterm-256color
xterm*geometry              : 96x30
xterm*reverseVideo          : 0
xterm*loginShell            : 1

! Dmenu

dmenu.selforeground:      #474c57
dmenu.background:         #ffffff
dmenu.selbackground:      #4ec2e8
dmenu.foreground:         #474c57

! rofi

rofi.color-enabled: true
rofi.color-window: #ffffff, #ffffff, #ffffff
rofi.color-normal: #ffffff, #474c57, #ffffff, #ffffff, #4ec2e8
rofi.color-active: #ffffff, #fec7cd, #ffffff, #ffffff, #95c1c0
rofi.color-urgent: #ffffff, #f59335, #ffffff, #ffffff, #f59335  

! Cursor

Xcursor.size                : 16

! Xautolock

Xautolock.locker            : &quot;/usr/bin/physlock -mp 'Aur tum apny Rab ki kon
kon c nematon ko jhutlawo gy?'&quot;


</code></pre><p>After saving the file, we have to load it.</p>
<pre><code>$ xrdb -load ~/.Xdefaults
</code></pre><p>Now execute it. You may not have the fonts I use so maybe you face some errors. Just install those fonts or change them.</p>
<p>I also have written a post about <a href="https://abdullah.today/fonts.html">fonts</a>.</p>
<p>Still have problems? Just lemme know and I&rsquo;ll be happy to assist you.</p>
]]></content>
        </item>
        
        <item>
            <title>How to install fonts in Linux</title>
            <link>https://abdullah.today/fonts/</link>
            <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/fonts/</guid>
            <description>I have been using different distributions in my machines. A term which is called in our linux community distrohopping. On different distributions/machines, it&amp;rsquo;s pain to collect packages you can&amp;rsquo;t live without. For me and maybe for you too, the fonts are the part of OS which at least I care about the most.
Fonts path Different linux distributions package fonts in with different names. So I decided to add the fonts to my dotfiles.</description>
            <content type="html"><![CDATA[<p>I have been using different distributions in my machines. A term which is called in our linux community <!-- raw HTML omitted -->distrohopping<!-- raw HTML omitted -->.
On different distributions/machines, it&rsquo;s pain to collect packages you can&rsquo;t live without. For me and maybe for you too, the fonts are the part of OS which at least I care about the most.</p>
<h2 id="fonts-path">Fonts path</h2>
<p>Different linux distributions package fonts in with different names. So I decided to add the fonts to my dotfiles. And yeah now I&rsquo;m happy. On any new machine/installation, I don&rsquo;t need to install those fonts.</p>
<p>Here is the path I have added the fonts which almost all distributions accept today. And it&rsquo;s easy to maintain them too.</p>
<pre><code>$ ls ~/.local/share/fonts
 awesome                                  Tamzen7x13b.pt3
 brands                                   Tamzen7x13b.ttf
 DejaVuMathTeXGyre.ttf                    Tamzen7x13r-13.fnt
 DejaVuSans-BoldOblique.ttf               Tamzen7x13r.afm
 DejaVuSans-Bold.ttf                      Tamzen7x13r.bdf
 DejaVuSansCondensed-BoldOblique.ttf      Tamzen7x13r.dfont
 DejaVuSansCondensed-Bold.ttf             Tamzen7x13r.pcf
 DejaVuSansCondensed-Oblique.ttf          Tamzen7x13r.png
 DejaVuSansCondensed.ttf                  Tamzen7x13r.pt3
 DejaVuSans-ExtraLight.ttf                Tamzen7x13r.ttf
 DejaVuSansMono-BoldOblique.ttf           Tamzen7x14b-14.fnt
 DejaVuSansMono-Bold.ttf                  Tamzen7x14b.afm
 DejaVuSansMono-Oblique.ttf               Tamzen7x14b.bdf
 DejaVuSansMono.ttf                       Tamzen7x14b.dfont
 DejaVuSans-Oblique.ttf                   Tamzen7x14b.pcf
 DejaVuSans.ttf                           Tamzen7x14b.png
 DejaVuSerif-BoldItalic.ttf               Tamzen7x14b.pt3
 DejaVuSerif-Bold.ttf                     Tamzen7x14b.ttf
 DejaVuSerifCondensed-BoldItalic.ttf      Tamzen7x14r-14.fnt
 DejaVuSerifCondensed-Bold.ttf            Tamzen7x14r.afm
 DejaVuSerifCondensed-Italic.ttf          Tamzen7x14r.bdf
 DejaVuSerifCondensed.ttf                 Tamzen7x14r.dfont
 DejaVuSerif-Italic.ttf                   Tamzen7x14r.pcf
 DejaVuSerif.ttf                          Tamzen7x14r.png
 devicons-regular.sh                      Tamzen7x14r.pt3
 devicons-regular.ttf                     Tamzen7x14r.ttf
 DroidSansFallbackFull.ttf                Tamzen8x15b-15.fnt
'Font Awesome 5 Brands-Regular-400.otf'   Tamzen8x15b.afm
'Font Awesome 5 Free-Regular-400.otf'     Tamzen8x15b.bdf
'Font Awesome 5 Free-Solid-900.otf'       Tamzen8x15b.dfont
 fontawesome-regular.sh                   Tamzen8x15b.pcf
 fontawesome-regular.ttf                  Tamzen8x15b.png
 fontawesome-webfont.ttf                  Tamzen8x15b.pt3
 fonts.dir                                Tamzen8x15b.ttf
 Lato-BlackItalic.ttf                     Tamzen8x15r-15.fnt
 Lato-Black.ttf                           Tamzen8x15r.afm
 Lato-BoldItalic.ttf                      Tamzen8x15r.bdf
 Lato-Bold.ttf                            Tamzen8x15r.dfont
 Lato-HairlineItalic.ttf                  Tamzen8x15r.pcf
 Lato-Hairline.ttf                        Tamzen8x15r.png
 Lato-HeavyItalic.ttf                     Tamzen8x15r.pt3
 Lato-Heavy.ttf                           Tamzen8x15r.ttf
 Lato-Italic.ttf                          Tamzen8x16b-16.fnt
 Lato-LightItalic.ttf                     Tamzen8x16b.afm
 Lato-Light.ttf                           Tamzen8x16b.bdf
 Lato-MediumItalic.ttf                    Tamzen8x16b.dfont
 Lato-Medium.ttf                          Tamzen8x16b.pcf
 Lato-Regular.ttf                         Tamzen8x16b.png
 Lato-SemiboldItalic.ttf                  Tamzen8x16b.pt3
 Lato-Semibold.ttf                        Tamzen8x16b.ttf
 Lato-ThinItalic.ttf                      Tamzen8x16r-16.fnt
 Lato-Thin.ttf                            Tamzen8x16r.afm
 LiberationMono-BoldItalic.ttf            Tamzen8x16r.bdf
 LiberationMono-Bold.ttf                  Tamzen8x16r.dfont
 LiberationMono-Italic.ttf                Tamzen8x16r.pcf
 LiberationMono-Regular.ttf               Tamzen8x16r.png
 LiberationSans-BoldItalic.ttf            Tamzen8x16r.pt3
 LiberationSans-Bold.ttf                  Tamzen8x16r.ttf
 LiberationSans-Italic.ttf                TamzenForPowerline10x20b-20.fnt
 LiberationSansNarrow-BoldItalic.ttf      TamzenForPowerline10x20b.afm
 LiberationSansNarrow-Bold.ttf            TamzenForPowerline10x20b.bdf
 LiberationSansNarrow-Italic.ttf          TamzenForPowerline10x20b.dfont
 LiberationSansNarrow-Regular.ttf         TamzenForPowerline10x20b.pcf
 LiberationSans-Regular.ttf               TamzenForPowerline10x20b.png
 LiberationSerif-BoldItalic.ttf           TamzenForPowerline10x20b.pt3
 LiberationSerif-Bold.ttf                 TamzenForPowerline10x20r-20.fnt
 LiberationSerif-Italic.ttf               TamzenForPowerline10x20r.afm
 LiberationSerif-Regular.ttf              TamzenForPowerline10x20r.bdf
 NafeesWeb.ttf                            TamzenForPowerline10x20r.dfont
 NotoMono-Regular.ttf                     TamzenForPowerline10x20r.pcf
 octicons-regular.sh                      TamzenForPowerline10x20r.png
 octicons-regular.ttf                     TamzenForPowerline10x20r.pt3
 pomicons-regular.sh                      TamzenForPowerline5x9b-9.fnt
 pomicons-regular.ttf                     TamzenForPowerline5x9b.afm
 Powerline10x20.bdf                       TamzenForPowerline5x9b.bdf
 Powerline5x9.bdf                         TamzenForPowerline5x9b.dfont
 Powerline6x12.bdf                        TamzenForPowerline5x9b.pcf
 Powerline7x13.bdf                        TamzenForPowerline5x9b.png
 Powerline7x14.bdf                        TamzenForPowerline5x9b.pt3
 Powerline8x15.bdf                        TamzenForPowerline5x9r-9.fnt
 Powerline8x16.bdf                        TamzenForPowerline5x9r.afm
 regular                                  TamzenForPowerline5x9r.bdf
 siji.pcf                                 TamzenForPowerline5x9r.dfont
 solid                                    TamzenForPowerline5x9r.pcf
 Symbola_Hinted.ttf                       TamzenForPowerline5x9r.png
 Symbola.ttf                              TamzenForPowerline5x9r.pt3
 Tamsyn10x20b.pcf                         TamzenForPowerline6x12b-12.fnt
 Tamsyn10x20b.psf.gz                      TamzenForPowerline6x12b.afm
 Tamsyn10x20r.pcf                         TamzenForPowerline6x12b.bdf
 Tamsyn10x20r.psf.gz                      TamzenForPowerline6x12b.dfont
 Tamsyn5x9b.pcf                           TamzenForPowerline6x12b.pcf
 Tamsyn5x9b.psf.gz                        TamzenForPowerline6x12b.png
 Tamsyn5x9r.pcf                           TamzenForPowerline6x12b.pt3
 Tamsyn5x9r.psf.gz                        TamzenForPowerline6x12r-12.fnt
 Tamsyn6x12b.pcf                          TamzenForPowerline6x12r.afm
 Tamsyn6x12b.psf.gz                       TamzenForPowerline6x12r.bdf
 Tamsyn6x12r.pcf                          TamzenForPowerline6x12r.dfont
 Tamsyn6x12r.psf.gz                       TamzenForPowerline6x12r.pcf
 Tamsyn7x13b.pcf                          TamzenForPowerline6x12r.png
 Tamsyn7x13b.psf.gz                       TamzenForPowerline6x12r.pt3
 Tamsyn7x13r.pcf                          TamzenForPowerline7x13b-13.fnt
 Tamsyn7x13r.psf.gz                       TamzenForPowerline7x13b.afm
 Tamsyn7x14b.pcf                          TamzenForPowerline7x13b.bdf
 Tamsyn7x14b.psf.gz                       TamzenForPowerline7x13b.dfont
 Tamsyn7x14r.pcf                          TamzenForPowerline7x13b.pcf
 Tamsyn7x14r.psf.gz                       TamzenForPowerline7x13b.png
 Tamsyn8x15b.pcf                          TamzenForPowerline7x13b.pt3
 Tamsyn8x15b.psf.gz                       TamzenForPowerline7x13r-13.fnt
 Tamsyn8x15r.pcf                          TamzenForPowerline7x13r.afm
 Tamsyn8x15r.psf.gz                       TamzenForPowerline7x13r.bdf
 Tamsyn8x16b.pcf                          TamzenForPowerline7x13r.dfont
 Tamsyn8x16b.psf.gz                       TamzenForPowerline7x13r.pcf
 Tamsyn8x16r.pcf                          TamzenForPowerline7x13r.png
 Tamsyn8x16r.psf.gz                       TamzenForPowerline7x13r.pt3
 Tamzen10x20b-20.fnt                      TamzenForPowerline7x14b-14.fnt
 Tamzen10x20b.afm                         TamzenForPowerline7x14b.afm
 Tamzen10x20b.bdf                         TamzenForPowerline7x14b.bdf
 Tamzen10x20b.dfont                       TamzenForPowerline7x14b.dfont
 Tamzen10x20b.pcf                         TamzenForPowerline7x14b.pcf
 Tamzen10x20b.png                         TamzenForPowerline7x14b.png
 Tamzen10x20b.pt3                         TamzenForPowerline7x14b.pt3
 Tamzen10x20b.ttf                         TamzenForPowerline7x14r-14.fnt
 Tamzen10x20r-20.fnt                      TamzenForPowerline7x14r.afm
 Tamzen10x20r.afm                         TamzenForPowerline7x14r.bdf
 Tamzen10x20r.bdf                         TamzenForPowerline7x14r.dfont
 Tamzen10x20r.dfont                       TamzenForPowerline7x14r.pcf
 Tamzen10x20r.pcf                         TamzenForPowerline7x14r.png
 Tamzen10x20r.png                         TamzenForPowerline7x14r.pt3
 Tamzen10x20r.pt3                         TamzenForPowerline8x15b-15.fnt
 Tamzen10x20r.ttf                         TamzenForPowerline8x15b.afm
 Tamzen5x9b-9.fnt                         TamzenForPowerline8x15b.bdf
 Tamzen5x9b.afm                           TamzenForPowerline8x15b.dfont
 Tamzen5x9b.bdf                           TamzenForPowerline8x15b.pcf
 Tamzen5x9b.dfont                         TamzenForPowerline8x15b.png
 Tamzen5x9b.pcf                           TamzenForPowerline8x15b.pt3
 Tamzen5x9b.png                           TamzenForPowerline8x15r-15.fnt
 Tamzen5x9b.pt3                           TamzenForPowerline8x15r.afm
 Tamzen5x9b.ttf                           TamzenForPowerline8x15r.bdf
 Tamzen5x9r-9.fnt                         TamzenForPowerline8x15r.dfont
 Tamzen5x9r.afm                           TamzenForPowerline8x15r.pcf
 Tamzen5x9r.bdf                           TamzenForPowerline8x15r.png
 Tamzen5x9r.dfont                         TamzenForPowerline8x15r.pt3
 Tamzen5x9r.pcf                           TamzenForPowerline8x16b-16.fnt
 Tamzen5x9r.png                           TamzenForPowerline8x16b.afm
 Tamzen5x9r.pt3                           TamzenForPowerline8x16b.bdf
 Tamzen5x9r.ttf                           TamzenForPowerline8x16b.dfont
 Tamzen6x12b-12.fnt                       TamzenForPowerline8x16b.pcf
 Tamzen6x12b.afm                          TamzenForPowerline8x16b.png
 Tamzen6x12b.bdf                          TamzenForPowerline8x16b.pt3
 Tamzen6x12b.dfont                        TamzenForPowerline8x16r-16.fnt
 Tamzen6x12b.pcf                          TamzenForPowerline8x16r.afm
 Tamzen6x12b.png                          TamzenForPowerline8x16r.bdf
 Tamzen6x12b.pt3                          TamzenForPowerline8x16r.dfont
 Tamzen6x12b.ttf                          TamzenForPowerline8x16r.pcf
 Tamzen6x12r-12.fnt                       TamzenForPowerline8x16r.png
 Tamzen6x12r.afm                          TamzenForPowerline8x16r.pt3
 Tamzen6x12r.bdf                          VeraBd.ttf
 Tamzen6x12r.dfont                        VeraBI.ttf
 Tamzen6x12r.pcf                          VeraIt.ttf
 Tamzen6x12r.png                          VeraMoBd.ttf
 Tamzen6x12r.pt3                          VeraMoBI.ttf
 Tamzen6x12r.ttf                          VeraMoIt.ttf
 Tamzen7x13b-13.fnt                       VeraMono.ttf
 Tamzen7x13b.afm                          VeraSeBd.ttf
 Tamzen7x13b.bdf                          VeraSe.ttf
 Tamzen7x13b.dfont                        Vera.ttf
 Tamzen7x13b.pcf                          VL-Gothic-Regular.ttf
 Tamzen7x13b.png                          VL-PGothic-Regular.ttf

</code></pre><p>There you can see directories also exist. Just make sure they are world readable. Else they won&rsquo;t work.</p>
<p>So now you have an idea how to save them. I installed them when I was on Arch Linux and never installed a single font again in my machine running Debian.</p>
<h2 id="how-to-get-fonts">How to get fonts?</h2>
<p>Well, As I said I have installed most of the fonts from Arch Linux official/community and AUR and some I downloaded from internet different websites.
Just install them and create these directories if they already don&rsquo;t exist.</p>
<pre><code>$ mkdir -p ~/.local/share/fonts
$ find / -name '*.ttf' -o -name '*.psf' -o -name '*.bdf' -o -name '*.fnt' -o -name '*.ttf' -o -name '*.pcf' -exec cp {} ~/.local/share/fonts \;
</code></pre><h2 id="loadreload-fonts">Load/reload fonts</h2>
<p>After copying the files, we have to load them.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ fc-cache -fvv
</code></pre></div><h2 id="autoload-fonts-on-boot">Autoload fonts on boot</h2>
<p>Put this file in session starting file. Like .Xsession or if you&rsquo;re using xorg-xinit to start your Desktop Environment or Windows Manager then put it into ~/.xinitrc.</p>
<pre><code>$ xset +fp ~/.local/share/fonts
$ xset fp rehash
</code></pre><p>Still have problems? Just lemme know in comments section and I&rsquo;ll be happy to assist you.</p>
]]></content>
        </item>
        
        <item>
            <title>use sudo with no password</title>
            <link>https://abdullah.today/enable-sudo-with-no-password/</link>
            <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/enable-sudo-with-no-password/</guid>
            <description>In Unix world, we shouldn&amp;rsquo;t use administrator user without some important stuff which needs access to it. There is a utility sudo we can use to have administrator access. But everytime you invoke it, it asks for your user&amp;rsquo;s password.
Today, I&amp;rsquo;m going to guide you, how you can use sudowithout password.
Once you install Debian, you get some option to create a user. And if you choose the option, &amp;ldquo;Don&amp;rsquo;t use root for login&amp;rdquo;, this new user becomes privileged user by default.</description>
            <content type="html"><![CDATA[<p>In Unix world, we shouldn&rsquo;t use administrator user without some important stuff
which needs access to it. There is a utility <!-- raw HTML omitted --> sudo <!-- raw HTML omitted --> we can use to have
administrator access. But everytime you invoke it, it asks for your user&rsquo;s
password.</p>
<p>Today, I&rsquo;m going to guide you, how you can use <!-- raw HTML omitted -->sudo<!-- raw HTML omitted --> without password.</p>
<p>Once you install <!-- raw HTML omitted -->Debian<!-- raw HTML omitted -->, you get some option to create a user. And if you
choose the option, &ldquo;Don&rsquo;t use root for login&rdquo;, this new user becomes privileged
user by default. Which means you can invoke any command by using sudo. It will
ask for your password and command is executed.</p>
<p>Assuming you have a privileged user, edit sudoers file.</p>
<pre><code>sudo visudo
</code></pre><p>On my Debian installation, it looks like this:</p>
<pre><code>
#
# This file MUST be edited with the 'visudo' command as root.
#
# Please consider adding local content in /etc/sudoers.d/ instead of
# directly modifying this file.
#
# See the man page for details on how to write a sudoers file.
#
Defaults	env_reset
Defaults	mail_badpass
Defaults	secure_path=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;

# Host alias specification

# User alias specification

# Cmnd alias specification

# User privilege specification
root	ALL=(ALL:ALL) ALL

# Allow members of group sudo to execute any command
%sudo	ALL=(ALL:ALL) ALL

# See sudoers(5) for more information on &quot;#include&quot; directives:

#includedir /etc/sudoers.d
</code></pre><p>At the end of the file, just append this:</p>
<pre><code>username ALL=(ALL) NOPASSWD:ALL
</code></pre><p>Replace <!-- raw HTML omitted -->username<!-- raw HTML omitted --> with your username.</p>
<p>Here is my sudoers file.</p>
<pre><code>$ sudo cat /etc/sudoers

#
# This file MUST be edited with the 'visudo' command as root.
#
# Please consider adding local content in /etc/sudoers.d/ instead of
# directly modifying this file.
#
# See the man page for details on how to write a sudoers file.
#
Defaults	env_reset
Defaults	mail_badpass
Defaults	secure_path=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;

# Host alias specification

# User alias specification

# Cmnd alias specification

# User privilege specification
root	ALL=(ALL:ALL) ALL

# Allow members of group sudo to execute any command
%sudo	ALL=(ALL:ALL) ALL

# See sudoers(5) for more information on &quot;#include&quot; directives:

# I don't want a password everytime for my user.
ak	ALL=(ALL) NOPASSWD:ALL
#includedir /etc/sudoers.d
</code></pre><p>Now open a new terminal and try to install something using sudo. You won&rsquo;t be
asked to enter your password from now.</p>
]]></content>
        </item>
        
        <item>
            <title>My Email Setup</title>
            <link>https://abdullah.today/mutt/</link>
            <pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/mutt/</guid>
            <description>why commandline? TL;DR
powerful and efficient!
I have been creating multiple accounts for email since 2009. Some of the accounts I still have them in 2019 and others I don&amp;rsquo;t have access to. I realized that having your own email server on your own domain is a good thing. So I started creating mail server. I did that well. Learned a lot.
As you know I like things to keep minimalistic yet powerful than most written GUI apps.</description>
            <content type="html"><![CDATA[<h2 id="why-commandline">why commandline?</h2>
<p><em><em>TL;DR</em></em></p>
<p>powerful and efficient!</p>
<p>I have been creating multiple accounts for email since 2009. Some of the
accounts I still have them in 2019 and others I don&rsquo;t have access to. I realized that having your own email server on your own domain is a good thing. So I started creating mail server. I did that well. Learned a lot.</p>
<p>As you know I like things to keep minimalistic yet powerful than most written
GUI apps. So here is how I use a command line email client <!-- raw HTML omitted -->Mutt<!-- raw HTML omitted --> with many other tools which make it perfect setup.</p>
<p>There are several scenarios. Like if you have an email server, you can ssh into it and start reading your email inside some tmux session.</p>
<p>But what I have is totally different.</p>
<p>I use isync to sync my remote mailbox with local one, invoke notmuch and
read/reply the emails using mutt.</p>
<h3 id="installation">Installation</h3>
<h2 id="install-required-tools">Install required tools</h2>
<pre><code>$ sudo apt install -y isync mutt notmuch

</code></pre><h3 id="sync-mail-accounts">sync mail accounts</h3>
<h2 id="isync">isync</h2>
<p>I use <!-- raw HTML omitted -->isync<!-- raw HTML omitted --> to sync mailboxes.</p>
<p>Let&rsquo;s configure it.</p>
<pre><code>IMAPAccount abdullah
Host imap.gmail.com
User user@gmail.com
PassCmd &quot;gpg -dq ~/.local/share/misc/abdullah.gpg&quot;
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore abdullah-remote
Account abdullah

MaildirStore abdullah-local
Subfolders Verbatim
Path ~/.mail/
Inbox ~/.mail/Inbox

Channel abdullah
Master :abdullah-remote:
Slave :abdullah-local:
Patterns *
CopyArrivalDate yes
Create Both
SyncState *


</code></pre><p>Replace mailbox stuff with yours where necessary. And start isync.</p>
<pre><code>$ mbsync -VXa 
</code></pre><p>Don&rsquo;t forget to run <!-- raw HTML omitted -->notmuch<!-- raw HTML omitted --> before or after it. Answer all questions
it asks, it&rsquo;s one time process. You can edit the cofiguration later, they
reside in your home directory.</p>
<h2 id="mutt">Mutt</h2>
<p>Mutt is a command line utility which runs inside a terminal session.
Pretty easy to use and have tons of features.</p>
<p>Mut looks for configuration files for user base in $HOME/.config/mutt/. So
create this directory.</p>
<pre><code>$ mkdir -p ~/.config/mutt/credentials
touch ~/.config/mutt/muttrc
</code></pre><p>Edit <!-- raw HTML omitted -->muttrc<!-- raw HTML omitted --> to your needs. I&rsquo;m pasting mine here for reference.</p>
<pre><code>$ cat ~/.config/mutt/muttrc


#  ▓▓▓▓▓▓▓▓▓▓
# ░▓ Author ▓ Abdullah &lt;https://abdullah.today/&gt;
# ░▓▓▓▓▓▓▓▓▓▓
# ░░░░░░░░░░
#


# source important files

source $HOME/.config/mutt/colorrc
source $HOME/.config/mutt/gpgforak.rc
source ~/.config/mutt/aliases



set folder                         = ~/.mail
mailboxes                          = `echo $HOME/.mail/*`
set from                           = abdullah@abdullah.today
set sendmail                       = msmtp
set abort_noattach                 = &quot;no&quot;
set abort_noattach_regexp          = &quot;attach&quot;
set abort_nosubject                = &quot;ask-yes&quot;
set alias_file                     = &quot;~/.config/mutt/aliases&quot; #source it
set alias_format                   = &quot;%4n %2f %t %-10a   %r&quot;
set allow_8bit                     = &quot;yes&quot;
set allow_ansi                     = &quot;no&quot;
set arrow_cursor                   = &quot;yes&quot;
set ascii_chars                    = &quot;no&quot;
set askbcc                         = &quot;no&quot;
set askcc                          = &quot;no&quot;
set assumed_charset                =
set attach_charset                 =
set attach_format                  = &quot;%u%D%I %t%4n %T%.40d%&gt; [%.7m/%.10M, %.6e%?C?, %C?, %s] &quot;
set attach_sep                     = &quot;\n&quot;
set attach_split                   = &quot;yes&quot;
set attribution                    = &quot;On %d, %n wrote:&quot;
set attribution_locale             =
set auto_tag                       = &quot;no&quot;
set autoedit                       = &quot;yes&quot;
set beep                           = &quot;yes&quot;
set beep_new                       = &quot;yes&quot;
set bounce                         = &quot;ask-yes&quot;
set bounce_delivered               = &quot;no&quot;
set braille_friendly               = &quot;no&quot;
set browser_abbreviate_mailboxes  = &quot;yes&quot;
set certificate_file              = &quot;~/.config/mutt/certs&quot;
set crypt_autosign                = yes
set crypt_replyencrypt            = yes
set date_format                   = &quot;%d/%m&quot;
set editor                        = vim
set fast_reply                    = yes
set header_cache                  = ~/.cache/mutt
set imap_keepalive                = 300
set include                       = yes
set mail_check                    = 60
set mail_check_stats              = yes
set mailcap_path                  = ~/.config/mutt/mailcap
set mbox_type                     = Maildir
set message_cachedir              = ~/.cache/mutt/messages
set pager                         = vim
set pager_context                 = 3
set pager_index_lines             = 8
set pgp_autosign                  = yes
set pgp_replysign                 = yes
set pgp_replysignencrypted        = yes
set pgp_sign_as                   = 0x5CBC7BC7
set pgp_timeout                   = 3600
set pgp_use_gpg_agent             = yes
set postpone_encrypt              = yes
set postpone_encrypt_as           = 0xE6E81782
set postponed                     = ~/.mail/Drafts
set prompt_after                  = no
set quote_regexp                  = &quot;^( {0,4}[&gt;|:#%]| {0,4}[a-z0-9]+[&gt;|]+)+&quot;
set record                        = ~/.mail/Sent
set trash                         = ~/.mail/Trash
set reply_regexp                  = &quot;^(([Rr][Ee]?(\[[0-9]+\])?: *)?(\[[^]]+\] *)?)*&quot;
set rfc2047_parameters            = yes
set send_charset                  = utf-8
set sidebar_format                = &quot;%B%?F? [%F]?%* %?N?%N/?%S&quot;
set sidebar_visible               = yes
set thorough_search
set sidebar_width                 = 24
set status_chars                  = &quot; *%A&quot;
set sig_dashes                    = no
set signature                     = ~/.config/mutt/signature
set sort                          = threads
set sort_aux                      = reverse-last-date-received
set spoolfile                     = ~/.mail/INBOX
set ssl_force_tls                 = yes
set ssl_starttls                  = yes
set timeout                       = 3
set use_from                      = yes
set quit
set visual                        = vim
set wait_key                      = no
set status_format                 = &quot;───[ Folder: %f ]───[%r%m messages%?n? (%n new)?%?d? (%d to delete)?%?t? (%t tagged)? ]───%&gt;─%?p?( %p postponed )?───&quot;
set sort_re
set edit_headers
unset confirmappend
unset imap_passive
unset mark_old
set smart_wrap
unset markers
set pipe_decode
set text_flowed
set pager_stop
auto_view application/pgp-encrypted
set menu_scroll
set uncollapse_jump
set delete
set tilde
set imap_check_subscribed

# HTML

auto_view text/html
alternative_order text/enriched text/plain text/html
alternative_order text/plain text/enriched text/html
alternative_order text/plain text/html

# Keybindings

bind attach &lt;return&gt; view-mailcap
bind attach,index G last-entry
bind attach,index g first-entry
bind attach,index,pager \CD next-page
bind attach,index,pager \CU previous-page
bind browser $ check-new
bind index   \t   next-unread
bind index  ,\t previous-unread
bind index &lt;space&gt;  collapse-thread
bind index &lt;tab&gt;    sync-mailbox
bind index G        last-entry
bind index R        group-reply
bind index,pager &lt;down&gt;   sidebar-next
bind index,pager &lt;right&gt;  sidebar-open
bind index,pager &lt;up&gt;     sidebar-prev
bind pager G bottom
bind pager R  group-reply
bind pager g top
bind pager gg top
bind pager j  next-line
bind pager k  previous-line

# colors

color header blue default &quot;^(Subject)&quot;
color index red white &quot;~v~(~F)!~N&quot;
color sidebar_new yellow default

# macros

macro index C &quot;&lt;copy-message&gt;?&lt;toggle-mailboxes&gt;&quot; 
# macro index q &quot;&lt;sync-mailbox&gt;&lt;shell-escape&gt;/usr/bin/offlineimap -o &gt;/dev/null 2&gt;&amp;1&lt;enter&gt;&lt;quit&gt;&quot;
macro index M &quot;&lt;save-message&gt;?&lt;toggle-mailboxes&gt;&quot;
macro index O &quot;&lt;shell-escape&gt;mbsync -Va&lt;enter&gt;&quot; 
macro index \Cr &quot;T~U&lt;enter&gt;&lt;tag-prefix&gt;&lt;clear-flag&gt;N&lt;untag-pattern&gt;.&lt;enter&gt;&quot; 
macro index,pager U &quot;&lt;enter-command&gt;set pipe_decode  = yes&lt;enter&gt;&lt;pipe-message&gt;urlview&lt;enter&gt;&lt;enter-command&gt;set pipe_decode = no&lt;enter&gt;&quot;&quot;view URLs&quot;

# headers

my_hdr User-Agent: 'Eat your heart out, Windows Lusers'
hdr_order from: to: cc: date: subject:
unhdr_order *

#vim:filetype=muttrc

</code></pre><h2 id="automate-it-with-systemd">Automate it with systemd</h2>
<p>You can automate it with systemd. Here are two files which will invoke isync
a minute after your machine is rebooted and then after every two minutes
synchronization.</p>
<p>A service file:</p>
<pre><code>$ cat ~/.config/systemd/user/isync.service

[Unit]
Description=Mailbox Sync

[Service]
Type=oneshot
ExecStart=/usr/bin/mbsync -VXa
ExecStartPost=/usr/bin/notmuch new

</code></pre><p>and a timer:</p>
<pre><code>$ cat ~/.config/systemd/user/isync.timer

[Unit]
Description=Mailbox Sync Timer

[Timer]
OnBootSec=1m
OnUnitActiveSec=2m
Unit=isync.service

[Install]
WantedBy=timers.target

</code></pre><p>Start them using:</p>
<pre><code>$ systemctl --user --now enable isync.timer

</code></pre><h3 id="password-management">Password management</h3>
<p>I use encrypted passwords. You can check my
<a href="https://gitlab.com/Abdullah/cfg.git">dotfiles</a> for
reference.</p>
<p>Voila! You have a perfect email setup now. You can enable extra functionality
like encryption, password management, aliasing etc&hellip; Just have a look
<a href="https://gitlab.com/Abdullah/cfg.git">here</a> if you
think something isn&rsquo;t discussed or well-explained, and don&rsquo;t forget to comment and lemme know about your thoughts.</p>
]]></content>
        </item>
        
        <item>
            <title>latest nodejs for debian and derived distributions</title>
            <link>https://abdullah.today/posts/latest-nodejs-in-debian/</link>
            <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/posts/latest-nodejs-in-debian/</guid>
            <description>latest NODE installation in debian $ echo &#39;deb https://deb.nodesource.com/node_12.x sid main&#39; | sudo tee -a /etc/apt/sources.list &amp;gt; /dev/null $ sudo apt update $ sudo apt install -y nodejs Enjoy using NODEjs!</description>
            <content type="html"><![CDATA[<h4 id="latest-node-installation-in-debian">latest NODE installation in debian</h4>
<pre><code>$ echo 'deb https://deb.nodesource.com/node_12.x sid main' | sudo tee -a /etc/apt/sources.list &gt; /dev/null

$ sudo apt update
$ sudo apt install -y nodejs 
</code></pre><p>Enjoy using NODEjs!</p>
]]></content>
        </item>
        
        <item>
            <title>Google Chrome for deiban and derived distributions</title>
            <link>https://abdullah.today/chrome/</link>
            <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/chrome/</guid>
            <description>You&amp;rsquo;ll have to admit google chrome is super fast. Along with other plugins I love to use it as main browser. But unfortunately it isn&amp;rsquo;t in debian repositories.
So how to install it? Here is the procedure you can follow to get latest chrome from google.
$ echo &#39;deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main&#39; | sudo tee -a /etc/apt/sources.list &amp;gt; /dev/null $ sudo apt update $ sudo apt install -y google-chrome-stable Enjoy using Chrome.</description>
            <content type="html"><![CDATA[<p>You&rsquo;ll have to admit google chrome is super fast. Along with other plugins I love to use it as main browser. But unfortunately it isn&rsquo;t in debian repositories.</p>
<p>So how to install it? Here is the procedure you can follow to get
latest chrome from google.</p>
<pre><code>$ echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee -a /etc/apt/sources.list &gt; /dev/null
$ sudo apt update
$ sudo apt install -y google-chrome-stable
</code></pre><p>Enjoy using Chrome.</p>
]]></content>
        </item>
        
        <item>
            <title>EFISTUB</title>
            <link>https://abdullah.today/efistub/</link>
            <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/efistub/</guid>
            <description>So in this post I&amp;rsquo;m gonna guide you how you can use efistub, a feature which you can use to boot the kernel without an extra boot manager(grub, systemd-boot, rEFInd etc.)
Create a boot entry using efibootmgr.
# efibootmgr --create --disk /dev/sda --part 1 --label Debian --loader /vmlinuz --unicode &amp;quot;root=/dev/sda2 rw initrd=\initrd.img&amp;quot; --verbose Explaination of the command.
 --create &#39;creates a new boot entry&#39; --disk &#39;disk where you wanna create the boot entry&#39; --part &#39;partition number&#39; --label &#39;the label for new entry&#39; --loader &#39;loader to boot, it&#39;s vmlinuz in this example&#39; --unicode &#39;kernel parameters you can define here like initrd, swap, encrypted container for root&#39; --verbose &#39;let it verbose&#39; I have an encrypted installation on my machine so here is how I create an entry for me.</description>
            <content type="html"><![CDATA[<p><img src="/images/efistub.png" alt="efistub"></p>
<p>So in this post I&rsquo;m gonna guide you how you can use efistub, a feature which you can use to boot the kernel without an extra boot manager(grub, systemd-boot, rEFInd etc.)</p>
<p>Create a boot entry using efibootmgr.</p>
<pre><code># efibootmgr --create --disk /dev/sda --part 1 --label Debian --loader /vmlinuz --unicode &quot;root=/dev/sda2 rw initrd=\initrd.img&quot; --verbose
</code></pre><p>Explaination of the command.</p>
<pre><code> --create 'creates a new boot entry'
 --disk   'disk where you wanna create the boot entry'
 --part   'partition number'
 --label  'the label for new entry'
 --loader 'loader to boot, it's vmlinuz in this example'
 --unicode 'kernel parameters you can define here like initrd, swap, encrypted container for root'
 --verbose 'let it verbose'
</code></pre><p>I have an encrypted installation on my machine so here is how I create an entry for me.</p>
<pre><code># efibootmgr --create --disk /dev/sda --part 1 --label 'My Debian' --loader /vmlinuz --unicode &quot;cryptdevice=UUID=XXXXXXXXXXXXXXXXXX:cryptlvm root=UUID=XXXXXXXXXXXXXXXXXX rw initrd=\initrd.img resume=UUID=XXXXXXXXXXXXXXXXX&quot; --verbose
</code></pre><p>where cryptdevice UUID is the UUID of my SSD&rsquo;s encrypted container&rsquo;s UUID and root&rsquo;s UUID is the UUID for my lvm volume where root is located, resume UUID is the lvm UUID where swap partition is. You can get UUID with blkid command.</p>
<p>Now go to /boot directory and check for the vmlinuz and initrd.img. They might be in child directories like if EFI/grub or maybe somewhere else depending on your current boot managers. and move them to /boot. Also change your fstab (/etc/fstab) so that it mount your boot partition on /boot.</p>
<pre><code># mv /boot/efi/grub/vmlinuz-4.19.0-1-rt-amd64 /boot/vmlinuz
# mv /boot/efi/grub/initrd.img-4.9.0-8-amd64 /boot/initrd.img
</code></pre><p>and your fstab should be look like this.</p>
<pre><code>UUID=XXXX-XXXX    /boot     vfat    umask=0077  0   1
</code></pre><p>By default, debian installs kernel and initrd images with their version numbers. But also puts a symlink to it in / with vmlinuz name. So we have to write a script so that if we get an update of kernel, it will automatically rename it to vmlinuz and initrd.img. Just create a script with following path and make it executable.</p>
<pre><code># vim /etc/kernel/postinst.d/update-efistub

#!/bin/sh
cp /vmlinuz /boot/

</code></pre><p>save it and make it executable.</p>
<pre><code># chmod +x /etc/kernel/postinst.d/update-efistub
</code></pre><p>and do the same with initramfs.</p>
<pre><code># vim /etc/initramfs/post-update.d/update-efistub

#!/bin/sh
cp /initrd.img /boot/

</code></pre><p>make it executable.</p>
<pre><code>chmod +x /etc/initramfs/post-update.d/update-efistub
</code></pre><p>That&rsquo;s it. Now uninstall any extra boot manager and reboot. You&rsquo;ll see that your machine is booting without a boot manager. Yeah, you heard it right. No sensible person will call it bootloader. They are just boot managers which also create an entry just like we did. So why don&rsquo;t we do it ourselves. Feel free to mail me if you get some errors.</p>
<blockquote>
<p><strong><em>NOTE:</em></strong> On a standard debian installation, installer creates an <em>ESP</em> if
not already exists, and formats it as vFAT. And also creates another ext2
formatted partition. Installer mounts <em>ESP</em> as <em>/boot/efi</em>. So for debian
standard install, your command looks like this.</p>
</blockquote>
<pre><code># efibootmgr --create --disk /dev/sda --part 1 --label Debian --loader
'\EFI\debian\vmlinuz' --unicode 'root=UUID=XXXX-XXXX-XXXX-XXX ro quiet
initrd=\\EFI\\debian\\initrd.img' --verbose
</code></pre><p>and for an encrypted installation with lvm, it should be.</p>
<pre><code># efibootmgr --create --disk /dev/sda --part 1 --label Debian --loader
'\EFI\debian\vmlinuz' --unicode 'cryptdevice=UUID=XXXX-XXXX-XXXX-XXXX:cryptlvm
root=UUID=XXXX-XXXX-XXXX-XXXX ro quiet initrd=\\EFI\\debian\\initrd.img
resume=UUID=XXXX-XXXX-XXXX-XXXX' --verbose
</code></pre><p>where first UUID is your /dev/sda3 encrypted container UUID, root UUID is where
rootfs is installed and resume UUID is your encrypted swap partition UUID.</p>
]]></content>
        </item>
        
        <item>
            <title>dwm window manager</title>
            <link>https://abdullah.today/dwm/</link>
            <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/dwm/</guid>
            <description>What&amp;rsquo;s DWM? DWM is a Tiling window manager by Suckless community.
Installation You can install dwm by using your distribution package maangers. But as dwm is configured by hand before compilation, so it&amp;rsquo;s recommended you clone its repository, configure and then compile it for your system. I have a fork which you may like.
Configuration In the root directory, there is a file config.h. You can edit it how you like.</description>
            <content type="html"><![CDATA[<h2 id="whats-dwm">What&rsquo;s <strong>DWM</strong>?</h2>
<p><a href="https://dwm.suckless.org">DWM</a> is a Tiling window manager by <a href="https://suckless.org/">Suckless
community</a>.</p>
<h3 id="installation">Installation</h3>
<p>You can install <strong>dwm</strong> by using your distribution package maangers. But as
<strong>dwm</strong> is configured by hand before compilation, so it&rsquo;s recommended you clone
its repository, configure and then compile it for your system. I have a
<a href="https://gitlab.com/Abdullah/dwm.git">fork</a> which you may like.</p>
<h2 id="configuration">Configuration</h2>
<p>In the root directory, there is a file <strong>config.h</strong>. You can edit it how you
like. After editing run <strong>make</strong> and then as root (if you wanna install
as system-wide) or copy the <strong>dwm</strong> executable file to your path.</p>
<p>Let&rsquo;s take a look at my fork compiled <strong>dwm</strong>.</p>
<p>The default Modifier is Super Key (Windows key on most laptops). You can change it to Alt key or whatever you like.  From now on I&rsquo;m using Mod for super key.</p>
<p>Let&rsquo;s open a window. The first window will always be in full screen.</p>
<p><img src="/images/dwm-default.png" alt=""></p>
<p>Let&rsquo;s add more windows. I&rsquo;ll introduce you some terms used in Window Managers.
The larger area is called Master. When you open new windows, the first window is pushed to stack area. Take a look at this screenshot.</p>
<p><img src="/images/dwm-2.png" alt=""></p>
<p>Add another terminal window.</p>
<p><img src="/images/dwm-3.png" alt=""></p>
<p>If you wanna move the window in stack area to come back in Master area,
just focus it with <!-- raw HTML omitted -->Mod + j/k<!-- raw HTML omitted --> and then press <!-- raw HTML omitted -->Mod + Shift +
Return<!-- raw HTML omitted -->.</p>
<p><img src="/images/dwm-move.png" alt=""></p>
<p>You can resize the increase/decrease Master area with <!-- raw HTML omitted -->Mod + h/l<!-- raw HTML omitted -->.</p>
<p><img src="/images/dwm-resize.png" alt=""></p>
<p>For now, it&rsquo;s enough for you to get started. I&rsquo;ll update it soon. In sha
Allah.</p>
]]></content>
        </item>
        
        <item>
            <title>Loving Dad</title>
            <link>https://abdullah.today/baba/</link>
            <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/baba/</guid>
            <description>Da satargo tor da zrha takor baba Khatam dy ma sha da zrha zor baba Sta dy wujood wona samsora ghuwaram Sta zindagi la Khudai nora ghuwaram Zaka zari minat o sawal koma Dua dy sta rogh sehat koma! </description>
            <content type="html"><![CDATA[<p><img src="/images/dad.jpg" alt="dad&rsquo;s pic"></p>
<h2 id="da-satargo-tor-da-zrha-takor-baba">Da satargo tor da zrha takor baba</h2>
<h2 id="khatam-dy-ma-sha-da-zrha-zor-baba">Khatam dy ma sha da zrha zor baba</h2>
<h2 id="sta-dy-wujood-wona-samsora-ghuwaram">Sta dy wujood wona samsora ghuwaram</h2>
<h2 id="sta-zindagi-la-khudai-nora-ghuwaram">Sta zindagi la Khudai nora ghuwaram</h2>
<h2 id="zaka-zari-minat-o-sawal-koma">Zaka zari minat o sawal koma</h2>
<h2 id="dua-dy-sta-rogh-sehat-koma">Dua dy sta rogh sehat koma!</h2>
]]></content>
        </item>
        
        <item>
            <title>Set time zone in Debian, Ubuntu, Raspberry Pi(Raspbian)</title>
            <link>https://abdullah.today/tzdata/</link>
            <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/tzdata/</guid>
            <description>Sometimes we install systems and don&amp;rsquo;t care about setting timezone. Or we travel to some other countries where timezone is different. So here is how you can change timezone in Debian, Ubuntu, Mint, Raspbian and almost all distributions derived from Debian.
# dpkg-reconfigure tzdata You will see a dialog box opened.
Select your continent.
Hit enter after selecting your continent using arrow keys.
Select your city and hit Enter. Voila, you are done!</description>
            <content type="html"><![CDATA[<p>Sometimes we install systems and don&rsquo;t care about setting timezone. Or we travel to some other countries where timezone is different. So here is how you can change timezone in Debian, Ubuntu, Mint, Raspbian and almost all distributions derived from Debian.</p>
<pre><code># dpkg-reconfigure tzdata
</code></pre><p>You will see a dialog box opened.</p>
<p>Select your continent.</p>
<p>Hit enter after selecting your continent using arrow keys.</p>
<p>Select your city and hit Enter. Voila, you are done!</p>
]]></content>
        </item>
        
        <item>
            <title>Création d&#39;un nouveau thème</title>
            <link>https://abdullah.today/creation-dun-nouveau-theme/</link>
            <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/creation-dun-nouveau-theme/</guid>
            <description>Introduction url</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>url</p>
]]></content>
        </item>
        
        <item>
            <title>(Hu)go Template Primer</title>
            <link>https://abdullah.today/posts/goisforlovers/</link>
            <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/posts/goisforlovers/</guid>
            <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
            <content type="html"><![CDATA[<p>Hugo uses the excellent <a href="https://golang.org/">Go</a> <a href="https://golang.org/pkg/html/template/">html/template</a> library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in Go templates.</p>
<p>This document is a brief primer on using Go templates. The <a href="https://golang.org/pkg/html/template/">Go docs</a>
provide more details.</p>
<h2 id="introduction-to-go-templates">Introduction to Go Templates</h2>
<p>Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that Go templates parse very quickly.</p>
<p>A unique characteristic of Go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the <a href="https://golang.org/pkg/html/template/">Go docs</a>.</p>
<h2 id="basic-syntax">Basic Syntax</h2>
<p>Golang templates are HTML files with the addition of variables and
functions.</p>
<p><strong>Go variables and functions are accessible within {{ }}</strong></p>
<p>Accessing a predefined variable &ldquo;foo&rdquo;:</p>
<pre><code>{{ foo }}
</code></pre>
<p><strong>Parameters are separated using spaces</strong></p>
<p>Calling the add function with input of 1, 2:</p>
<pre><code>{{ add 1 2 }}
</code></pre>
<p><strong>Methods and fields are accessed via dot notation</strong></p>
<p>Accessing the Page Parameter &ldquo;bar&rdquo;</p>
<pre><code>{{ .Params.bar }}
</code></pre>
<p><strong>Parentheses can be used to group items together</strong></p>
<pre><code>{{ if or (isset .Params &quot;alt&quot;) (isset .Params &quot;caption&quot;) }} Caption {{ end }}
</code></pre>
<h2 id="variables">Variables</h2>
<p>Each Go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
<a href="/layout/variables">variables</a> page.</p>
<p>A variable is accessed by referencing the variable name.</p>
<pre><code>&lt;title&gt;{{ .Title }}&lt;/title&gt;
</code></pre>
<p>Variables can also be defined and referenced.</p>
<pre><code>{{ $address := &quot;123 Main St.&quot;}}
{{ $address }}
</code></pre>
<h2 id="functions">Functions</h2>
<p>Go template ship with a few functions which provide basic functionality. The Go
template system also provides a mechanism for applications to extend the
available functions with their own. <a href="/layout/functions">Hugo template
functions</a> provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.</p>
<p><strong>Example:</strong></p>
<pre><code>{{ add 1 2 }}
</code></pre>
<h2 id="includes">Includes</h2>
<p>When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.</p>
<p><strong>Example:</strong></p>
<pre><code>{{ template &quot;chrome/header.html&quot; . }}
</code></pre>
<h2 id="logic">Logic</h2>
<p>Go templates provide the most basic iteration and conditional logic.</p>
<h3 id="iteration">Iteration</h3>
<p>Just like in Go, the Go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.</p>
<p><strong>Example 1: Using Context</strong></p>
<pre><code>{{ range array }}
    {{ . }}
{{ end }}
</code></pre>
<p><strong>Example 2: Declaring value variable name</strong></p>
<pre><code>{{range $element := array}}
    {{ $element }}
{{ end }}
</code></pre>
<p><strong>Example 2: Declaring key and value variable name</strong></p>
<pre><code>{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
</code></pre>
<h3 id="conditionals">Conditionals</h3>
<p>If, else, with, or, &amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with <code>end</code>.</p>
<p>Go Templates treat the following values as false:</p>
<ul>
<li>false</li>
<li>0</li>
<li>any array, slice, map, or string of length zero</li>
</ul>
<p><strong>Example 1: If</strong></p>
<pre><code>{{ if isset .Params &quot;title&quot; }}&lt;h4&gt;{{ index .Params &quot;title&quot; }}&lt;/h4&gt;{{ end }}
</code></pre>
<p><strong>Example 2: If -&gt; Else</strong></p>
<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{else}}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>
<p><strong>Example 3: And &amp; Or</strong></p>
<pre><code>{{ if and (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;)) (isset .Params &quot;attr&quot;)}}
</code></pre>
<p><strong>Example 4: With</strong></p>
<p>An alternative way of writing &ldquo;if&rdquo; and then referencing the same value
is to use &ldquo;with&rdquo; instead. With rebinds the context <code>.</code> within its scope,
and skips the block if the variable is absent.</p>
<p>The first example above could be simplified as:</p>
<pre><code>{{ with .Params.title }}&lt;h4&gt;{{ . }}&lt;/h4&gt;{{ end }}
</code></pre>
<p><strong>Example 5: If -&gt; Else If</strong></p>
<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{ else if isset .Params &quot;caption&quot; }}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>
<h2 id="pipes">Pipes</h2>
<p>One of the most powerful components of Go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&rsquo;s output becomes the
input of the following pipe.</p>
<p>Because of the very simple syntax of Go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.</p>
<p>A few simple examples should help convey how to use the pipe.</p>
<p><strong>Example 1 :</strong></p>
<pre><code>{{ if eq 1 1 }} Same {{ end }}
</code></pre>
<p>is the same as</p>
<pre><code>{{ eq 1 1 | if }} Same {{ end }}
</code></pre>
<p>It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.</p>
<p><strong>Example 2 :</strong></p>
<pre><code>{{ index .Params &quot;disqus_url&quot; | html }}
</code></pre>
<p>Access the page parameter called &ldquo;disqus_url&rdquo; and escape the HTML.</p>
<p><strong>Example 3 :</strong></p>
<pre><code>{{ if or (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;)) (isset .Params &quot;attr&quot;)}}
Stuff Here
{{ end }}
</code></pre>
<p>Could be rewritten as</p>
<pre><code>{{  isset .Params &quot;caption&quot; | or isset .Params &quot;title&quot; | or isset .Params &quot;attr&quot; | if }}
Stuff Here
{{ end }}
</code></pre>
<h2 id="context-aka-the-dot">Context (aka. the dot)</h2>
<p>The most easily overlooked concept to understand about Go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.</p>
<p><strong>Example:</strong></p>
<pre><code>  {{ $title := .Site.Title }}
  {{ range .Params.tags }}
    &lt;li&gt; &lt;a href=&quot;{{ $baseurl }}/tags/{{ . | urlize }}&quot;&gt;{{ . }}&lt;/a&gt; - {{ $title }} &lt;/li&gt;
  {{ end }}
</code></pre>
<p>Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.</p>
<h1 id="hugo-parameters">Hugo Parameters</h1>
<p>Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.</p>
<h2 id="using-content-page-parameters">Using Content (page) Parameters</h2>
<p>In each piece of content you can provide variables to be used by the
templates. This happens in the <a href="/content/front-matter">front matter</a>.</p>
<p>An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&rsquo;t make a lot of sense. We&rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.</p>
<p>Here is the example front matter:</p>
<pre><code>---
title: &quot;Permalinks&quot;
date: &quot;2013-11-18&quot;
aliases:
  - &quot;/doc/permalinks/&quot;
groups: [&quot;extras&quot;]
groups_weight: 30
notoc: true
---
</code></pre><p>Here is the corresponding code inside of the template:</p>
<pre><code>  {{ if not .Params.notoc }}
    &lt;div id=&quot;toc&quot; class=&quot;well col-md-4 col-sm-6&quot;&gt;
    {{ .TableOfContents }}
    &lt;/div&gt;
  {{ end }}
</code></pre>
<h2 id="using-site-config-parameters">Using Site (config) Parameters</h2>
<p>In your top-level configuration file (eg, <code>config.yaml</code>) you can define site
parameters, which are values which will be available to you in chrome.</p>
<p>For instance, you might declare:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#66d9ef">params</span>:
  <span style="color:#66d9ef">CopyrightHTML</span>: <span style="color:#e6db74">&#34;Copyright &amp;#xA9; 2013 John Doe. All Rights Reserved.&#34;</span>
  <span style="color:#66d9ef">TwitterUser</span>: <span style="color:#e6db74">&#34;spf13&#34;</span>
  <span style="color:#66d9ef">SidebarRecentLimit</span>: <span style="color:#ae81ff">5</span>
</code></pre></div><p>Within a footer layout, you might then declare a <code>&lt;footer&gt;</code> which is only
provided if the <code>CopyrightHTML</code> parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again.  This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.</p>
<pre><code>{{if .Site.Params.CopyrightHTML}}&lt;footer&gt;
&lt;div class=&quot;text-center&quot;&gt;{{.Site.Params.CopyrightHTML | safeHtml}}&lt;/div&gt;
&lt;/footer&gt;{{end}}
</code></pre><p>An alternative way of writing the &ldquo;if&rdquo; and then referencing the same value
is to use &ldquo;with&rdquo; instead. With rebinds the context <code>.</code> within its scope,
and skips the block if the variable is absent:</p>
<pre><code>{{with .Site.Params.TwitterUser}}&lt;span class=&quot;twitter&quot;&gt;
&lt;a href=&quot;https://twitter.com/{{.}}&quot; rel=&quot;author&quot;&gt;
&lt;img src=&quot;/images/twitter.png&quot; width=&quot;48&quot; height=&quot;48&quot; title=&quot;Twitter: {{.}}&quot;
 alt=&quot;Twitter&quot;&gt;&lt;/a&gt;
&lt;/span&gt;{{end}}
</code></pre><p>Finally, if you want to pull &ldquo;magic constants&rdquo; out of your layouts, you can do
so, such as in this example:</p>
<pre><code>&lt;nav class=&quot;recent&quot;&gt;
  &lt;h1&gt;Recent Posts&lt;/h1&gt;
  &lt;ul&gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &lt;li&gt;&lt;a href=&quot;{{.RelPermalink}}&quot;&gt;{{.Title}}&lt;/a&gt;&lt;/li&gt;
  {{end}}&lt;/ul&gt;
&lt;/nav&gt;
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Débuter avec Hugo</title>
            <link>https://abdullah.today/debuter-avec-hugo/</link>
            <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/debuter-avec-hugo/</guid>
            <description>&lt;h2 id=&#34;étape-1-installer-hugo&#34;&gt;Étape 1. Installer Hugo&lt;/h2&gt;
&lt;p&gt;Allez sur la page de téléchargements de
&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;hugo&lt;/a&gt; et téléchargez la version
appropriée à votre système d&amp;rsquo;exploitation et votre architecture.&lt;/p&gt;
&lt;p&gt;Sauvegardez le fichier téléchargé à un endroit précis, afin de l&amp;rsquo;utiliser dans
l&amp;rsquo;étape suivante.&lt;/p&gt;
&lt;p&gt;Des informations plus complètes sont disponibles sur la page
&lt;a href=&#34;https://abdullah.today/overview/installing/&#34;&gt;installing hugo&lt;/a&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="étape-1-installer-hugo">Étape 1. Installer Hugo</h2>
<p>Allez sur la page de téléchargements de
<a href="https://github.com/spf13/hugo/releases">hugo</a> et téléchargez la version
appropriée à votre système d&rsquo;exploitation et votre architecture.</p>
<p>Sauvegardez le fichier téléchargé à un endroit précis, afin de l&rsquo;utiliser dans
l&rsquo;étape suivante.</p>
<p>Des informations plus complètes sont disponibles sur la page
<a href="/overview/installing/">installing hugo</a></p>
<h2 id="étape-2-compilez-la-documentation">Étape 2. Compilez la documentation</h2>
<p>Hugo possède son propre site d&rsquo;exemple qui se trouve être également le site que
vous lisez actuellement.</p>
<p>Suivez les instructions suivante :</p>
<ol>
<li>Clonez le <a href="http://github.com/spf13/hugo">dépôt de hugo</a></li>
<li>Allez dans ce dépôt</li>
<li>Lancez Hugo en mode serveur et compilez la documentation</li>
<li>Ouvrez votre navigateur sur http://localhost:1313</li>
</ol>
<p>Voici les commandes génériques correspondantes :</p>
<pre><code>git clone https://github.com/spf13/hugo
cd hugo
/chemin/ou/vous/avez/installe/hugo server --source=./docs
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Press ctrl+c to stop
</code></pre>
<p>Lorsque vous avez cela, continuez le reste de ce guide sur votre version locale.</p>
<h2 id="étape-3-changer-le-site-de-documentation">Étape 3. Changer le site de documentation</h2>
<p>Arrêtez le processus de Hugo en pressant ctrl+c.</p>
<p>Maintenant, nous allons relancer hugo, mais cette fois avec Hugo en mode de
surveillance.</p>
<pre><code>/chemin/vers/hugo/de/l-etape/1/hugo server --source=./docs --watch
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&gt; Press ctrl+c to stop
</code></pre>
<p>Ouvrez votre <a href="https://vim.spf13.com">éditeur favori</a> et changer l&rsquo;une des
sources des pages de contenu.
Open your <a href="http://vim.spf13.com">favorite editor</a> and change one of the source
content pages. Que diriez-vous de modifier ce fichier pour <em>résoudre une faute
de typo</em>.</p>
<p>Les fichiers de contenu peuvent être trouvés dans <code>docs/content/</code>. Sauf
indication contraire, les fichiers sont situés au même emplacement relatif que
l&rsquo;URL, dans notre cas <code>docs/content/overview/quickstart.md</code>.</p>
<p>Modifiez et sauvegardez ce fichier. Notez ce qu&rsquo;il se passe dans le terminal.</p>
<pre><code>&gt; Change detected, rebuilding site

&gt; 29 pages created
&gt; 0 tags index created
&gt; in 26 ms
</code></pre>
<p>Rechargez la page dans votre navigateur et voyez que le problème de typo est
maintenant résolu.</p>
<p>Notez à quel point cela a été rapide. Essayez de recharger le site avant qu&rsquo;il
soit fini de compiler.
Notice how quick that was. Try to refresh the site before it&rsquo;s finished
building. Je paris que vous n&rsquo;y arrivez pas.
Le fait d&rsquo;avoir des réactions presque instantanées vous permet d&rsquo;avoir votre
créativité fluide sans avoir à attendre de longues compilations.</p>
<h2 id="step-4-amusez-vous">Step 4. Amusez-vous</h2>
<p>Le meilleur moyen d&rsquo;apprendre quelque chose est de s&rsquo;amuser avec.</p>]]></content>
        </item>
        
        <item>
            <title>Getting Started with Hugo</title>
            <link>https://abdullah.today/posts/hugoisforlovers/</link>
            <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/posts/hugoisforlovers/</guid>
            <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
            <content type="html"><![CDATA[<h2 id="step-1-install-hugo">Step 1. Install Hugo</h2>
<p>Go to <a href="https://github.com/spf13/hugo/releases">Hugo releases</a> and download the
appropriate version for your OS and architecture.</p>
<p>Save it somewhere specific as we will be using it in the next step.</p>
<p>More complete instructions are available at <a href="https://gohugo.io/getting-started/installing/">Install Hugo</a></p>
<h2 id="step-2-build-the-docs">Step 2. Build the Docs</h2>
<p>Hugo has its own example site which happens to also be the documentation site
you are reading right now.</p>
<p>Follow the following steps:</p>
<ol>
<li>Clone the <a href="http://github.com/spf13/hugo">Hugo repository</a></li>
<li>Go into the repo</li>
<li>Run hugo in server mode and build the docs</li>
<li>Open your browser to http://localhost:1313</li>
</ol>
<p>Corresponding pseudo commands:</p>
<pre><code>git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Press ctrl+c to stop
</code></pre>
<p>Once you&rsquo;ve gotten here, follow along the rest of this page on your local build.</p>
<h2 id="step-3-change-the-docs-site">Step 3. Change the docs site</h2>
<p>Stop the Hugo process by hitting Ctrl+C.</p>
<p>Now we are going to run hugo again, but this time with hugo in watch mode.</p>
<pre><code>/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&gt; Press ctrl+c to stop
</code></pre>
<p>Open your <a href="http://vim.spf13.com">favorite editor</a> and change one of the source
content pages. How about changing this very file to <em>fix the typo</em>. How about changing this very file to <em>fix the typo</em>.</p>
<p>Content files are found in <code>docs/content/</code>. Unless otherwise specified, files
are located at the same relative location as the url, in our case
<code>docs/content/overview/quickstart.md</code>.</p>
<p>Change and save this file.. Notice what happened in your terminal.</p>
<pre><code>&gt; Change detected, rebuilding site

&gt; 29 pages created
&gt; 0 tags index created
&gt; in 26 ms
</code></pre>
<p>Refresh the browser and observe that the typo is now fixed.</p>
<p>Notice how quick that was. Try to refresh the site before it&rsquo;s finished building. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.</p>
<h2 id="step-4-have-fun">Step 4. Have fun</h2>
<p>The best way to learn something is to play with it.</p>
]]></content>
        </item>
        
        <item>
            <title>Introduction aux modèles (Hu)go</title>
            <link>https://abdullah.today/introduction-aux-modeles-hugo/</link>
            <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/introduction-aux-modeles-hugo/</guid>
            <description>Hugo utilise l&amp;rsquo;excellente librairie go html/template pour son moteur de modèles. c&amp;rsquo;est un moteur extrêmement léger qui offre un très petit nombre de fonctions logiques. À notre expérience, c&amp;rsquo;est juste ce qu&amp;rsquo;il faut pour créer un bon site web statique. Si vous avez déjà utilisé d&amp;rsquo;autre moteurs de modèles pour différents langages ou frameworks, vous allez retrouver beaucoup de similitudes avec les modèles go.
Ce document est une introduction sur l&amp;rsquo;utilisation de Go templates.</description>
            <content type="html"><![CDATA[<p>Hugo utilise l&rsquo;excellente librairie <a href="http://golang.org/">go</a> <a href="http://golang.org/pkg/html/template/">html/template</a> pour
son moteur de modèles. c&rsquo;est un moteur extrêmement léger qui offre un très petit
nombre de fonctions logiques. À notre expérience, c&rsquo;est juste ce qu&rsquo;il faut pour
créer un bon site web statique. Si vous avez déjà utilisé d&rsquo;autre moteurs de
modèles pour différents langages ou frameworks, vous allez retrouver beaucoup de
similitudes avec les modèles go.</p>
<p>Ce document est une introduction sur l&rsquo;utilisation de Go templates. La
<a href="http://golang.org/pkg/html/template/">documentation go</a> fourni plus de détails.</p>
<h2 id="introduction-aux-modèles-go">Introduction aux modèles Go</h2>
<p>Go templates fournit un langage de modèles très simple. Il adhère à la
conviction que les modèles ou les vues doivent avoir une logique des plus
élémentaires. L&rsquo;une des conséquences de cette simplicité est que les modèles
seront plus rapides a être analysés.</p>
<p>Une caractéristique unique de Go templates est qu&rsquo;il est conscient du contenu.
Les variables et le contenu va être nettoyé suivant le contexte d&rsquo;utilisation.
Plus de détails sont disponibles dans la <a href="http://golang.org/pkg/html/template/">documentation go</a>.</p>
<h2 id="syntaxe-basique">Syntaxe basique</h2>
<p>Les modèles en langage Go sont des fichiers HTML avec l&rsquo;ajout de variables et
fonctions.</p>
<p><strong>Les variables Go et les fonctions sont accessibles avec {{ }}</strong></p>
<p>Accès à une variable prédéfinie &ldquo;foo&rdquo;:</p>
<pre><code>{{ foo }}
</code></pre>
<p><strong>Les paramètres sont séparés par des espaces</strong></p>
<p>Appel de la fonction add avec 1 et 2 en argument**</p>
<pre><code>{{ add 1 2 }}
</code></pre>
<p><strong>Les méthodes et les champs sont accessibles par un point</strong></p>
<p>Accès au paramètre de la page &ldquo;bar&rdquo;</p>
<pre><code>{{ .Params.bar }}
</code></pre>
<p><strong>Les parenthèses peuvent être utilisées pour grouper des éléments ensemble</strong></p>
<pre><code>{{ if or (isset .Params &quot;alt&quot;) (isset .Params &quot;caption&quot;) }} Caption {{ end }}
</code></pre><h2 id="variables">Variables</h2>
<p>Chaque modèle go a une structure (objet) mis à sa disposition. Avec Hugo, à
chaque modèle est passé soit une page, soit une structure de nœud, suivant quel
type de page vous rendez. Plus de détails sont disponibles sur la page des
<a href="/layout/variables">variables</a>.</p>
<p>Une variable est accessible par son nom.</p>
<pre><code>&lt;title&gt;{{ .Title }}&lt;/title&gt;
</code></pre>
<p>Les variables peuvent également être définies et appelées.</p>
<pre><code>{{ $address := &quot;123 Main St.&quot;}}
{{ $address }}
</code></pre>
<h2 id="functions">Functions</h2>
<p>Go templace est livré avec quelques fonctions qui fournissent des
fonctionnalités basiques. Le système de Go template fourni également un
mécanisme permettant aux applications d&rsquo;étendre les fonctions disponible. Les
<a href="/layout/functions">fonctions de modèle Hugo</a> fourni quelques fonctionnalités
supplémentaires que nous espérons qu&rsquo;elles seront utiles pour vos sites web.
Les functions sont appelées en utilisant leur nom suivi par les paramètres
requis séparés par des espaces. Des fonctions de modèles ne peuvent pas être
ajoutées sans recompiler Hugo.</p>
<p><strong>Exemple:</strong></p>
<pre><code>{{ add 1 2 }}
</code></pre>
<h2 id="inclusions">Inclusions</h2>
<p>Lorsque vous incluez un autre modèle, vous devez y passer les données qu&rsquo;il sera
en mesure d&rsquo;accèder. Pour passer le contexte actuel, pensez à ajouter un point.
La localisation du modèle sera toujours à partir du répertoire /layout/ dans
Hugo.</p>
<p><strong>Exemple:</strong></p>
<pre><code>{{ template &quot;chrome/header.html&quot; . }}
</code></pre>
<h2 id="logique">Logique</h2>
<p>Go templates fourni les itérations et la logique conditionnèle des plus basique.</p>
<h3 id="itération">Itération</h3>
<p>Comme en go, les modèles go utilisent fortement <em>range</em> pour itérer dans une
map, un array ou un slice. Les exemples suivant montre différentes façons
d&rsquo;utiliser <em>range</em></p>
<p><strong>Exemple 1: En utilisant le context</strong></p>
<pre><code>{{ range array }}
    {{ . }}
{{ end }}
</code></pre>
<p><strong>Exemple 2: En déclarant un nom de variable</strong></p>
<pre><code>{{range $element := array}}
    {{ $element }}
{{ end }}
</code></pre>
<p><strong>Exemple 2: En déclarant un nom de varialbe pour la clé et la valeur</strong></p>
<pre><code>{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
</code></pre>
<h3 id="conditions">Conditions</h3>
<p><em>If</em>, <em>else</em>, <em>with</em>, <em>or</em>, <em>&amp;</em>, <em>and</em> fournissent la base pour la logique
conditionnelle avec Go templates. Comme <em>range</em>, chaque déclaration est fermé
avec <code>end</code>.</p>
<p>Go templates considère les valeurs suivante comme <em>false</em> :</p>
<ul>
<li>false</li>
<li>0</li>
<li>tout array, slice, map ou chaine d&rsquo;une longueur de zéro</li>
</ul>
<p><strong>Exemple 1: If</strong></p>
<pre><code>{{ if isset .Params &quot;title&quot; }}&lt;h4&gt;{{ index .Params &quot;title&quot; }}&lt;/h4&gt;{{ end }}
</code></pre>
<p><strong>Exemple 2: If -&gt; Else</strong></p>
<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{else}}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>
<p><strong>Exemple 3: And &amp; Or</strong></p>
<pre><code>{{ if and (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;))
    (isset .Params &quot;attr&quot;)}}
</code></pre><p><strong>Exemple 4: With</strong></p>
<p>Une manière alternative d&rsquo;écrire un &ldquo;if&rdquo; et de référencer cette même valeur est
d&rsquo;utiliser &ldquo;with&rdquo;. Cela permet de remplacer le contexte <code>.</code> par cet valeur et
saute le bloc si la variable est absente.</p>
<p>Le premier exemple peut être simplifié à ceci :</p>
<pre><code>{{ with .Params.title }}&lt;h4&gt;{{ . }}&lt;/h4&gt;{{ end }}
</code></pre>
<p><strong>Exemple 5: If -&gt; Else If</strong></p>
<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{ else if isset .Params &quot;caption&quot; }}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>
<h2 id="pipes"><em>Pipes</em></h2>
<p>L&rsquo;un des composants le plus puissant de Go templates est la capacité d&rsquo;empiler
les action l&rsquo;une après l&rsquo;autre. Cela est fait en utilisant les <em>pipes</em>.
Empruntés aux <em>pipes</em> unix, le concept est simple. Chaque sortie de <em>pipeline</em>
devient l&rsquo;entrée du <em>pipe</em> suivant.</p>
<p>À cause de la syntaxe très simple de Go templates, le <em>pipe</em> est essentiel pour
être capable d&rsquo;enchainer les appels de fonctions. Une limitation des <em>pipes</em>
est qu&rsquo;il ne peuvent fonctionner seulement avec une seule valeur et cette valeur
devient le dernier paramètre du prochain <em>pipeline</em>.</p>
<p>Quelques exemples simple devrait vous aider à comprendre comment utiliser les
<em>pipes</em>.</p>
<p><strong>Exemple 1 :</strong></p>
<pre><code>{{ if eq 1 1 }} Same {{ end }}
</code></pre>
<p>est identique à</p>
<pre><code>{{ eq 1 1 | if }} Same {{ end }}
</code></pre>
<p>Il semble étrange de placer le <em>if</em> à la fin, mais il fournit une bonne
illustration de la façon d&rsquo;utiliser les tuyaux.</p>
<p><strong>Exemple 2 :</strong></p>
<pre><code>{{ index .Params &quot;disqus_url&quot; | html }}
</code></pre>
<p>Accès au paramètre de page nommé &ldquo;disqus_url&rdquo; et échappement du HTML</p>
<p><strong>Exemple 3 :</strong></p>
<pre><code>{{ if or (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;))
    (isset .Params &quot;attr&quot;)}}
Stuff Here
{{ end }}
</code></pre><p>Peut être réécrit en</p>
<pre><code>{{  isset .Params &quot;caption&quot; | or isset .Params &quot;title&quot; |
    or isset .Params &quot;attr&quot; | if }}
Stuff Here
{{ end }}
</code></pre><h2 id="contexte-alias-le-point">Contexte (alias. le point)</h2>
<p>Le concept le plus facilement négligé pour comprendre les modèles go est que
{{ . }} fait toujours référence au contexte actuel. Dans le plus haut niveau de
votre modèle, ce sera l&rsquo;ensemble des données mis à votre disposition. Dans une
itération, ce sera la valeur de l&rsquo;élément actuel. Enfin, dans une boucle, le
contexte change. . ne fera plus référence aux données disponibles dans la page
entière. Si vous avez besoin y d&rsquo;accèder depuis l&rsquo;intérieur d&rsquo;une boucle, il est
judicieux d&rsquo;y définir comme variable au lieu de dépendre du contexte.</p>
<p><strong>Exemple:</strong></p>
<pre><code>{{ $title := .Site.Title }}
{{ range .Params.tags }}
&lt;li&gt; &lt;a href=&quot;{{ $baseurl }}/tags/{{ . | urlize }}&quot;&gt;
    {{ . }}&lt;/a&gt; - {{ $title }} &lt;/li&gt;
{{ end }}
</code></pre><p>Notez que, une fois que nous sommes entrés dans la boucle, la valeur de
{{ . }} a changée. Nous avons défini une variable en dehors de la boucle, afin
d&rsquo;y avoir accès dans la boucle.</p>
<h1 id="les-paramètres-dhugo">Les Paramètres d&rsquo;Hugo</h1>
<p>Hugo fournit l&rsquo;option de passer des valeurs au modèle depuis la configuration du
site, ou depuis les métadonnées de chaque partie du contenu. Vous pouvez définir
n&rsquo;importe quelle valeur de n&rsquo;importe quel type (supporté par votre section
liminaire / format de configuration) et les utiliser comme vous le souhaitez
dans votre modèle.</p>
<h2 id="utiliser-les-paramètres-de-contenu-page">Utiliser les paramètres de contenu (page)</h2>
<p>Dans chaque partie du contenu, vous pouvez fournir des variables pour être
utilisées par le modèle. Cela se passe dans la
<a href="/content/front-matter">section liminaire</a>.</p>
<p>Un exemple de cela est utilisé par ce site de documentation. La plupart des
pages bénéficient de la présentation de la table des matières. Quelques fois,
la table des matières n&rsquo;a pas beaucoup de sens. Nous avons défini une variable
dans notre section liminaire de quelques pages pour désactiver la table des
matières.</p>
<p>Ceci est un exemple de section liminaire :</p>
<pre><code>---
title: &quot;Permalinks&quot;
date: &quot;2013-11-18&quot;
aliases:
  - &quot;/doc/permalinks/&quot;
groups: [&quot;extras&quot;]
groups_weight: 30
notoc: true
---
</code></pre><p>Ceci est le code correspondant dans le modèle :</p>
<pre><code>  {{ if not .Params.notoc }}
    &lt;div id=&quot;toc&quot; class=&quot;well col-md-4 col-sm-6&quot;&gt;
    {{ .TableOfContents }}
    &lt;/div&gt;
  {{ end }}
</code></pre>
<h2 id="utiliser-les-paramètres-de-site-config">Utiliser les paramètres de site (config)</h2>
<p>Dans votre configuration de plus haut niveau (ex <code>config.yaml</code>), vous pouvez
définir des paramètres de site, dont les valeurs vous seront accessibles.</p>
<p>Pour les instances, vous pourriez délarer :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#66d9ef">params</span>:
  <span style="color:#66d9ef">CopyrightHTML</span>: <span style="color:#e6db74">&#34;Copyright &amp;#xA9; 2013 John Doe. All Rights Reserved.&#34;</span>
  <span style="color:#66d9ef">TwitterUser</span>: <span style="color:#e6db74">&#34;spf13&#34;</span>
  <span style="color:#66d9ef">SidebarRecentLimit</span>: <span style="color:#ae81ff">5</span>
</code></pre></div><p>Avec un pied de page, vous devriez déclarer un <code>&lt;footer&gt;</code> qui est affiché
seulement si le paramètre <code>CopyrightHTML</code> est déclaré, et si il l&rsquo;est, vous
devriez le déclarer comme HTML-safe, afin d&rsquo;éviter d&rsquo;échapper les entités HTML.
Cela vous permettra de le modifier facilement dans votre configuration au lieu
de le chercher dans votre modèle.</p>
<pre><code>{{if .Site.Params.CopyrightHTML}}&lt;footer&gt;
&lt;div class=&quot;text-center&quot;&gt;{{.Site.Params.CopyrightHTML | safeHtml}}&lt;/div&gt;
&lt;/footer&gt;{{end}}
</code></pre><p>Une alternative au &ldquo;if&rdquo; et d&rsquo;appeler la même valeur est d&rsquo;utiliser &ldquo;with&rdquo;. Cela
modifiera le contexte et passera le bloc si la variable est absente :</p>
<pre><code>{{with .Site.Params.TwitterUser}}&lt;span class=&quot;twitter&quot;&gt;
&lt;a href=&quot;https://twitter.com/{{.}}&quot; rel=&quot;author&quot;&gt;
&lt;img src=&quot;/images/twitter.png&quot; width=&quot;48&quot; height=&quot;48&quot; title=&quot;Twitter: {{.}}&quot;
 alt=&quot;Twitter&quot;&gt;&lt;/a&gt;
&lt;/span&gt;{{end}}
</code></pre><p>Enfin, si vous souhaitez extraire des &ldquo;constantes magiques&rdquo; de vos mises en
page, vous pouvez le faire comme dans l&rsquo;exemple suivant :</p>
<pre><code>&lt;nav class=&quot;recent&quot;&gt;
  &lt;h1&gt;Recent Posts&lt;/h1&gt;
  &lt;ul&gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &lt;li&gt;&lt;a href=&quot;{{.RelPermalink}}&quot;&gt;{{.Title}}&lt;/a&gt;&lt;/li&gt;
  {{end}}&lt;/ul&gt;
&lt;/nav&gt;
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Migrer vers Hugo depuis Jekyll</title>
            <link>https://abdullah.today/migrer-vers-hugo-depuis-jekyll/</link>
            <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
            
            <guid>https://abdullah.today/migrer-vers-hugo-depuis-jekyll/</guid>
            <description>&lt;h2 id=&#34;déplacez-le-contenu-statique-vers-static&#34;&gt;Déplacez le contenu statique vers &lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Jekyll a une règle comme quoi tout répertoire qui ne commence pas par &lt;code&gt;_&lt;/code&gt; sera
copié tel-quel dans le répertoire &lt;code&gt;_site&lt;/code&gt;. Hugo garde tout le contenu statique
dans le répertoire &lt;code&gt;static&lt;/code&gt;. Vous devez donc déplacer tout ce type de contenu
là-dedans. Avec Jekylll, l&amp;rsquo;arborescence ressemblant à ceci :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ images/
        logo.png
&lt;/code&gt;&lt;/pre&gt;</description>
            <content type="html"><![CDATA[<h2 id="déplacez-le-contenu-statique-vers-static">Déplacez le contenu statique vers <code>static</code></h2>
<p>Jekyll a une règle comme quoi tout répertoire qui ne commence pas par <code>_</code> sera
copié tel-quel dans le répertoire <code>_site</code>. Hugo garde tout le contenu statique
dans le répertoire <code>static</code>. Vous devez donc déplacer tout ce type de contenu
là-dedans. Avec Jekylll, l&rsquo;arborescence ressemblant à ceci :</p>
<pre><code>▾ &lt;root&gt;/
    ▾ images/
        logo.png
</code></pre>
<p>doit devenir</p>
<pre><code>▾ &lt;root&gt;/
    ▾ static/
        ▾ images/
            logo.png
</code></pre>
<p>En outre, vous allez devoir déplacer tous les fichiers présents à la racine vers
le répertoire <code>static</code>.</p>
<h2 id="créez-votre-configuration-hugo">Créez votre configuration Hugo</h2>
<p>Hugo peut lire votre fichier de configuration au format JSON, YAML et TOML. Hugo
supporte également les paramètres de configuration. Plus d&rsquo;informations sur la
<a href="/overview/configuration/">documentation de configuration Hugo</a></p>
<h2 id="définiez-votre-répertoire-de-publication-sur-_site">Définiez votre répertoire de publication sur <code>_site</code></h2>
<p>La valeur par défaut pour Jekyll est d&rsquo;utiliser le répertoire <code>_site</code> pour
publier le contenu. Pour Hugo, le répertoire de publication est <code>public</code>. Si,
comme moi, vous avez [lié <code>_site</code> vers un sous-module git sur la branche
<code>gh-pages</code>](<a href="http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.ht">http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.ht</a>
ml), vous allez vouloir avoir quelques alternatives :</p>
<ol>
<li>
<p>Changez votre lien du sous-module <code>gh-pages</code> pour pointer sur public au lieu
de <code>_site</code> (recommendé).</p>
<pre><code> git submodule deinit _site
 git rm _site
 git submodule add -b gh-pages
     git@github.com:your-username/your-repo.git public
</code></pre>
</li>
<li>
<p>Ou modifiez la configuration de Hugo pour utiliser le répertoire <code>_site</code> au
lieu de <code>public</code>.</p>
<pre><code> {
     ..
     &quot;publishdir&quot;: &quot;_site&quot;,
     ..
 }
</code></pre>
</li>
</ol>
<h2 id="convertir-un-thème-jekyll-pour-hugo">Convertir un thème Jekyll pour Hugo</h2>
<p>C&rsquo;est la majeure partie du travail. La documentation est votre ami.
Vous devriez vous référer à [la documentation des thèmes de Jekyll]
(<a href="http://jekyllrb.com/docs/templates/">http://jekyllrb.com/docs/templates/</a>) si vous devez vous rafraîchir la mémoire
sur la façon dont vous avez construit votre blog et [les thèmes de Hugo]
(/layout/templates/) pour apprendre la manière de faire sur Hugo.</p>
<p>Pour vous donner un point de référence, la conversion du thème pour
<a href="http://heyitsalex.net/">heyitsalex.net</a> ne m&rsquo;a pris que quelques heures.</p>
<h2 id="convertir-les-extensions-jekyll-vers-des-shortcodes-hugo">Convertir les extensions Jekyll vers des shortcodes Hugo</h2>
<p>Jekyll support les <a href="http://jekyllrb.com/docs/plugins/">extensions</a>; Hugo lui a
les <a href="/doc/shortcodes/">shortcodes</a>. C&rsquo;est assez banal les porter.</p>
<h3 id="implémentation">Implémentation</h3>
<p>Comme exemple, j&rsquo;utilise une extension pour avoir un [<code>image_tag</code>](https://githu
b.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc
06908ec/_plugins/image_tag.rb) presonnalisé pour générer les images avec une
légende sur Jekyll. J&rsquo;ai vu que Hugo implémente un shortcode qui fait exactement
la même chose.</p>
<p>Extension Jekyll :</p>
<pre><code>module Jekyll
  class ImageTag &lt; Liquid::Tag
    @url = nil
    @caption = nil
    @class = nil
    @link = nil
    // Patterns
    IMAGE_URL_WITH_CLASS_AND_CAPTION =
    IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK =
        /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&quot;(.*?)&quot;(\s+)-&gt;
        ((https?:\/\/|\/)(\S+))(\s*)/i
    IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&quot;(.*?)&quot;/i
    IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
    IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
    def initialize(tag_name, markup, tokens)
      super
      if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
        @class   = $1
        @url     = $3
        @caption = $7
        @link = $9
      elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
        @class   = $1
        @url     = $3
        @caption = $7
      elsif markup =~ IMAGE_URL_WITH_CAPTION
        @url     = $1
        @caption = $5
      elsif markup =~ IMAGE_URL_WITH_CLASS
        @class = $1
        @url   = $3
      elsif markup =~ IMAGE_URL
        @url = $1
      end
    end
    def render(context)
      if @class
        source = &quot;&lt;figure class='#{@class}'&gt;&quot;
      else
        source = &quot;&lt;figure&gt;&quot;
      end
      if @link
        source += &quot;&lt;a href=\&quot;#{@link}\&quot;&gt;&quot;
      end
      source += &quot;&lt;img src=\&quot;#{@url}\&quot;&gt;&quot;
      if @link
        source += &quot;&lt;/a&gt;&quot;
      end
      source += &quot;&lt;figcaption&gt;#{@caption}&lt;/figcaption&gt;&quot; if @caption
      source += &quot;&lt;/figure&gt;&quot;
      source
    end
  end
end
Liquid::Template.register_tag('image', Jekyll::ImageTag)
</code></pre><p>Écrite en tant que shortcode Hugo:</p>
<pre><code>&lt;!-- image --&gt;
&lt;figure {{ with .Get &quot;class&quot; }}class=&quot;{{.}}&quot;{{ end }}&gt;
    {{ with .Get &quot;link&quot;}}&lt;a href=&quot;{{.}}&quot;&gt;{{ end }}
        &lt;img src=&quot;{{ .Get &quot;src&quot; }}&quot;
            {{ if or (.Get &quot;alt&quot;) (.Get &quot;caption&quot;) }}
                alt=&quot;{{ with .Get &quot;alt&quot;}}
                        {{.}}
                     {{else}}
                        {{ .Get &quot;caption&quot; }}
                     {{ end }}&quot;
               {{ end }} /&gt;
    {{ if .Get &quot;link&quot;}}&lt;/a&gt;{{ end }}
    {{ if or (or (.Get &quot;title&quot;) (.Get &quot;caption&quot;)) (.Get &quot;attr&quot;)}}
    &lt;figcaption&gt;{{ if isset .Params &quot;title&quot; }}
        {{ .Get &quot;title&quot; }}{{ end }}
        {{ if or (.Get &quot;caption&quot;) (.Get &quot;attr&quot;)}}&lt;p&gt;
        {{ .Get &quot;caption&quot; }}
        {{ with .Get &quot;attrlink&quot;}}&lt;a href=&quot;{{.}}&quot;&gt; {{ end }}
            {{ .Get &quot;attr&quot; }}
        {{ if .Get &quot;attrlink&quot;}}&lt;/a&gt; {{ end }}
        &lt;/p&gt; {{ end }}
    &lt;/figcaption&gt;
    {{ end }}
&lt;/figure&gt;
&lt;!-- image --&gt;
</code></pre><h3 id="utilisation">Utilisation</h3>
<p>J&rsquo;ai simplement changé :</p>
<pre><code>{% image
    full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg
    &quot;One of my favorite touristy-type photos. I secretly waited for the
    good light while we were &quot;having fun&quot; and took this. Only regret: a
    stupid pole in the top-left corner of the frame I had to clumsily get
    rid of at post-processing.&quot;
    -&gt;http://www.flickr.com/photos/alexnormand/4829260124/in/
        set-72157624547713078/ %}
</code></pre><p>pour cela (cet exemple utilise une version légèrement étendue nommée <code>fig</code>,
différente de la <code>figure</code> intégrée) :</p>
<pre><code>{{% fig class=&quot;full&quot;
    src=&quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&quot;
    title=&quot;One of my favorite touristy-type photos. I secretly waited for the
    good light while we were having fun and took this. Only regret: a stupid
    pole in the top-left corner of the frame I had to clumsily get rid of at
    post-processing.&quot;
    link=&quot;http://www.flickr.com/photos/alexnormand/4829260124/in/
            set-72157624547713078/&quot; %}}
</code></pre><p>Comme bonus, les paramètres nommés des shortcodes sont plus lisibles.</p>
<h2 id="touches-finales">Touches finales</h2>
<h3 id="corriger-le-contenu">Corriger le contenu</h3>
<p>Suivant le nombre de modifications que vous avez effectué sur chaque articles
avec Jekyll, cette étape requierra plus ou moins d&rsquo;efforts. Il n&rsquo;y a pas de
règles rigoureuses ici, si ce n&rsquo;est que <code>hugo server --watch</code> est votre ami.
Testez vos modifications et corrigez les erreurs au besoin.</p>
<h3 id="nettoyez-le-tout">Nettoyez le tout</h3>
<p>Vous voudrez sûrement supprimer votre configuration Jekyll maintenant que tout
est fini. Exact, pensez à supprimer tout ce qui est inutilisé.</p>
<h2 id="un-exemple-pratique">Un exemple pratique</h2>
<p><a href="http://heyitsalex.net/">Hey, it&rsquo;s Alex</a> a été migré de Jekyll vers Hugo en
moins de temps qu&rsquo;une journée père enfant. Vous pouvez trouver toutes les
modification en regardant ce [diff](<a href="https://github.com/alexandre-normand/alexand">https://github.com/alexandre-normand/alexand</a>
re-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a&hellip;b7f6605b1265e83b4b
81495423294208cc74d610).</p>]]></content>
        </item>
        
    </channel>
</rss>
