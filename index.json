[{"categories":null,"content":"Surah Fateha Ummul Kitab","date":"2020-05-28","objectID":"/quran/1/","tags":["shuraim","Quran","Fateha"],"title":"Surah Fateha","uri":"/quran/1/"},{"categories":null,"content":"Surah Fateha ","date":"2020-05-28","objectID":"/quran/1/:0:0","tags":["shuraim","Quran","Fateha"],"title":"Surah Fateha","uri":"/quran/1/"},{"categories":[],"content":"My OpenBSD dedicated dotfiles","date":"2021-02-08","objectID":"/openbsd-dedicated-dotfiles/","tags":["bsd","openbsd","dotfiles","openbsd on laptop","openbsd as daily driver"],"title":"Openbsd Dedicated Dotfiles","uri":"/openbsd-dedicated-dotfiles/"},{"categories":[],"content":"OpenBSD as new OS So I started using OpenBSD in start of 2021. My blog readers know I keep my dotfiles on Github/Gitlab. Most of the programs I have been using in past were okay with this change. But I had to configure many things. ","date":"2021-02-08","objectID":"/openbsd-dedicated-dotfiles/:0:1","tags":["bsd","openbsd","dotfiles","openbsd on laptop","openbsd as daily driver"],"title":"Openbsd Dedicated Dotfiles","uri":"/openbsd-dedicated-dotfiles/"},{"categories":[],"content":"New Dotfiles I created a new directory dot in my home dir. And cherry picked some of my old dots. But still that wasn’t enough. It took me 2 months to figure things out as per my liking. Still I haven’t ported all my dotfiles to OpenBSD. I have pushed my new dot directory to Git[hub,lab] as [Awan,Abdullah]/dot respectively. ","date":"2021-02-08","objectID":"/openbsd-dedicated-dotfiles/:0:2","tags":["bsd","openbsd","dotfiles","openbsd on laptop","openbsd as daily driver"],"title":"Openbsd Dedicated Dotfiles","uri":"/openbsd-dedicated-dotfiles/"},{"categories":[],"content":"Old Linux dotfiles Linux users still can find my dotfiles on Git[hub,lab] as [Awan,Abdullah]/cfg. ","date":"2021-02-08","objectID":"/openbsd-dedicated-dotfiles/:0:3","tags":["bsd","openbsd","dotfiles","openbsd on laptop","openbsd as daily driver"],"title":"Openbsd Dedicated Dotfiles","uri":"/openbsd-dedicated-dotfiles/"},{"categories":[],"content":"Honda CG125","date":"2021-02-01","objectID":"/honda125-2021/","tags":["honda","honda125","hondacg125","bike","ride"],"title":"Honda125 2021","uri":"/honda125-2021/"},{"categories":[],"content":"So here is new bike for 2021. Here are some pictures. I hope you’ll like them… Honda 125\" Honda 125 Honda 125\" Honda 125 Honda 125\" Honda 125 Honda 125\" Honda 125 Honda 125\" Honda 125 Honda 125\" Honda 125 Honda 125\" Honda 125 Honda 125\" Honda 125 Honda 125\" Honda 125 Honda 125\" Honda 125 Honda 125\" Honda 125 ","date":"2021-02-01","objectID":"/honda125-2021/:0:0","tags":["honda","honda125","hondacg125","bike","ride"],"title":"Honda125 2021","uri":"/honda125-2021/"},{"categories":null,"content":"About me.","date":"2021-01-30","objectID":"/about/","tags":["about","about me"],"title":"About","uri":"/about/"},{"categories":null,"content":"Hey, My name is Abdullah Khabir, aka AK and I’m a Cyber Security Professional. This website is a platform where I share my knowledge with the world. You can contact here. Here is my PGP key. -----BEGIN PGP PUBLIC KEY BLOCK----- mQINBFwrne8BEADWvEH4qgane335ATFjKGgTB11uLx12x/gCTyj/dBtrantCKr80 NR9K+SU+lkGuAg3x9Qa74FmKMn9iZZN515oULlk40UHZ9nFfgRSX2P2Cn60ZUr9x M8ERWdzhQnTwGU4Be2xRd+oki+Ey3SNU0Dv3gq2RyPh9llNeYoIsGELmuY6Ft7/z 0vX/XwkgWR8sY81F/zFeDCmRaUhRTPq/VxhkFaT080B3VAzbQE+hYAyO7Ftnpfke fYF6/zo8itpIESgrDm98xSRHwoElzvFhl+c7QhRIe2Ki6AxOExC+3IFEPrTdYwHr 6q99c/RGuQNyzQEkCLWFAZJb16WwjWUF7rVuyWH1Fp/yIsbuxNy4eL2iEGsh04iE nodMR/bwSChxHuLIqVRxNmN/a3vp35NqwkbBMCIk4rnCyT3Pkx5IbTvNA22Sr0r/ xHF4KnfKe4Kz24C/IKZjRAqPf5apHLVNprpAFDN3g+2xbRbMcTEHpSpvAoeF/eVC QhuHVmrk0EeYm1OVMbHdFp753su7yyj1g8S26Nk6PV1wr96rKVsN4SrgX/K3AJ7E VU1s0lLZrqOoCvnop6OOgcV5nJslvNdIyHIrJlADcHHw1lq/HjN6w0HKoR+Ea4+y byjA9w/NRKcMQ5R+d/RRVUaysjJUNJUCNrKDa7B3omf3iSMLfRwiAcIf5QARAQAB tCJBYmR1bGxhaCA8YWJkdWxsYWhAYWJkdWxsYWgudG9kYXk+iQJWBBMBCgBAAhsP Ah4BAheABwsHCAMJCgQFFQoJCAMFFgIDAQAWIQRpyHcg5QeG3x2F6l78WXiRXLx7 xwUCX+9xTAUJBaUG3QAKCRD8WXiRXLx7x4w5EADEJpvixP2cevmUyp9A8DfI3wIm qqRvnMrw2AknJMuDVt7k8IhDxJNfLt5pu1ECsBWAUDLmQUp2VCxEgoGdqNgrFoMl qc2pa5fVM6AeWT9w2uYvN2ml1YsP0MraWtXnOoY1xWz9cYMHVXYEEvjuPebQ/5H9 +PFXLd6kprX+4O5xTvoJyjKci5QJxklAwR/Zfgyoz+1twdXVDUdN3fd9zDUFoDNo 6etZLTro/hXljD6bbFEJ4Oo/Ycjab6+xvUqwjYEaRSyvCSIPHXubj0clgtc8YdwC Z4nZ9SZ3tMXj9MWFBpGqGgmqP4bvWJ+Btbj2LKs/iqB7wbGZfuU57hqepTJcAw8A Rd8NjlecBkmJmqOelsS2QVgTEA0f784+AdBuP6mUy31WzYwIr6YL5BrMXpFJmP/A P4vTfB0qvvtPPvLGriSld0+YBAQCDgfelhSD37B/91RzrZ2pfg709lSkzBjdh57S JMl6mmsq9/PaRKSMcluo9G1ZzwhY1V7++AosX0ge0MZJ/4iyVad/lDK0SpQbskk5 Naz0fhEWuOUsLKI/iQ9KAhB0BHuBUFGlUc1PuF2iSVXY+2Q+XCp27+NV8cWQk6g6 czITl/oWsE436PuD3OwJ1uBuEbNJF1vAWtlYye9vrPgni8qAS1H+fRIE+bCRlMgp L47ThF833kCMllSGF7kCDQRcK56JARAAsxM1v5HF1rAqmOnTthm7hdiFzzlKjUDu cfWqFkg94UalVG/5t89dCXAn889xOkAXyvYCd1GdyIXlxK2ZYE2qh2DLecceVKXg +htT0M2PD1tf5hd3gRi41XfnurPlHXv/yJpSyyBH+6rMIton/YfdnpBam48cU5ty gUmL9B+AcWYOortQKeEBIcK6IFDbtZL2Mx2hcX7Fuz5MwrTmnxuz4EZyME8yZMDW xafzwF4V5qevqpJCuIxfVRjs0aSn7++mPI0OvBn5AvKu5+3donmN1uADDAPE+D6w ElbhnTrt1bn8SHfJutOzCijL99LEU/f7h/QoZa7pO4W5KH1rxiZ1LN5MCZkWuLH9 BD+QL9kgHzOk0Lu6O+jAzEHYz+q2KxcsRLieUh30Gbj/EyymzsxpTRhm49Vi9pY0 nGsdoJ246gyQESEK5b5+wx+J2QLSiS2+G8EJ6SUP/XXKQf4y46RS50kUJh8Np2Rh AExmQbX+o4JIWmidUnlvQK20zqFdPc/8aUmqbei8cXA4DB18E/VZXw5X6+5U2roU hcmB2BeEp0epNmzKynjxT72Uei8k+Bi+homnY0s4rnXmiTtE7GakTwXHRqdq56mO I7XuGln/RmsxfKfwGwsmV5Pe7BVFkbywzMGkVwMCXpa1DbvX/PNOZHGLNh11iWmj moD2PZU4UU8AEQEAAYkEcgQYAQoAJgIbAhYhBGnIdyDlB4bfHYXqXvxZeJFcvHvH BQJf73FfBQkFpQZWAkDBdCAEGQEIAB0WIQQbCmo9QYYbdrf7Cp4JHpNRrLKBdgUC XCueiQAKCRAJHpNRrLKBdvO5D/9hFd1cRcX/SG5J+9Sv7uxaJXjVEVePkzzII6j2 FFji72ohFoigf3ycwWDO5GWVYZdQDO0d7uSNiyqzt1+0tRfgUA5QDlJsmCg5E83L yCimCjKAPm3OxMn6JuaUKHR9pYTlPEZWcI4Pqt64Tim8sNmEoSwQCeuLJf+1p7uH SwJnHRYAQ99cmaUw8kCgAz6njue771ZxF3HS2xXALiZUz4V0g9kcIh1P80VJpZ3Z ipAAD6TveuyGU3Y8aWD/5CHiN9uqA24J/d6WCuwZdRonHrdOubaYdsDlEejO6x3r k0KQZ3ODLeWrjsmvvlGs+m0/8/6mMs6+2vqJDzBgBGD94AY/4U0u/Pg1JX6Kvl14 sR+sCX5URzB+usQs7476nRzHUerQ/auz2BaCo1GcpN4nGgkJnqRgFRBTqyDCRWah XuxTEzMOd+GRU0q9N/C1kFMFMxRtCiEDyLEUhN6EgCPXOxvBaUc5JyJLJ3gKlJmS D7sPnBlNCtk4vVikgiWh9OeiGFEBqfgKRDmyxiGbbmOq4z+PQhwtGBpgAp3tviPW T5Ig/c2UFs6kNni8HjalVmMIpcDp4urOn51iIGtGqJ600j1f+hSD9cHaGtnDrP74 G+qNBLktKZ4b7zarNgwYKpB0g3ARMABHV+DKo7qwHKs4CSAC06Cz09wSsHBRtgv9 3TZwvwkQ/Fl4kVy8e8fn9RAAi9qiwc82mdDLwqW0XeGaOXfOw9BFDReWln6MaNlW vYptzvSoZf02h/pBq/dpvjDFwUTpfXevSwHBmfo1DcK5xPrFPLQYcKoa6Ab47YmR Cap5tOkDTcTA6pwmjJ11L4ccdLDl8/MF9v/J1ErLEObJUivFBmBnRJgHwcV0dZkB +MV8G9fU4oVp3yQ9NFeIwobooM872O5DQtAmPBP8Sf+MMNchWDYIT+DLomqNpkWK ijF6aYm9KzLS14wvM1kU1n8PIH1aHmcMUwqtZyJcoYJtPKG4UsULlb8OL1jXjKFG aMjSamXlBfuifli1P0OL3wzrTkK6z0Lv6OKHA2grt9vEKw2c14RMikvLDXdF0Fz0 bRJVZAfkgZo/XCA5WXKQ/F1EOaEK4H8qjOs6P+3OnWLlZls1mKUYhEFD6+xMaNMB 9Sr9blmjRvGEYWZ12yX/l22feaxm/H+atgFzB5kEB38q49tI3pdc7NA5K8TKEuuN oYcHeyzwC9YfdOKxdJ0XS6I8DT7hLh4TrPJU4WdCZPRgqncjoF1D0bRXO/BsfI9H 0BZgq2gHIZEkcfo6cAhUa0ghhaUS2P88gQKp4WryCvLEtTnINTac1mNsSZKxwfon 7m","date":"2021-01-30","objectID":"/about/:0:0","tags":["about","about me"],"title":"About","uri":"/about/"},{"categories":null,"content":"Unlike other operating systems, in linux everything starts from /. This is called root directory. You can use cd command to navigate in filesystem. If you’re inside some directory and you want to know where you’re inside the directory tree, just type pwd and it will show you the current working directory. pwd stands for print working directory. cd command needs some arguments if you want to visit some other directory. By default if you don’t provide it some arguments, it will change the directory to user home directory. If you start a terminal emulator or a virtual console, it starts inside user home directory be default as well. cd needs a pathname if you want to change directory to some directory inside the filesystem. A pathname is a route to that directory. There are two types of pathnames. ","date":"2020-12-17","objectID":"/linux-filesystem-directory-structure/:0:0","tags":["linux filesystem directory structure","filesystem","pathnames","absolute pathnames","relative pathnames"],"title":"Linux Filesystem Directory Structure","uri":"/linux-filesystem-directory-structure/"},{"categories":null,"content":"Absolute Pathnames An absolute pathname starts from root directory /. For example if you want to visit /usr/bin, you type / first. Then the directory name. Absolute pathnames are complete paths starting from / (where filesystem begins) to the file or directory. ","date":"2020-12-17","objectID":"/linux-filesystem-directory-structure/:0:1","tags":["linux filesystem directory structure","filesystem","pathnames","absolute pathnames","relative pathnames"],"title":"Linux Filesystem Directory Structure","uri":"/linux-filesystem-directory-structure/"},{"categories":null,"content":"Relative pathnames Unlike absolute pathname, relative pathnames start from current working directory (pwd). If you’re in /var/log directory, and you want to visit journal directory which is a child directory of current working directory, you type cd journal. If you want to visit the parent directory of current working directory which in this case is /var, just type, cd ../var. I have a YouTube video tutorial on this topic as well. ","date":"2020-12-17","objectID":"/linux-filesystem-directory-structure/:0:2","tags":["linux filesystem directory structure","filesystem","pathnames","absolute pathnames","relative pathnames"],"title":"Linux Filesystem Directory Structure","uri":"/linux-filesystem-directory-structure/"},{"categories":null,"content":"Yeah, you can send mail from your gmail account using command line. ","date":"2020-11-29","objectID":"/send-mail-using-gmail-from-terminal/:0:0","tags":["mail","gmail","msmtp","mutt","terminal","suckless"],"title":"Send Mail Using Gmail using Command Line","uri":"/send-mail-using-gmail-from-terminal/"},{"categories":null,"content":"Requirements You have two options here. ","date":"2020-11-29","objectID":"/send-mail-using-gmail-from-terminal/:0:1","tags":["mail","gmail","msmtp","mutt","terminal","suckless"],"title":"Send Mail Using Gmail using Command Line","uri":"/send-mail-using-gmail-from-terminal/"},{"categories":null,"content":"Gmail account settings Either enable less secure apps in your Google account or Generate an app password. ","date":"2020-11-29","objectID":"/send-mail-using-gmail-from-terminal/:0:2","tags":["mail","gmail","msmtp","mutt","terminal","suckless"],"title":"Send Mail Using Gmail using Command Line","uri":"/send-mail-using-gmail-from-terminal/"},{"categories":null,"content":"Tools being used For Arch Linux: $ sudo pacman -S msmtp For Debian, Ubuntu and other Debian derived distributions: $ sudo apt install -y msmtp For Fedora, CentOS, Redhat etc: $ sudo dnf install msmtp ","date":"2020-11-29","objectID":"/send-mail-using-gmail-from-terminal/:0:3","tags":["mail","gmail","msmtp","mutt","terminal","suckless"],"title":"Send Mail Using Gmail using Command Line","uri":"/send-mail-using-gmail-from-terminal/"},{"categories":null,"content":"Encrypt password Using gpg, we are going to encrypt our password. I have a detailed video tutorial on gpg if you’re interested. $ gpg -er 'your gpg keyID' -o ~/.gmail-password.gpg - Now enter the password for your gmail from first step. Once done, enter Ctrl + D. ","date":"2020-11-29","objectID":"/send-mail-using-gmail-from-terminal/:0:4","tags":["mail","gmail","msmtp","mutt","terminal","suckless"],"title":"Send Mail Using Gmail using Command Line","uri":"/send-mail-using-gmail-from-terminal/"},{"categories":null,"content":"Configure msmtp Paste this into ~/.msmtprc or if you want msmtp system wide so any user on this system can use this gmail account to send mails, copy it to /etc/msmtprc. defaults auth on tls on tls_starttls on tls_trust_file /etc/ssl/certs/ca-certificates.crt logfile ~/.msmtp.log account myaccount host smtp.gmail.com port 587 from your_gmail_address user your_gmail_address passwordeval \"echo $(gpg --batch -q --decrypt ~/.gmail-password.gpg)\" account default: myaccount Replace your_gmail_address with your gmail address. Voila. ","date":"2020-11-29","objectID":"/send-mail-using-gmail-from-terminal/:0:5","tags":["mail","gmail","msmtp","mutt","terminal","suckless"],"title":"Send Mail Using Gmail using Command Line","uri":"/send-mail-using-gmail-from-terminal/"},{"categories":null,"content":"Send a test mail We are done now. Just send a test mail now. $ echo \"Just a test mail\" | msmtp -a default 'some email address' ","date":"2020-11-29","objectID":"/send-mail-using-gmail-from-terminal/:0:6","tags":["mail","gmail","msmtp","mutt","terminal","suckless"],"title":"Send Mail Using Gmail using Command Line","uri":"/send-mail-using-gmail-from-terminal/"},{"categories":null,"content":"Use with mutt You can use this msmtp setup with mutt which is suck less mail client and runs in a terminal. I have a detailed video tutorial on mutt here. Thanks for reading. ","date":"2020-11-29","objectID":"/send-mail-using-gmail-from-terminal/:0:7","tags":["mail","gmail","msmtp","mutt","terminal","suckless"],"title":"Send Mail Using Gmail using Command Line","uri":"/send-mail-using-gmail-from-terminal/"},{"categories":null,"content":"SSH login without password? Yeah you heard it right. Today I’m going to teach you how you can enable passwordless authentication in ssh. You can login to your linux servers without password. How? Keep reading… Edit the SSH main configuration file. $ sudo vi /etc/ssh/sshd_config ... PubkeyAuthentication yes ... Edit this line. If you see no, change it to yes. If this line is commented out, uncomment it. Restart ssh. $ sudo systemctl restart sshd In local client, create a new ssh key if you don’t have one. $ ssh-keygen Hit enter to all questions. Now copy your public key and upload it to your server’s user’s home directory’s .ssh directory. $ ssh-copy-id user@remote_host Now you can login to your server without even asking for a password. Here is a YouTube demonstration video. Thanks for reading. ","date":"2020-10-06","objectID":"/ssh-passwordless-authentication/:0:1","tags":["ssh","passwordless authentication","login","pubkey authentication"],"title":"SSH Passwordless Authentication","uri":"/ssh-passwordless-authentication/"},{"categories":null,"content":"There are times you want to share your android phone’s screen with your Linux/Windows desktop. Like if you have got broken screen or for some purpose. So this post may help you. ","date":"2020-09-15","objectID":"/how-to-share-android-screen/:0:0","tags":["android","adb","scrcpy","android-debugging","screensharing","screen sharing","android debugging bride"],"title":"How to Share Android Screen","uri":"/how-to-share-android-screen/"},{"categories":null,"content":"Requirements Android phone ADB installed In Arch Linux, you can install ADB with: $ sudo pacman -S android-tools There is a program which is used to screen sharing. You can install it using AUR in Arch Linux, use apt if you are using Ubuntu/Debian. It’s called scrcpy in repositories. For Arch Linux, you can go to this link. And here is the Windows link. Once installed, enable USB debugging,plug your android device. And run: $ scrcpy Scrcpy has many options which you can explore like this: $ scrcpy --help Usage: scrcpy [options] Options: --always-on-top Make scrcpy window always on top (above other windows). -b, --bit-rate value Encode the video at the given bit-rate, expressed in bits/s. Unit suffixes are supported: 'K' (x1000) and 'M' (x1000000). Default is 8000000. --codec-options key[:type]=value[,...] Set a list of comma-separated key:type=value options for the device encoder. The possible values for 'type' are 'int' (default), 'long', 'float' and 'string'. The list of possible codec options is available in the Android documentation: \u003chttps://d.android.com/reference/android/media/MediaFormat\u003e --crop width:height:x:y Crop the device screen on the server. The values are expressed in the device natural orientation (typically, portrait for a phone, landscape for a tablet). Any --max-size value is computed on the cropped size. --display id Specify the display id to mirror. The list of possible display ids can be listed by: adb shell dumpsys display (search \"mDisplayId=\" in the output) Default is 0. --force-adb-forward Do not attempt to use \"adb reverse\" to connect to the the device. -f, --fullscreen Start in fullscreen. -h, --help Print this help. --lock-video-orientation value Lock video orientation to value. Possible values are -1 (unlocked), 0, 1, 2 and 3. Natural device orientation is 0, and each increment adds a 90 degrees rotation counterclockwise. Default is -1 (unlocked). --max-fps value Limit the frame rate of screen capture (officially supported ince Android 10, but may work on earlier versions). -m, --max-size value Limit both the width and height of the video to value. The other dimension is computed so that the device aspect-ratio is preserved. Default is 0 (unlimited). -n, --no-control Disable device control (mirror the device in read-only). -N, --no-display Do not display device (only when screen recording is enabled). --no-mipmaps If the renderer is OpenGL 3.0+ or OpenGL ES 2.0+, then mipmaps are automatically generated to improve downscaling quality. This option disables the generation of mipmaps. -p, --port port[:port] Set the TCP port (range) used by the client to listen. Default is 27183:27199. --prefer-text Inject alpha characters and space as text events instead of key events. This avoids issues when combining multiple keys to enter a special character, but breaks the expected behavior of alpha keys in games (typically WASD). --push-target path Set the target directory for pushing files to the device by drag \u0026 drop. It is passed as-is to \"adb push\". Default is \"/sdcard/\". -r, --record file.mp4 Record screen to file. The format is determined by the --record-format option if set, or by the file extension (.mp4 or .mkv). --record-format format Force recording format (either mp4 or mkv). --render-driver name Request SDL to use the given render driver (this is just a hint). Supported names are currently \"direct3d\", \"opengl\", \"opengles2\", \"opengles\", \"metal\" and \"software\". \u003chttps://wiki.libsdl.org/SDL_HINT_RENDER_DRIVER\u003e --render-expired-frames By default, to minimize latency, scrcpy always renders the last available decoded frame, and drops any previous ones. This flag forces to render all frames, at a cost of a possible increased latency. --rotation value Set the initial display rotation. Possibles values are 0, 1, 2 and 3. Each increment adds a 90 degrees rotation counterclockwise. -s, --serial serial The device serial number. Mandatory only if several devices are connected to adb. -S, --turn-screen-off Turn","date":"2020-09-15","objectID":"/how-to-share-android-screen/:1:0","tags":["android","adb","scrcpy","android-debugging","screensharing","screen sharing","android debugging bride"],"title":"How to Share Android Screen","uri":"/how-to-share-android-screen/"},{"categories":null,"content":"Getting Kalilinux image Go to Downloads and download latest live image. Make sure you don’t download the installer image. ","date":"2020-07-14","objectID":"/kalilinux-persistence/:1:0","tags":["kali linux","kali linux persistence","usb","linux in usb","bootable"],"title":"Kalilinux Persistence","uri":"/kalilinux-persistence/"},{"categories":null,"content":"Make USB bootable Use dd to write the kali image to USB. In linux environment: # dd if=kali-linux-xxxx.x-live-amd64.iso of=/dev/sdX status=progress bs=4M Replace kali-linux-xxxx.x-live-amd64.iso with downloaded iso iamge path and /dev/sdX with path of your USB device. You can find USB path by running lsblk in terminal. Make sure you don’t select the existing linux installation drive. ","date":"2020-07-14","objectID":"/kalilinux-persistence/:2:0","tags":["kali linux","kali linux persistence","usb","linux in usb","bootable"],"title":"Kalilinux Persistence","uri":"/kalilinux-persistence/"},{"categories":null,"content":"Create persistence partition Create a primary partition with fdisk: # fdisk /dev/sdx Welcome to fdisk (util-linux 2.35.2). Changes will remain in memory only, until you decide to write them. Be careful before using the write command. The device contains 'iso9660' signature and it will be removed by a write command. See fdisk(8) man page and --wipe option for more details. Command (m for help): n Partition type p primary (3 primary, 0 extended, 1 free) e extended (container for logical partitions) Select (default e):p Selected partition 3 Press n to create a new partition. Type p to make it primary. Hit enter twice so all the remaining space would be allocated to new partition. Type w to write changes to USB drive. ","date":"2020-07-14","objectID":"/kalilinux-persistence/:3:0","tags":["kali linux","kali linux persistence","usb","linux in usb","bootable"],"title":"Kalilinux Persistence","uri":"/kalilinux-persistence/"},{"categories":null,"content":"Create filesystem Create ext4 filesystem in new partition. # mkfs.ext4 /dev/sdX3 -L persistence # e2label /dev/sdX3 persistence ","date":"2020-07-14","objectID":"/kalilinux-persistence/:4:0","tags":["kali linux","kali linux persistence","usb","linux in usb","bootable"],"title":"Kalilinux Persistence","uri":"/kalilinux-persistence/"},{"categories":null,"content":"Mount new partition Mount the new created partition somewhere in your filesystem. # mount /dev/sdX3 /mnt ","date":"2020-07-14","objectID":"/kalilinux-persistence/:5:0","tags":["kali linux","kali linux persistence","usb","linux in usb","bootable"],"title":"Kalilinux Persistence","uri":"/kalilinux-persistence/"},{"categories":null,"content":"Create configuration Create a configuration file in new partition which we mounted earlier at /mnt: # echo \"/ union\" \u003e /mnt/persistence.conf ","date":"2020-07-14","objectID":"/kalilinux-persistence/:6:0","tags":["kali linux","kali linux persistence","usb","linux in usb","bootable"],"title":"Kalilinux Persistence","uri":"/kalilinux-persistence/"},{"categories":null,"content":"Un-mount the partition Un-mount the partition. # umount /dev/sdX3 ","date":"2020-07-14","objectID":"/kalilinux-persistence/:7:0","tags":["kali linux","kali linux persistence","usb","linux in usb","bootable"],"title":"Kalilinux Persistence","uri":"/kalilinux-persistence/"},{"categories":null,"content":"Reboot Reboot and press your hardware dedicated button to boot from new created USB. Don’t forget to select the persistence option from Kali menu. Thanks for reading. 😉 ","date":"2020-07-14","objectID":"/kalilinux-persistence/:8:0","tags":["kali linux","kali linux persistence","usb","linux in usb","bootable"],"title":"Kalilinux Persistence","uri":"/kalilinux-persistence/"},{"categories":null,"content":"How to configure git first time","date":"2020-07-12","objectID":"/configure-git/","tags":["git","initial git setup","git configuration"],"title":"Git Initial Setup","uri":"/configure-git/"},{"categories":null,"content":"How to configure Git Git is a version control system by Linus Torvalds, same person who wrote linux kernel. ","date":"2020-07-12","objectID":"/configure-git/:0:0","tags":["git","initial git setup","git configuration"],"title":"Git Initial Setup","uri":"/configure-git/"},{"categories":null,"content":"Installation In Archlinux, you can install git by: $ sudo pacman -S git In Debian and derived distributions: $ sudo apt install -y git ","date":"2020-07-12","objectID":"/configure-git/:0:1","tags":["git","initial git setup","git configuration"],"title":"Git Initial Setup","uri":"/configure-git/"},{"categories":null,"content":"Configuration You have to tell git about the author who committed changes so lets do it. ","date":"2020-07-12","objectID":"/configure-git/:0:2","tags":["git","initial git setup","git configuration"],"title":"Git Initial Setup","uri":"/configure-git/"},{"categories":null,"content":"Name and Email Tell git about your name and email: $ git config --global user.name 'Abdullah' $ git config --global user.email 'abdullah@abdullah.today' Replace Abdullah and with your name and abdullah@abdullah.today with your name and email. ","date":"2020-07-12","objectID":"/configure-git/:0:3","tags":["git","initial git setup","git configuration"],"title":"Git Initial Setup","uri":"/configure-git/"},{"categories":null,"content":"Signing key If you use gpg to sign the commits/tags, you have to tell git about your signing key. $ git config --global user.signingkey 'abdullah@abdullah.today' Replace abdullah@abdullah.today with your email address you used when creating gpg keypair. ","date":"2020-07-12","objectID":"/configure-git/:0:4","tags":["git","initial git setup","git configuration"],"title":"Git Initial Setup","uri":"/configure-git/"},{"categories":null,"content":"What is FQDN? FQDN stands for Fully Qualified Domain Name. It’s complete domain name for a computer or host on the internet. FQDN is made of two things: hostname and domain name. Let me give you an example for demonstration. FQDN for my mail server is myemailserver.abdullah.today. The hostname is myemailserver. The domain is abdullah.today. ","date":"2020-06-21","objectID":"/fqdn/:0:1","tags":["fqdn","hostname"],"title":"How to set FQDN in Linux","uri":"/fqdn/"},{"categories":null,"content":"Requirements You will need: IP Address Hostname FQDN ","date":"2020-06-21","objectID":"/fqdn/:1:0","tags":["fqdn","hostname"],"title":"How to set FQDN in Linux","uri":"/fqdn/"},{"categories":null,"content":"Edit hosts file Edit the /etc/hosts file and append this like this. # vim /etc/hosts ... 192.168.1.100 myemailserver.abdullah.today myemailserver ... :wq! Replace IP address with your host IP, hostname with what your want to set or what you already have set. ","date":"2020-06-21","objectID":"/fqdn/:2:0","tags":["fqdn","hostname"],"title":"How to set FQDN in Linux","uri":"/fqdn/"},{"categories":null,"content":"Edit hostname Edit /etc/hostname and replace with your new hostname if you want to change hostname as well. # vim /etc/hostname myemailserver :wq! Or you can use hostnamectl to set hostname. ","date":"2020-06-21","objectID":"/fqdn/:3:0","tags":["fqdn","hostname"],"title":"How to set FQDN in Linux","uri":"/fqdn/"},{"categories":null,"content":"A terminal multiplexer","date":"2020-06-06","objectID":"/tmux/","tags":["tmux","screen","multiplexer","console"],"title":"TMUX","uri":"/tmux/"},{"categories":null,"content":"TMUX tmux is a terminal multiplexer. You can run programs inside a tmux session, detach session and continue running programs in background, reattach later. ","date":"2020-06-06","objectID":"/tmux/:0:0","tags":["tmux","screen","multiplexer","console"],"title":"TMUX","uri":"/tmux/"},{"categories":null,"content":"Installation tmux is available in all linux distributions. You can install it using your distribution’s package manager. In Arch Linux: $ sudo pacman -S tmux ","date":"2020-06-06","objectID":"/tmux/:0:1","tags":["tmux","screen","multiplexer","console"],"title":"TMUX","uri":"/tmux/"},{"categories":null,"content":"Start You can start tmux by invoking tmux command inside your terminal. ","date":"2020-06-06","objectID":"/tmux/:0:2","tags":["tmux","screen","multiplexer","console"],"title":"TMUX","uri":"/tmux/"},{"categories":null,"content":"Keybindings The default modifier key is Ctrl + b followed by a key. Press Ctrl + b and then hit another key and tmux will get it. You can change the default keybindings in ~/.tmux.conf. $ vi ~/.tmux.conf ... unbind C-b set option -g prefix ` ... :wq Here I have removed the default prefix and have bounded “`” as prefix. I found it useful than default prefix. ","date":"2020-06-06","objectID":"/tmux/:0:3","tags":["tmux","screen","multiplexer","console"],"title":"TMUX","uri":"/tmux/"},{"categories":null,"content":"Detach session You can detach a tmux session by sending it Prefix followed by d. ","date":"2020-06-06","objectID":"/tmux/:0:4","tags":["tmux","screen","multiplexer","console"],"title":"TMUX","uri":"/tmux/"},{"categories":null,"content":"Re attach session You can reattach to a running tmux session by simply invoking tmux attach-session -t \u003ctarget_session\u003e. You can get session’s name using tmux ls. ","date":"2020-06-06","objectID":"/tmux/:0:5","tags":["tmux","screen","multiplexer","console"],"title":"TMUX","uri":"/tmux/"},{"categories":null,"content":"Windows By default, tmux will start a new window running a shell inside it. You can create new windows by pressing Prefix followed by c. You can go to next window by pressing Prefix followed by n. Or you can hit Prefix followed by w and tmux will show you windows opened and you can select which window you want to go to. To kill a window, go to the window and hit Prefix followed by x. ","date":"2020-06-06","objectID":"/tmux/:0:6","tags":["tmux","screen","multiplexer","console"],"title":"TMUX","uri":"/tmux/"},{"categories":null,"content":"Panes ;(adsbygoogle = window.adsbygoogle || []).push({}) A window can have multiple panes. To split current window into two panes horizontally, hit Prefix followed by %. To split current window into two panes vertically, hit Prefix followed by \". To go to next pane, hit Prefix followed by o. To toggle between panes, hit Prefix followed by ;. To kill a pane you’re inside, hit Prefix followed by x. ","date":"2020-06-06","objectID":"/tmux/:0:7","tags":["tmux","screen","multiplexer","console"],"title":"TMUX","uri":"/tmux/"},{"categories":null,"content":"My tmux.conf ;(adsbygoogle = window.adsbygoogle || []).push({}) Below is my customized tmux.conf. You can copy and then customize it to your needs, its well documented with comments. $ cat ~/.tmux.conf # ██████████ ████ ████ ██ ██ ██ ██ # ░░░░░██░░░ ░██░██ ██░██░██ ░██░░██ ██ # ░██ ░██░░██ ██ ░██░██ ░██ ░░██ ██ # ░██ ░██ ░░███ ░██░██ ░██ ░░███ # ░██ ░██ ░░█ ░██░██ ░██ ██░██ # ░██ ░██ ░ ░██░██ ░██ ██ ░░██ # ░██ ░██ ░██░░███████ ██ ░░██ # ░░ ░░ ░░ ░░░░░░░ ░░ ░░ # # ▓▓▓▓▓▓▓▓▓▓ # ░▓ Author ▓ AK \u003cabdullah@abdullah.today\u003e # ░▓▓▓▓▓▓▓▓▓▓ # ░░░░░░░░░░ # source powerline source /usr/lib/python3.8/site-packages/powerline/bindings/tmux/powerline.conf # Custom Prefix unbind C-b set-option -g prefix ` bind ` send-prefix # Shell set -g default-command /bin/zsh set -g default-shell /bin/zsh # utf-8 support in status bar #set -g status-utf8 on # Reload the config bind r source-file ~/.tmux.conf \\; display \"~/.tmux.conf reloaded\" # Synchronize panes bind e setw synchronize-panes \\; display \"synchronize mode\" # Splits unbind % unbind '\"' bind h split-window -v bind v split-window -h #bind -n M-h send-keys # enable vi-mode setw -g mode-keys vi set -g status-keys vi # copy paste unbind [ bind Escape copy-mode unbind p bind p paste-buffer bind-key -T copy-mode-vi 'v' send -X begin-selection bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel 'xclip -in -selection clipboard' # command mode bind : command-prompt # Kill panes bind x kill-pane # Status on off key bind t set status # Lock the tty bind b run-shell \"$HOME/.local/bin/unilock\" # Alerts setw -g monitor-activity on set -g visual-activity on # Enable mouse mode setw -g mouse on # Default terminal mode set -g default-terminal 'screen-256color' # Status and colors set -g status-justify left set -g status-interval 2 set -g status-bg colour25 set -g status-fg colour222 # Window status set-option -g status-position bottom setw -g window-status-format \"#[bg=colour246, fg=colour14, bold] #W \" setw -g window-status-current-format \"#[bg=colour25, fg=colour14, bold] #W \" # Right status set -g status-right-length 100 set -g status-right '#(~/.local/bin/tmux-status)' set -g status-left-length 50 set -g status-left '' # Visuals setw -g monitor-activity on set-option -g bell-action none set-option -g visual-activity on set-option -g visual-bell off set-option -g visual-silence off # clock set -g clock-mode-colour colour20 # urlview run-shell $HOME/.local/bin/tmux.urlview # resize panes setw -g aggressive-resize on # No delay set -sg escape-time 0 # History set -g history-limit 10000 # Scrolling set-option -g terminal-overrides 'xterm*:smcup@:rmcup@' # Panes index set -g pane-base-index 1 set -g renumber-windows on # Windows index set -g base-index 1 # Layouts bind Z previous-layout bind X next-layout # Detach others bind D detach -a # Navigate and resize splits is_vim=\"ps -o state= -o comm= -t '#{pane_tty}' \\ | grep -iqE '^[^TXZ ]+ +(\\\\S+\\\\/)?g?(view|n?vim?x?)(diff)?$'\" bind -n C-h if-shell \"$is_vim\" \"send-keys C-h\" \"select-pane -L\" bind -n C-j if-shell \"$is_vim\" \"send-keys C-j\" \"select-pane -D\" bind -n C-k if-shell \"$is_vim\" \"send-keys C-k\" \"select-pane -U\" bind -n C-l if-shell \"$is_vim\" \"send-keys C-l\" \"select-pane -R\" bind -n M-h if-shell \"$is_vim\" \"send-keys M-h\" \"resize-pane -L 2\" bind -n M-l if-shell \"$is_vim\" \"send-keys M-l\" \"resize-pane -R 2\" bind -n M-k if-shell \"$is_vim\" \"send-keys M-k\" \"resize-pane -U 2\" bind -n M-j if-shell \"$is_vim\" \"send-keys M-j\" \"resize-pane -D 2\" ","date":"2020-06-06","objectID":"/tmux/:0:8","tags":["tmux","screen","multiplexer","console"],"title":"TMUX","uri":"/tmux/"},{"categories":null,"content":"Auto start tmux on boot I have these lines in my shell startup file ~/.zprofile. $ cat ~/.zprofile # ▓▓▓▓▓▓▓▓▓▓ # ░▓ Author ▓ Abdullah \u003chttps://abdullah.today/\u003e # ░▓▓▓▓▓▓▓▓▓▓ # ░░░░░░░░░░ # Start X at login if [[ -z $DISPLAY ]] \u0026\u0026 [[ $(tty) = /dev/tty1 ]]; then exec startx -- vt1 -keeptty \u0026\u003e/dev/null logout elif [[ $(tty) != /dev/tty1 ]]; then sudo loadkeys $HOME/.loadkeysrc tmux has-session -t $USER || tmux new-session -t $USER \u0026\u0026 tmux attach-session -t $USER fi So if I login from other than tty1, and if there is an already running tmux session, it attaches me to it. Else starts a new session and get me there. 😉 Here is a demonstration video. ","date":"2020-06-06","objectID":"/tmux/:0:9","tags":["tmux","screen","multiplexer","console"],"title":"TMUX","uri":"/tmux/"},{"categories":null,"content":"How to do cherry-pick in git","date":"2020-06-04","objectID":"/cherry-pick/","tags":["git","cherry-pick","development","advanced git","branches"],"title":"git Cherry Pick","uri":"/cherry-pick/"},{"categories":null,"content":"Git cherry-picking Aah picking cherries! ❤️ I’m using git since I started using linux. Cherry-pick is one of those commands I do alot with git. Right now I’m preparing a new cherry and will pick it later. 😉 ","date":"2020-06-04","objectID":"/cherry-pick/:0:0","tags":["git","cherry-pick","development","advanced git","branches"],"title":"git Cherry Pick","uri":"/cherry-pick/"},{"categories":null,"content":"What’s cherry-pick? According to man(1) git-cherry-pick: Given one or more existing commits, apply the change each one introduces, recording a new commit for each. This requires your working tree to be clean (no modifications from the HEAD commit). You’re working on a git branch. And you want to introduce some new feature to your repository, but you aren’t sure if it will work or not yet. What will you do? You create a new branch. Get your work done there. You can always rebase but what if you have only some commits you want to apply to master branch? Here cherry-pick is your friend. ","date":"2020-06-04","objectID":"/cherry-pick/:1:0","tags":["git","cherry-pick","development","advanced git","branches"],"title":"git Cherry Pick","uri":"/cherry-pick/"},{"categories":null,"content":"Create a new branch I’m doing all this to explain it to new git_comers. My website readers know that my site is a git repository. So I’m on master branch. I’m going to create a new branch from this branch, checking out to it and start working. ","date":"2020-06-04","objectID":"/cherry-pick/:2:0","tags":["git","cherry-pick","development","advanced git","branches"],"title":"git Cherry Pick","uri":"/cherry-pick/"},{"categories":null,"content":"Add files You can see I have created a new branch and checked out to it. Wrote a new post which is shown as Untracked. After adding some screenshots, I’m going to add them to my git repository. I haven’t done with this post yet so I haven’t added it to index. ","date":"2020-06-04","objectID":"/cherry-pick/:3:0","tags":["git","cherry-pick","development","advanced git","branches"],"title":"git Cherry Pick","uri":"/cherry-pick/"},{"categories":null,"content":"Commit changes So now you’re ready to commit your changes. Add Untracked or modified files and commit them. Commit them. Remember to copy or remeber first 6 digits of the new commit or you can always get it by: git log -n1 --format='%h' NOTE: Run above code only on new branch. It will give you commit hash of the commit you just made in current checked out branch. ","date":"2020-06-04","objectID":"/cherry-pick/:4:0","tags":["git","cherry-pick","development","advanced git","branches"],"title":"git Cherry Pick","uri":"/cherry-pick/"},{"categories":null,"content":"Checkout to master branch So you have commits in new branch. Which you want to apply to your master branch. Checkout to master branch. ","date":"2020-06-04","objectID":"/cherry-pick/:5:0","tags":["git","cherry-pick","development","advanced git","branches"],"title":"git Cherry Pick","uri":"/cherry-pick/"},{"categories":null,"content":"Cherry-pick Hmm. Here we go. Now we want commit made in new branch applied into our master branch. You need to know the hash of the commit you made earlier into other branch. Congrats! You just cherry-picked a new commit into your master branch from cherry branch. ","date":"2020-06-04","objectID":"/cherry-pick/:6:0","tags":["git","cherry-pick","development","advanced git","branches"],"title":"git Cherry Pick","uri":"/cherry-pick/"},{"categories":null,"content":"Delete the temp branch It is now safe to delete the new branch we made. Feel free to ask more about advanced git topics. Enjoy cherry-picking! ❤️ ","date":"2020-06-04","objectID":"/cherry-pick/:7:0","tags":["git","cherry-pick","development","advanced git","branches"],"title":"git Cherry Pick","uri":"/cherry-pick/"},{"categories":null,"content":"How to configure dual screen in linux?","date":"2020-06-02","objectID":"/multihead/","tags":["polybar","bspwm","multihead","multi-display","multi-screen","dual-monitor","dual-screen","multimonitor"],"title":"Multihead with BSPWM and Polybar","uri":"/multihead/"},{"categories":null,"content":"Multihead A few days ago, I relocated myself to new room. Actually this room I use for summer as its way cooler than others. I have a wall-mounted LCD monitor here so today I thought I should share how I do multi screening. ","date":"2020-06-02","objectID":"/multihead/:0:0","tags":["polybar","bspwm","multihead","multi-display","multi-screen","dual-monitor","dual-screen","multimonitor"],"title":"Multihead with BSPWM and Polybar","uri":"/multihead/"},{"categories":null,"content":"Hardware I have this lenovo X series machine which is my main machine I use. Its resolution is 1920x1080. The second one is a LCD monitor. And the resolution is 1280x1024. My laptop doesn’t have VGA port but I have a HDMI port. But I have worked on old hardware with VGA port and it works. ","date":"2020-06-02","objectID":"/multihead/:1:0","tags":["polybar","bspwm","multihead","multi-display","multi-screen","dual-monitor","dual-screen","multimonitor"],"title":"Multihead with BSPWM and Polybar","uri":"/multihead/"},{"categories":null,"content":"Software xrandr is what you want. I’m using Archlinux and it got installed with libinput as dependency. I hope it will be there in other distributions as well. If you don’t have it, install it using your distribution’s package manager. I use bspwm with polybar. You might have different WMs or DE. Apart from polybar, everything would work fine. For polybar, you have to configure it to your taste. Or clone my git repository and copy/symlink all files to their respective paths and polybar will work fine. ","date":"2020-06-02","objectID":"/multihead/:2:0","tags":["polybar","bspwm","multihead","multi-display","multi-screen","dual-monitor","dual-screen","multimonitor"],"title":"Multihead with BSPWM and Polybar","uri":"/multihead/"},{"categories":null,"content":"Display manager ;(adsbygoogle = window.adsbygoogle || []).push({}) I don’t use a Display manager. Instead I use xinit. See next section for configuring multihead using xinit. ","date":"2020-06-02","objectID":"/multihead/:3:0","tags":["polybar","bspwm","multihead","multi-display","multi-screen","dual-monitor","dual-screen","multimonitor"],"title":"Multihead with BSPWM and Polybar","uri":"/multihead/"},{"categories":null,"content":"Starting on Boot In bspwm, when you plug HDMI cable in, OS detects it. But for screens to get display, you have to logout from bspwm. Login again and without configuration, the monitor would be a mirror to your laptop. What ever you see on first screen, you would see on second one. To make it work, you need to execute some commands. First get outputs names using xrandr without some arguments. xrandr Screen 0: minimum 320 x 200, current 3200 x 1080, maximum 16384 x 16384 eDP-1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 309mm x 173mm 1920x1080 60.03*+ 60.01 59.97 59.96 59.93 1680x1050 59.95 59.88 1400x1050 59.98 1600x900 59.99 59.94 59.95 59.82 1280x1024 60.02 1400x900 59.96 59.88 1280x960 60.00 1440x810 60.00 59.97 1368x768 59.88 59.85 1280x800 59.99 59.97 59.81 59.91 1280x720 60.00 59.99 59.86 59.74 1024x768 60.04 60.00 960x720 60.00 928x696 60.05 896x672 60.01 1024x576 59.95 59.96 59.90 59.82 960x600 59.93 60.00 960x540 59.96 59.99 59.63 59.82 800x600 60.00 60.32 56.25 840x525 60.01 59.88 864x486 59.92 59.57 700x525 59.98 800x450 59.95 59.82 640x512 60.02 700x450 59.96 59.88 640x480 60.00 59.94 720x405 59.51 58.99 684x384 59.88 59.85 640x400 59.88 59.98 640x360 59.86 59.83 59.84 59.32 512x384 60.00 512x288 60.00 59.92 480x270 59.63 59.82 400x300 60.32 56.34 432x243 59.92 59.57 320x240 60.05 360x202 59.51 59.13 320x180 59.84 59.32 DP-1 disconnected (normal left inverted right x axis y axis) HDMI-1 disconnected (normal left inverted right x axis y axis) DP-2 disconnected (normal left inverted right x axis y axis) HDMI-2 connected 1280x1024+1920+0 (normal left inverted right x axis y axis) 708mm x 398mm 1280x1024 60.02*+ 1920x1080 60.00 50.00 59.94 24.00 23.98 1920x1080i 60.00 50.00 59.94 1280x960 60.00 1280x720 60.00 50.00 59.94 1024x768 60.00 800x600 60.32 56.25 720x576 50.00 720x576i 50.00 720x480 60.00 59.94 720x480i 60.00 59.94 640x480 60.00 59.94 720x400 70.08 Or to get connected monitors, you can invoke: xrandr -q | awk '/ connected / {print $1}' You will get output of N lines where N is numbers of connected monitors. The first one you see is your laptop. Others are external monitors if you have not configured them already or have something in your $PATH which does something on hardware change. Okay. Let’s assume my laptop is eDP-1 and my external monitor is HDMI-2. I want external monitor to appear at right of my laptop screen: xrandr --output HDMI-2 --auto --right-of eDP-1 That’s it. You can save these two functions in your ~/.xprofile to auto start multihead on restart. As the configurations above we done, will go away after this session. Here is my ~/.xpofile: $ vim ~/.xprofile_ #!/bin/sh # In the name of Allah, the most Gracious, the most Merciful. # # ▓▓▓▓▓▓▓▓▓▓ # ░▓ Author ▓ Abdullah \u003chttps://abdullah.today\u003e # ░▓▓▓▓▓▓▓▓▓▓ # ░░░░░░░░░░ # Xresources file user_resources=$HOME/.Xresources # custom keymaps user_keymaps=$HOME/.Xmodmap # custom fonts user_fonts_dir=$HOME/.local/share/fonts # Inactivity timeout inactivity_timeout=180 # Time before exectuing lock notify_time=10 # For some java apps #wmname LG3D \u0026 run() { if ! pgrep $1 ; then $@\u0026 fi } if [ -d /etc/X11/xinit/xinitrc.d ]; then for f in /etc/X11/xinit/xinitrc.d/?*.sh ; do [ -x $f ] \u0026\u0026 . $f done unset f fi # Session name export DESKTOP_SESSION=bspwm # No tty export XDG_SESSION_TYPE=x11 tab() { # Configure only laptop's screen if no external monitor is connected. xrandr --output eDP-1 --mode 1920x1080 --pos 0x0 --brightness 1.0 \\ --gamma 0.76:0.75:0.68 \"$@\" } tabular() { # Configure external monitor if exists tab xrandr --output HDMI-2 --mode 1280x1024 --pos 1920x0 \"$@\" } # Start sxhkd sxhkd \u0026 # Load Xresources [ -f $user_resources ] \u0026\u0026 xrdb -merge \"$user_resources\" # Load keymaps [ -f $user_keymaps ] \u0026\u0026 xmodmap \"$user_keymaps\" # Run compositor run picom -b --config \"$HOME\"/.config/picom/picom.conf \u0026 # Restore the last wallpaper \"$HOME\"/.fehbg \u0026 # Set cursor shape xsetroot -cursor_name ul_angle \u0026 #xcompmgr -c -f D 5 \u0026 # Add fonts d","date":"2020-06-02","objectID":"/multihead/:4:0","tags":["polybar","bspwm","multihead","multi-display","multi-screen","dual-monitor","dual-screen","multimonitor"],"title":"Multihead with BSPWM and Polybar","uri":"/multihead/"},{"categories":null,"content":"A tiling window manager","date":"2020-06-01","objectID":"/bspwm/","tags":["bspwm","wm","window managers","tiling window manager","workflow"],"title":"BSPWM","uri":"/bspwm/"},{"categories":null,"content":"BSPWM BSPWM is a tiling window manager that represents windows as the leaves of a full binary tree. It has support for EWMH and multihead. ","date":"2020-06-01","objectID":"/bspwm/:0:0","tags":["bspwm","wm","window managers","tiling window manager","workflow"],"title":"BSPWM","uri":"/bspwm/"},{"categories":null,"content":"Installation bspwm is available in almost all major distributions. If you can’t find it in your OS, clone the repository and build it. ","date":"2020-06-01","objectID":"/bspwm/:1:0","tags":["bspwm","wm","window managers","tiling window manager","workflow"],"title":"BSPWM","uri":"/bspwm/"},{"categories":null,"content":"Configuration bspwm uses sxhkd for keyboard shortcuts. It has no other way to handle with keyboard input and instead provides bspc program as its interface. So you have to configure the keyboard shortcuts in another file. bspwm installs sxhkd as its dependency mostly. If you don’t want to use it and want to use some other hotkey daemon like xbindkeys or something else, you can install that and configure it for you. sxhkd is from the same developer as bspwm with powerful and compact configuration syntax. Create directories first: mkdir -p ~/.config/{bspwm,sxhkd} Copy the configuration files from /usr/share/doc/. You might have a different path for these files in your filesystem. Find them and copy over there. cp /usr/share/doc/bspwm/examples/bspwmrc ~/.config/bspwm/ cp /usr/share/doc/bspwm/examples/sxhkdrc ~/.config/sxhkd/ Cool. Now you have configuration files placed in correct location, you can start bspwm but wait. will you mind editing them? Edit them with some editor and change the defaults to how you like, change default programs. ","date":"2020-06-01","objectID":"/bspwm/:2:0","tags":["bspwm","wm","window managers","tiling window manager","workflow"],"title":"BSPWM","uri":"/bspwm/"},{"categories":null,"content":"Start I use xinit to start my window manager. But you can use any display manager to boot into bspwm. Here is my ~/.xinitrc: $ cat ~/.xinitrc #!/bin/sh coded_by=' In the name of Allah, the most Gracious, the most Merciful. ▓▓▓▓▓▓▓▓▓▓ ░▓ Author ▓ Abdullah \u003chttps://abdullah.today\u003e ░▓▓▓▓▓▓▓▓▓▓ ░░░░░░░░░░ ░█▀▀░▀█▀░█▀█░█▀▄░▀█▀░█░█ ░▀▀█░░█░░█▀█░█▀▄░░█░░▄▀▄ ░▀▀▀░░▀░░▀░▀░▀░▀░░▀░░▀░▀ ' [ -f ~/.xprofile ] \u0026\u0026 . ~/.xprofile exec bspwm \u003e/tmp/bspwm-\"$USER\".log 2\u003e\u00261 It’s enought to boot into bspwm. But we want some programs to run at startup. ","date":"2020-06-01","objectID":"/bspwm/:3:0","tags":["bspwm","wm","window managers","tiling window manager","workflow"],"title":"BSPWM","uri":"/bspwm/"},{"categories":null,"content":"Auto-start programs You can start applications from ~/.config/bspwmrc or ~/.xprofile. If you use some display manager, you can start applications from ~/.xprofile. It’s sourced when display manager starts. You can have a autostart.sh in your ~/.config/bspwm/ and execute from ~/.config/bspwm/bspwmrc: cat ~/.config/bspwm/bspwmrc ... $HOME/.config/bspwm/autostart.sh \u0026 ... or a better way to do this is launching your programs from ~/.xprofile and source it from ~/.xinitrc. This way you can use any display manager or xinit and you don’t need extra configuration or a script. Here is my ~/.xprofile: cat ~/.xprofile #!/bin/sh # In the name of Allah, the most Gracious, the most Merciful. # # ▓▓▓▓▓▓▓▓▓▓ # ░▓ Author ▓ Abdullah \u003chttps://abdullah.today\u003e # ░▓▓▓▓▓▓▓▓▓▓ # ░░░░░░░░░░ # Xresources file user_resources=$HOME/.Xresources # custom keymaps user_keymaps=$HOME/.Xmodmap # custom fonts user_fonts_dir=$HOME/.local/share/fonts # Inactivity timeout inactivity_timeout=180 # Time before exectuing lock notify_time=10 # For some java apps #wmname LG3D \u0026 run() { if ! pgrep $1 ; then $@\u0026 fi } if [ -d /etc/X11/xinit/xinitrc.d ]; then for f in /etc/X11/xinit/xinitrc.d/?*.sh ; do [ -x $f ] \u0026\u0026 . $f done unset f fi # Session name export DESKTOP_SESSION=bspwm # No tty export XDG_SESSION_TYPE=x11 tab() { # Configure only laptop's screen if no external monitor is connected. xrandr --output eDP-1 --mode 1920x1080 --pos 0x0 --brightness 1.0 \\ --gamma 0.76:0.75:0.68 \"$@\" } tabular() { # Configure external monitor if exists tab xrandr --output HDMI-2 --mode 1280x1024 --pos 1920x0 \"$@\" } # Start sxhkd sxhkd \u0026 # Load Xresources [ -f $user_resources ] \u0026\u0026 xrdb -merge \"$user_resources\" # Load keymaps [ -f $user_keymaps ] \u0026\u0026 xmodmap \"$user_keymaps\" # Run compositor run picom -b --config \"$HOME\"/.config/picom/picom.conf \u0026 # Restore the last wallpaper \"$HOME\"/.fehbg \u0026 # Set cursor shape xsetroot -cursor_name ul_angle \u0026 #xcompmgr -c -f D 5 \u0026 # Add fonts directories xset +fp \"$user_fonts_dir\" \u0026\u0026 xset fp rehash # Start urxvt in daemon mode # run urxvtd -q -o -f \u0026 # No mouse when idle run unclutter --ignore-scrolling --fork --timeout 1 \u0026 # DPMS and lock screen xset dpms $inactivity_timeout \u0026 #xss-lock -- physlock -mp 'Say, \"If the sea were ink for [writing] the words of my Lord, the sea would be exhausted before the words of my Lord were exhausted, even if We brought the like of it as a supplement.\"' \u0026 xss-lock -- i3lock -c 000000 \u0026 # Start Notification daemon run dunst -c \"$HOME\"/.config/dunst/dunstrc \u0026 # Mute the mic pactl set-source-mute alsa_input.pci-0000_00_1b.0.analog-stereo true \u0026 # Redshift for less eye strain #redshift -c ~/.config/redshift/redshift.conf \u0026 # Start tmux if not already running [ -z $TMUX ] \u0026\u0026 tmux new-session -s $USER -d # Set brightness to 30 at boot light -S 30 \u0026 # Configure multihead. if [ \"$(xrandr -q | awk '/ connected / {print $1}' | wc -l)\" -eq 1 ]; then tab --primary else tabular fi # Start a scratchpad #sleep 1 #urxvtc -T 'scratchpad' -geometry 65x20 \u0026 #termite -t scratchpad \u0026 xfce4-terminal -T scratchpad --font='Fantasque Sans Mono Italic 16' \u0026 # vim:ft=sh The file is well-commented. So you can copy and edit it to your likings. ","date":"2020-06-01","objectID":"/bspwm/:4:0","tags":["bspwm","wm","window managers","tiling window manager","workflow"],"title":"BSPWM","uri":"/bspwm/"},{"categories":null,"content":"Bar/Panel I’m using polybar with bspwm. To be honest, it was the reason I left dwm because even with patching dwm, I wasn’t able to use polybar with it. bspwm is EWMH supported so you can use almost any bar with it. I’m starting polybar from ~/.config/bspwm/bspwmrc. More on polybar, you can find a post in my blog to know more about it. ","date":"2020-06-01","objectID":"/bspwm/:5:0","tags":["bspwm","wm","window managers","tiling window manager","workflow"],"title":"BSPWM","uri":"/bspwm/"},{"categories":null,"content":"Rules In bspwm, you can define rules for windows how and where they appear. You can add a rule in ~/.config/bswpm/bspwmrc like this: bspc rule -a Chromium desktop=^2 This rule will always open Chromium on desktop 2. Or if you have some applications with complex window rules, you can define them in a script and execute that script from ~/.config/bspwm/bspwrc like this: bspc config external_rules_command \"$HOME/.config/bspwm/external_rules\" Here is my external_rules script: $ cat ~/.config/bspwm/external_rules #!/bin/sh coded_by=' In the name of Allah, the most Gracious, the most Merciful. ▓▓▓▓▓▓▓▓▓▓ ░▓ Author ▓ Abdullah \u003chttps://abdullah.today\u003e ░▓▓▓▓▓▓▓▓▓▓ ░░░░░░░░░░ ░█▀▄░█▀▀░█▀█░█░█░█▄█░░░█▀▄░█░█░█░░░█▀▀░█▀▀ ░█▀▄░▀▀█░█▀▀░█▄█░█░█░░░█▀▄░█░█░█░░░█▀▀░▀▀█ ░▀▀░░▀▀▀░▀░░░▀░▀░▀░▀░░░▀░▀░▀▀▀░▀▀▀░▀▀▀░▀▀▀ ' wid=$1 class=$2 instance=$3 title=$(xdotool getwindowname $wid) case $class in [Rr]edshift-*|[Tt]int2|[Pp]inentry-*|[Mm]pv|[Mm]u[Pp][Dd][Ff]|[Mm]Player|[Tt]hunar|[Ff]im|[Gg]picview|[Nn]itrogen|[Aa]randr|[Gg]alculator|[Ff]ont-manager|[Oo]blogout|[Pp]eek|[Ss]kype|[Xx]fce4-appfinder|[Xx]fce4-about|[Gg]pick|[Gg]mrun|[Xx][Cc]alc|[Pp]avucontrol|[Vv]lc|[Ee]o[mg]|[Ff]eh|[Rr]istretto|[Ss]xiv|[Pp]qiv|[Aa]tril|[Ee]vince|[Zz]athura|scratchpad|fzfmenu) echo \"state = floating\" echo \"center = on\" ;; Google-chrome) echo \"desktop = ^2\" ;; Opera) echo \"desktop = ^3\" ;; Gimp) echo \"desktop = ^5\" ;; Anydesk) echo \"desktop = ^4\" echo \"follow = on\" ;; esac case $title in scratchpad) echo \"state = floating\" ;; esac # vim:ft=sh ","date":"2020-06-01","objectID":"/bspwm/:6:0","tags":["bspwm","wm","window managers","tiling window manager","workflow"],"title":"BSPWM","uri":"/bspwm/"},{"categories":null,"content":"Scratchpad I love to use a terminal emulator mostly. So I have a hidden terminal window in floating mode. Whenever I need it, I just press the keybinds and it appears on top of other apps so I can copy/paste something to it. There are multiple way to achieve this. But what I have done is different. Not just terminal window, any window can be pushed to scratchpad. Copy this script in ~/.config/bspwm/scratchpad.sh: #!/bin/sh coded_by=' In the name of Allah, the most Gracious, the most Merciful. ▓▓▓▓▓▓▓▓▓▓ ░▓ Author ▓ Abdullah \u003chttps://abdullah.today\u003e ░▓▓▓▓▓▓▓▓▓▓ ░░░░░░░░░░ ░█▀▀░█▀▀░█▀▄░█▀█░▀█▀░█▀▀░█░█░█▀█░█▀█░█▀▄ ░▀▀█░█░░░█▀▄░█▀█░░█░░█░░░█▀█░█▀▀░█▀█░█░█ ░▀▀▀░▀▀▀░▀░▀░▀░▀░░▀░░▀▀▀░▀░▀░▀░░░▀░▀░▀▀░ ' toggle_flag() { id=$(bspc query -N -n \"focused\") if [ -n \"$id\" ]; then if [ $(xprop -id \"$id\" | grep \"_SCRATCH_ORDER\" | wc -l) -gt 0 ]; then xprop -id $id -remove _SCRATCH_ORDER xprop -id $id -remove _SCRATCH_VISIBILITY else xprop -id $id -f _SCRATCH_ORDER 32ii -set _SCRATCH_ORDER $(date +%s,%N) xprop -id $id -f _SCRATCH_VISIBILITY 8i -set _SCRATCH_VISIBILITY 0 xdotool windowunmap $id fi fi } switch_app() { id=$(bspc query -N -n \"focused\") if [ $(xprop -id \"$id\" | grep \"_SCRATCH_VISIBILITY(INTEGER) = 1\" | wc -l) -gt 0 ]; then xprop -id $id -f _SCRATCH_VISIBILITY 8i -set _SCRATCH_VISIBILITY 0 xdotool windowunmap $id fi sid=$( id=$(bspc query -N -n \"focused\"); for w in $(xwininfo -root -children | grep -e \"^\\s*0x[0-9a-f]\\+\" -o); do if [ \"$w\" != \"$id\" ]; then t=$(xprop -id $w _SCRATCH_ORDER | grep ' = \\(.*\\)') if [ -n \"$t\" ]; then echo $t $w fi fi done | sort -n | head -n1 | cut -d\" \" -f 5 ); if [ -n \"$sid\" ] \u0026\u0026 [ \"$(printf \"%04d\" $sid)\" != \"$(printf \"%04d\" $id)\" ]; then echo \"$sid\" != \"$id\" xprop -id $sid -f _SCRATCH_ORDER 32ii -set _SCRATCH_ORDER $(date +%s,%N) xprop -id $sid -f _SCRATCH_VISIBILITY 8i -set _SCRATCH_VISIBILITY 1 xdotool windowmap $sid bspc node -f $sid fi } op=\"$1\" if [ \"$op\" = \"toggle-flag\" ]; then toggle_flag elif [ \"$op\" = \"switch-app\" ]; then switch_app fi And add this line to your ~/.config/sxhkd/sxhkdrc: # Push focused window to scratchpad (background) super + shift + i \"$HOME\"/.config/bspwm/scratchpad.sh toggle-flag # Hide/Un-Hide a window pushed to scratchpad previously super + i \"$HOME\"/.config/bspwm/scratchpad.sh switch-app Now you can use Super + Shift + i to hide the focused window and Super + i to get it back. ","date":"2020-06-01","objectID":"/bspwm/:7:0","tags":["bspwm","wm","window managers","tiling window manager","workflow"],"title":"BSPWM","uri":"/bspwm/"},{"categories":null,"content":"Misc settings Borders There are active, normal, focused window colors settings available: $ cat ~/.config/bspwm/bspwmrc ... # Colors dark_moderate_blue=\"#5e81ac\" pure_cyan=\"#00FFFF\" pure_magenta=\"#FF00FF\" vivid_red=\"#ff3232\" hot_pink=\"#ff69b4\" up_maroon=\"#7b1113\" # Feedback color of preselection bspc config presel_feedback_color $up_maroon # Focused Border color bspc config focused_border_color $hot_pink # Active border color bspc config active_border_color $pure_magenta # Normal border color bspc config normal_border_color $pure_cyan ... Mouse While you press and hold SUPER key and hit these mouse buttons, these actions can be done: $ vi ~/.config/bspwm/bspwmrc ... # Pointer actions when pressing mod + button bspc config pointer_action1 move bspc config pointer_action2 resize_side bspc config pointer_action3 resize_corner ... :wq! Focus When you move your mouse to some window, it should get focused. This behaviour is disabled by default which I use mostly and found helpful. Enable it by appending this line to your bspwmrc: $ bspc config focus_follows_pointer true No borders If you have only one window open on a desktop, you might not want it to have borders. Append it to bspwmrc: $ bspc config borderless_monocle true Split ratio How much area the new window should take? You can configure this behaviour using this command or by appending it to bspwmrc: bspc config split_ratio 0.50 It will alot half of the available screen to new window. EWMH Ignore EWMH focus requests. If true, opening new program in already opened instance will have direct focus too. Like if you’re on desktop 8 and you open a URL from mutt, and chrome is configured as url launcher, it will send the url to chrome opened in 2nd desktop and switch to it. bspc config ignore_ewmh_focus false I think its enough for now. BSPWM is amazing and very useful if you know scripting. If need assistance on BSPWM, you can always ask in comments. Thanks for reading. 😉 Here is a demonstration video. ","date":"2020-06-01","objectID":"/bspwm/:8:0","tags":["bspwm","wm","window managers","tiling window manager","workflow"],"title":"BSPWM","uri":"/bspwm/"},{"categories":null,"content":"Terminal Sharing service","date":"2020-05-17","objectID":"/tmate/","tags":["tmate","terminal sharing","remote","rdp","tmux"],"title":"Terminal Sharing service","uri":"/tmate/"},{"categories":null,"content":"What’s tmate? On *nix systems, sometimes we need support. And geeks don’t like GUI apps just to have your system in front of them, at least I don’t like that 😉 tmate is terminal sharing software you can use it to connect with your friends and you both work from there. It’s available in many distributions repos and in case you aren’t lucky enough, you can compile it from source or there are pre-compiled binaries there in their Github page. ","date":"2020-05-17","objectID":"/tmate/:1:0","tags":["tmate","terminal sharing","remote","rdp","tmux"],"title":"Terminal Sharing service","uri":"/tmate/"},{"categories":null,"content":"Configuration By default, tmate loads the system configuration file from /etc/tmux.conf, if present, then looks for a user configuration file at ~/.tmux.conf and ~/.tmate.conf. ","date":"2020-05-17","objectID":"/tmate/:2:0","tags":["tmate","terminal sharing","remote","rdp","tmux"],"title":"Terminal Sharing service","uri":"/tmate/"},{"categories":null,"content":"Keybindings Just like tmux, tmate uses C-b as prefix. The default command key bindings are: C-b Send the prefix key (C-b) through to the application. C-o Rotate the panes in the current window forwards. C-z Suspend the tmate client. ! Break the current pane out of the window. \" Split the current pane into two, top and bottom. # List all paste buffers. $ Rename the current session. % Split the current pane into two, left and right. \u0026 Kill the current window. ' Prompt for a window index to select. ( Switch the attached client to the previous session. ) Switch the attached client to the next session. , Rename the current window. - Delete the most recently copied buffer of text. . Prompt for an index to move the current window. 0 to 9 Select windows 0 to 9. : Enter the tmate command prompt. ; Move to the previously active pane. = Choose which buffer to paste interactively from a list. ? List all key bindings. D Choose a client to detach. L Switch the attached client back to the last session. [ Enter copy mode to copy text or view the history. ] Paste the most recently copied buffer of text. c Create a new window. d Detach the current client. f Prompt to search for text in open windows. i Display some information about the current window. l Move to the previously selected window. n Change to the next window. o Select the next pane in the current window. p Change to the previous window. q Briefly display pane indexes. r Force redraw of the attached client. m Mark the current pane (see select-pane -m). M Clear the marked pane. s Select a new session for the attached client interactively. t Show the time. w Choose the current window interactively. x Kill the current pane. z Toggle zoom state of the current pane. { Swap the current pane with the previous pane. } Swap the current pane with the next pane. ~ Show previous messages from tmate, if any. Page Up Enter copy mode and scroll one page up. Up, Down Left, Right Change to the pane above, below, to the left, or to the right of the current pane. M-1 to M-5 Arrange panes in one of the five preset layouts: even-horizontal, even-vertical, main-horizontal, main-vertical, or tiled. Space Arrange the current window in the next preset layout. M-n Move to the next window with a bell or activity marker. M-o Rotate the panes in the current window backwards. M-p Move to the previous window with a bell or activity marker. C-Up, C-Down C-Left, C-Right Resize the current pane in steps of one cell. M-Up, M-Down M-Left, M-Right Resize the current pane in steps of five cells. Key bindings may be changed with the bind-key and unbind-key commands. ","date":"2020-05-17","objectID":"/tmate/:3:0","tags":["tmate","terminal sharing","remote","rdp","tmux"],"title":"Terminal Sharing service","uri":"/tmate/"},{"categories":null,"content":"How to use? Once installed, just invoke tmate from command line. tmate needs an ssh key so in case you don’t have an ssh key, generate one. ssh-keygen Once ready, invoke tmate. It will start connecting to its server and show you in status bar once connected. You can now show the URIs by show-messages command. tmate show-messages It will provide you both [web, ssh] priviliged and non-privileged links. Share with your friends how you like. Enjoy! Here is a demonstration video. ","date":"2020-05-17","objectID":"/tmate/:4:0","tags":["tmate","terminal sharing","remote","rdp","tmux"],"title":"Terminal Sharing service","uri":"/tmate/"},{"categories":null,"content":"What is CRUX?","date":"2020-05-12","objectID":"/crux/","tags":["crux","beautiful","linux","distros","distrohopping"],"title":"CRUX","uri":"/crux/"},{"categories":null,"content":"CRUX is like a good looking, really good looking, gorgeous, hot girl without any cheap perfume or makeup, waiting for you to customize her in any way you see fit. On top of that, she is free, permanent and wont make absurd and disturbing demands. ","date":"2020-05-12","objectID":"/crux/:0:0","tags":["crux","beautiful","linux","distros","distrohopping"],"title":"CRUX","uri":"/crux/"},{"categories":null,"content":"Encrypted CRUX installation","date":"2020-05-12","objectID":"/encrypted-crux/","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"How to install fully encrypted CRUX This post is for crux users who wanna secure their crux installation. ","date":"2020-05-12","objectID":"/encrypted-crux/:1:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"Partitioning I’m gonna use two partitions. First boot partition will be unencrypted which holds kernel. I use secure boot with my own keys. You can find a post in my blog how to do that. and I have some ports too for secure boot. ;(adsbygoogle = window.adsbygoogle || []).push({}) ","date":"2020-05-12","objectID":"/encrypted-crux/:2:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"Unencrypted Boot Partition ;(adsbygoogle = window.adsbygoogle || []).push({}) Create a partition more than 200 Mbs for boot ESP with gdisk code ef00. Let’s create a FAT filesystem on it for EFI. ```bash # mkfs.fat -F32 /dev/sda1 ","date":"2020-05-12","objectID":"/encrypted-crux/:3:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"Encrypted Partition Create an encrypted LUKS container # cryptsetup luksFormat /dev/sda2 Type uppercase “YES” and then enter passphrase two times. Open the encrypted container. # cryptsetup open /dev/sda2 crux Now the encrypted container is available at /dev/mapper/crux so lets create some lvm stuff and create filesystems and a swap partition. # pvcreate /dev/mapper/crux # vgcreate ak /dev/mapper/crux # lvcreate -L 8G ak -n swap # lvcreate -L 50G ak -n root # lvcreate -l 100%FREE ak -n home # mkfs.ext4 /dev/ak/root -L crux-root # mkfs.ext4 /dev/ak/home -L crux-home # mkswap /dev/ak/swap -L crux-swap Mount the partitions and start installations. # mount /dev/mapper/ak-root /mnt # mkdir /mnt/{boot,home} # mount /dev/mapper/ak-home /mnt/home # mount /dev/sda1 /mnt/boot # swapon /dev/mapper/ak-swap ","date":"2020-05-12","objectID":"/encrypted-crux/:4:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"Base system installation Start installation. Type “setup” and select “YES”. Install all packages. Make sure you get no error messages once installation is finished. # setup ","date":"2020-05-12","objectID":"/encrypted-crux/:5:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"Chroot Enter chroot. # setup-chroot ","date":"2020-05-12","objectID":"/encrypted-crux/:6:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"fstab Check fstab by going to /etc/fstab. Open it with vim. You’ll see two uncommented entries there. Leave them as it is. In vim prompt mode just type :r! blkid and you’ll get UUIDs of all partitions. Add them there for root, home, boot and swap partitions. ","date":"2020-05-12","objectID":"/encrypted-crux/:7:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"locales Generate locales. # localedef -i en_US -f ISO-8859-1 en_US # localedef -i en_US -f ISO-8859-1 en_US.ISO-8859-1 # localedef -i en_US -f UTF-8 en_US.UTF-8 ","date":"2020-05-12","objectID":"/encrypted-crux/:8:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"rc.conf Edit rc.conf. Mine looks like this. # vim /etc/rc.conf # # /etc/rc.conf: system configuration # FONT=ter-v22n KEYMAP=us TIMEZONE=Asia/Karachi HOSTNAME=cruz SYSLOG=sysklogd SERVICES=(crond wifi acpid ) # End of file :wq ","date":"2020-05-12","objectID":"/encrypted-crux/:9:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"resolv.conf Edit /etc/resolv.conf. I’m using OpenDNS nameserver here. # vim /etc/resolv.conf nameserver 208.67.222.222 :wq ","date":"2020-05-12","objectID":"/encrypted-crux/:10:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"wifi For wireless connection, you can use wpa_supplicant. For example if your interface is wlp3s0 and SSID is nix, add passphrase to it using wpa_passphrase like this. # wpa_passphrase nix \u003e\u003e /etc/wpa_supplicant.conf Reading from STDIN # Type your passphrase. # wpa_supplicant -i wlp3s0 -B -c /etc/wpa_supplicant.conf # dhcpcd wlp3s0 ","date":"2020-05-12","objectID":"/encrypted-crux/:11:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"Kernel Compile the kernel now. Go to the /usr/src/linux directory. Configure the kernel config. Since we are gonna have an encrypted installation, we need some extra drivers. Invoke ‘make menuconfig’ and enable these options. And also enable what is needed for your hardware. I’ll add only options needed for encryption here. General setup ---\u003e [*] Initial RAM filesystem and RAM disk (iniramfs/initrd) support Device Drivers ---\u003e Multiple devices driver support (RAID and LVM) ---\u003e [*] Device mapper support [*] Crypt target support Cryptographic API ---\u003e -*- CBC support \u003c*\u003e SHA224 and SHA256 digest algorithm \u003c*\u003e AES cipher algorithms You can get my kernel config from https://gitlab.com/Abdullah/cfg/raw/master/kernel/config by using wget and then edit it as per your hardware. This one is for Thinkpad with SSD. # wget https://gitlab.com/Abdullah/cfg/raw/master/kernel/config \u003e .config After you’re done with configuring kernel, compile it. Once it’s compiled, copy it to /boot directory and install modules. # make -j8 # make modules_install # cp arch/x86/boot/bzImage /boot/vmlinuz # cp System.map /boot ","date":"2020-05-12","objectID":"/encrypted-crux/:12:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"Users and package management ","date":"2020-05-12","objectID":"/encrypted-crux/:13:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"Root password and a normal user Set root password. Create our first user. And then we will create a second user for package management. # passwd # useradd -G wheel,audio,video -m -U abdullah # passwd abdullah ","date":"2020-05-12","objectID":"/encrypted-crux/:14:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"Give new user sudo access Add new created user to sudoers. Uncomment this line in /etc/sudoers. %wheel ALL=(ALL) ALL ","date":"2020-05-12","objectID":"/encrypted-crux/:15:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"User for creating packages Now let’s create a user for package management. # groupadd pkgmk # useradd -m -g pkgmk pkgmk Add our user to this newly created group. # usermod -aG pkgmk abdullah ","date":"2020-05-12","objectID":"/encrypted-crux/:16:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"fakeroot Edit /etc/prt-get.conf to set up fakeroot building. # makecommand sudo -H -u pkgmk /usr/bin/fakeroot /usr/bin/pkgmk Edit /etc/pkgmk.conf. # vim /etc/pkgmk.conf PKGMK_SOURCE_DIR=\"/home/pkgmk/distfiles\" PKGMK_PACKAGE_DIR=\"/home/pkgmk/packages\" PKGMK_WORK_DIR=\"/home/pkgmk/work/$name\" :wq Create those directories. # mkdir /home/pkgmk/{distfiles,packages,work} # chown pkgmk:pkgmk /home/pkgmk/* # chmod 775 /home/pkgmk/* Enable contrib repository. # mv /etc/ports/contrib.rsync.inactive /etc/ports/contrib.rsync Add my custom ports repository. # echo \"ROOT_DIR=/usr/ports/ak\\nURL=https://abdullah.today/ports\" \u003e /etc/ports/ak.httpup Enable contrib and my repository by editing /etc/prt-get.conf. Uncomment the line which says “prtdir /usr/ports/contrib” and add this line on top of the other port directories path. “prtdir /usr/ports/ak”. Also don’t forget to uncomment the line which says, “runscripts yes”. After editing the file, it should be look like this. ### ### prt-get conf ### # note: the order matters: the package found first is used prtdir /usr/ports/ak prtdir /usr/ports/core prtdir /usr/ports/opt prtdir /usr/ports/xorg # the following line enables the multilib compat-32 collection #prtdir /usr/ports/compat-32 # the following line enables the user maintained contrib collection prtdir /usr/ports/contrib ### use mypackage form local directory # prtdir /home/packages/build:mypackage ### log options: # writelog enabled # (enabled|disabled) # logmode overwrite # (append|overwrite) # rmlog_on_success yes # (no|yes) logfile /var/log/pkgbuild/%n.log # path, %p=path to port dir, %n=port name # %v=version, %r=release ### use alternate cache file (default: /var/lib/pkg/prt-get.cache # cachefile /mnt/nfs/cache ### print README information: # readme verbose # (verbose|compact|disabled) ### prefer higher versions in sysup / diff # preferhigher no # (yes|no) ### use regexp search # useregex no # (yes|no) ### run pre- and post-installs scripts; yes is equivalent to the ### --install-scripts option runscripts yes # (no|yes) ### EXPERT SECTION ### ### alternative commands # makecommand pkgmk # addcommand pkgadd # removecommand pkgrm # runscriptcommand sh makecommand sudo -H -u pkgmk /usr/bin/fakeroot /usr/bin/pkgmk Sync ports now. # ports -u Get fakeroot installed if you don’t have yet. # prt-get install fakeroot ;(adsbygoogle = window.adsbygoogle || []).push({}) ","date":"2020-05-12","objectID":"/encrypted-crux/:17:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"Dracut Get dracut and create an initramfs. # prt-get depinst dracut # dracut initramfs.img ;(adsbygoogle = window.adsbygoogle || []).push({}) ","date":"2020-05-12","objectID":"/encrypted-crux/:18:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"Bootloader I’m using EFISTUB. If you’re using some other boot manager like grub, consult their wiki. There are some dracut related variables in this example. I’d recommand, create a new file with vim, and then in prompt mode, type :r! blkid so you’ll get all UUIDs there in the file. Just copy them in the new file, delete other lines and save it. Then redirect this file’s output to shell like this, ‘cat newCreatedFile | sh’. It will create a new entry. root-UUID=, rd.luks.uuid=, and rd.lvm.vg=. For EFISTUB, create an entry like this. # efibootmgr --create --disk /dev/sda --part 1 --label 'CRUX-Encrypted' --loader /vmlinuz --unicode \"root=UUID=XXXX-XXXX-XXXX-XXX rw resume=UUID=XXXX-XXXX-XXXX-XXXX rd.luks.uuid=XXXX-XXXX-XXXX-XXXX rd.lvm.vg=ak\" --verbose ;(adsbygoogle = window.adsbygoogle || []).push({}) ","date":"2020-05-12","objectID":"/encrypted-crux/:19:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"Congrats! Congrats! You have now a fully encrypted system. Reboot now. If you have some problems, just send me an email and I’ll be glad to help. ","date":"2020-05-12","objectID":"/encrypted-crux/:20:0","tags":["encrypted crux","encryption","luks","lvm","encrypted laptop","source based distros","crux"],"title":"How to install CRUX with encryption","uri":"/encrypted-crux/"},{"categories":null,"content":"How to include a screenshot in Github README","date":"2020-05-11","objectID":"/github-readme/","tags":["readme","github","project readme","gitlab readme"],"title":"How to include a screenshot in Github README","uri":"/github-readme/"},{"categories":null,"content":"A picture is worth 1000 words. Working with github repos, sometimes you want to include a screenshot in your repos. Today I’ll help you getting this done in one step. Go to your repo page and click on issues. Click new issue Take a screenshot you wanna add and paste it there using Control + V or whatever you like. ;(adsbygoogle = window.adsbygoogle || []).push({}) You will get a link once the screenshot is uploaded. Just copy it and paste it in your README.md Close the page ‘new issue’, you don’t need to create an issue. Commit and push changes. Done. ","date":"2020-05-11","objectID":"/github-readme/:0:0","tags":["readme","github","project readme","gitlab readme"],"title":"How to include a screenshot in Github README","uri":"/github-readme/"},{"categories":null,"content":"How to manage a website using git","date":"2020-05-10","objectID":"/site-as-git-repo/","tags":["git","web development","website","hugo","vim"],"title":"How to manage a website using git","uri":"/site-as-git-repo/"},{"categories":null,"content":"Git is another awesome tool developed and maintained by Linus Torvalds who wrote linux kernel. In this post I’ll explain how can we use it for our site maintenance. I have a vps on which my site is hosted along with a mail server, git server and a web server too. But I’m sure this guide can be used with shared hosting accounts with some modifications. Install git. Once installed, as root user, create git user and add it to www-data group. useradd git -m -G www-data Login into this new git user. su - git Create an ssh directory for this account. mkdir .ssh Upload your user ssh public key to this directory how you want. I use pastebin here. Assuming you pasted your public key somewhere on pastebin, I’ll fetch it using curl. curl -o .ssh/authorized_keys 'pastebin address where you pasted the public key' Create a directory for your user you wanna use for your site or this user maybe the one you use to login to your vps using ssh. I’ll use user z for this post. cd \u0026\u0026 mkdir z \u0026\u0026 cd z Create a git repo here now. git init --bare mysite.git Create a hook in .git directory. echo \"#!/bin/sh \\ cd /var/www/html \\ unset GIT_DIR \\ git pull \\ \" \u003e ~/z/mysite.git/hooks/post-receive \u0026\u0026 chmod +X ~/z/mysite.git/hooks/post-receive That’s it. Now go to the directory where your site is hosted, in this example we used /var/www/html for site and z as username which is used to maintain our site in future using git like in above hook we used that. You can modify both hook and here this code too according to your needs. cd /var/www/html \u0026\u0026 git clone ~/z/mysite.git \u0026\u0026 cd mysite.git \u0026\u0026 mv * /var/www/html/ \u0026\u0026 cd /var/www/html \u0026\u0026 rm -rf mysite.git We have made it. Now in your local machine, clone this repo this way. git clone 'your vps ip or domain if it's pointed to your vps':z/site.git Go to the directory you just cloned, do some modifications and push the changes and you’ll see the magic. If you have some problems just ping me and I’ll be glad to help. ","date":"2020-05-10","objectID":"/site-as-git-repo/:0:0","tags":["git","web development","website","hugo","vim"],"title":"How to manage a website using git","uri":"/site-as-git-repo/"},{"categories":null,"content":"Paste snippets from github into Terminal","date":"2020-05-07","objectID":"/gists/","tags":["gist","gists","snippets","github","github-gists","gitlab snippets"],"title":"Create/paste snippets from Terminal","uri":"/gists/"},{"categories":null,"content":"What’s snippet/gist? gist is a piece of code or maybe some important text shared on Github or Gitlab. It’s actually a git repository so you can clone it, work on it locally and push changes. ","date":"2020-05-07","objectID":"/gists/:1:0","tags":["gist","gists","snippets","github","github-gists","gitlab snippets"],"title":"Create/paste snippets from Terminal","uri":"/gists/"},{"categories":null,"content":"Share gists from Terminal There are multiple programs available in many distributions for this purpose. You just have to find it. On Arch Linux, you can install gist. Here is how it works in terminal. You can update an existing gist if you know its hash ID. It has a man page yeah ;-) ","date":"2020-05-07","objectID":"/gists/:2:0","tags":["gist","gists","snippets","github","github-gists","gitlab snippets"],"title":"Create/paste snippets from Terminal","uri":"/gists/"},{"categories":null,"content":"Share gists from EDITOR If you’re using vim, add this line to your ~/.vimrc. $ command! -range=% GT \u003cline1\u003e,\u003cline2\u003ew !gist -c -p -f % Now in command mode, you can type GT and hit enter to create a snippet from your editor’s window. ","date":"2020-05-07","objectID":"/gists/:3:0","tags":["gist","gists","snippets","github","github-gists","gitlab snippets"],"title":"Create/paste snippets from Terminal","uri":"/gists/"},{"categories":null,"content":"Get gists output in Terminal ;(adsbygoogle = window.adsbygoogle || []).push({}) So now you know how to share snippets from terminal. But what if someone has given you some URL and you want to see it in terminal? I have got this snippet shared, for example It’s hosted on github at this URL. https://gist.github.com/Awan/0962f678ff2b396cbd34cf542e56137b Using cURL or wget you will get this github page html in your terminal. So here is a magic trick for you ;-) Replace github.com to githubusercontent and append /raw at the end. The above snippet’s URL now becomes: https://gist.githubusercontent.com/Awan/0962f678ff2b396cbd34cf542e56137b/raw Now you can use cURL or wget to see/save the snippent right from your terminal. ;(adsbygoogle = window.adsbygoogle || []).push({}) That’s it. You can save it to some file as well. Thanks for reading. ","date":"2020-05-07","objectID":"/gists/:4:0","tags":["gist","gists","snippets","github","github-gists","gitlab snippets"],"title":"Create/paste snippets from Terminal","uri":"/gists/"},{"categories":null,"content":"How to contribute to a project using git","date":"2020-02-12","objectID":"/contribution-with-git/","tags":["contribution","git","github","fork","repository"],"title":"How to contribute to open source project","uri":"/contribution-with-git/"},{"categories":null,"content":"So you want to contribute to some open source project which is hosted on git[hub,lab] or some other git website. Here is all you want to do. ","date":"2020-02-12","objectID":"/contribution-with-git/:0:0","tags":["contribution","git","github","fork","repository"],"title":"How to contribute to open source project","uri":"/contribution-with-git/"},{"categories":null,"content":"Fork the repository Create a personal fork. On github, visit the project repository and hit fork. It will fork the project in your personal account. ","date":"2020-02-12","objectID":"/contribution-with-git/:1:0","tags":["contribution","git","github","fork","repository"],"title":"How to contribute to open source project","uri":"/contribution-with-git/"},{"categories":null,"content":"Clone it Clone it in your local machine so you can work on it. Remember you are cloning the fork, and not the original project. $ git clone git@github.com:USERNAME/project ","date":"2020-02-12","objectID":"/contribution-with-git/:2:0","tags":["contribution","git","github","fork","repository"],"title":"How to contribute to open source project","uri":"/contribution-with-git/"},{"categories":null,"content":"Add the upstream Add the original project as upstream. $ git remote add upstream https://github.com/ORIGINAL_PROJECT_USERNAME/ORIGINAL_PROJECT_REPO ","date":"2020-02-12","objectID":"/contribution-with-git/:3:0","tags":["contribution","git","github","fork","repository"],"title":"How to contribute to open source project","uri":"/contribution-with-git/"},{"categories":null,"content":"Fetch latest work ;(adsbygoogle = window.adsbygoogle || []).push({}) If you forked a project just now, you can go to next step. If there is a time gap, fetch latest work from upstream to your fork. $ git pull upstream ","date":"2020-02-12","objectID":"/contribution-with-git/:4:0","tags":["contribution","git","github","fork","repository"],"title":"How to contribute to open source project","uri":"/contribution-with-git/"},{"categories":null,"content":"Create a new branch Create a new branch so you can work there. $ git checkout -b develop ","date":"2020-02-12","objectID":"/contribution-with-git/:5:0","tags":["contribution","git","github","fork","repository"],"title":"How to contribute to open source project","uri":"/contribution-with-git/"},{"categories":null,"content":"Add your contribution ;(adsbygoogle = window.adsbygoogle || []).push({}) Add your work in new created branch. Commit changes. Make sure to write meaninigful commits. ","date":"2020-02-12","objectID":"/contribution-with-git/:6:0","tags":["contribution","git","github","fork","repository"],"title":"How to contribute to open source project","uri":"/contribution-with-git/"},{"categories":null,"content":"Push your work live Push the changes you have made to remote origin. $ git push ","date":"2020-02-12","objectID":"/contribution-with-git/:7:0","tags":["contribution","git","github","fork","repository"],"title":"How to contribute to open source project","uri":"/contribution-with-git/"},{"categories":null,"content":"Create a pull request Go to your fork page and create a pull request. That’s it ","date":"2020-02-12","objectID":"/contribution-with-git/:8:0","tags":["contribution","git","github","fork","repository"],"title":"How to contribute to open source project","uri":"/contribution-with-git/"},{"categories":null,"content":"Encrypted dotfiles with GNUpg","date":"2020-01-12","objectID":"/encrypted-dotfiles/","tags":["gnupg","gpg","dotfiles","encrypted_dotfiles","configuration_files","encryption"],"title":"Encrypted dotfiles with GnuPG","uri":"/encrypted-dotfiles/"},{"categories":null,"content":"What these dotfiles are? In unix world, most programs are configured command line and they save their configurations in homedir usually a file which names start with a dot. Thus dotfiles. Power users care about them alot. You can store your dotfiles on some git server like github or gitlab and many other options there like you can host them on your VPS as well. If you use git to store them and you don’t have a private repository, anybody can see them. Dotfiles often contains some private data like plain text passwords and some informations you don’t wanna share publicly. Today I’m gonna show you some technique so your dotfiles will be encrypted and nobody will be able to see them. ","date":"2020-01-12","objectID":"/encrypted-dotfiles/:1:0","tags":["gnupg","gpg","dotfiles","encrypted_dotfiles","configuration_files","encryption"],"title":"Encrypted dotfiles with GnuPG","uri":"/encrypted-dotfiles/"},{"categories":null,"content":"Requirements You will need a gpg key, stow and a git repository. Create a gpg key if you don’t have one already. ","date":"2020-01-12","objectID":"/encrypted-dotfiles/:2:0","tags":["gnupg","gpg","dotfiles","encrypted_dotfiles","configuration_files","encryption"],"title":"Encrypted dotfiles with GnuPG","uri":"/encrypted-dotfiles/"},{"categories":null,"content":"Real procedure? So you have a git repository now. Call it ~/cfg in my case. Inside ~/cfg you have some files which you don’t wanna share publicly unencrypted. But you still want them to be hosted somewhere for backup. For example, I have a file adbkey which is private key for adb devices (androids). I don’t wanna share it publicly but I still wanna version control it. So lets do it in a secure fashion. ","date":"2020-01-12","objectID":"/encrypted-dotfiles/:3:0","tags":["gnupg","gpg","dotfiles","encrypted_dotfiles","configuration_files","encryption"],"title":"Encrypted dotfiles with GnuPG","uri":"/encrypted-dotfiles/"},{"categories":null,"content":"Create directory structure $ mkdir -p ~/cfg/etc/.android $ mkdir -p ~/cfg/etc/.local/share/misc ","date":"2020-01-12","objectID":"/encrypted-dotfiles/:4:0","tags":["gnupg","gpg","dotfiles","encrypted_dotfiles","configuration_files","encryption"],"title":"Encrypted dotfiles with GnuPG","uri":"/encrypted-dotfiles/"},{"categories":null,"content":"Move the sensitive files So now we have created the directories. Lets move the real files we wanna add to git repository for tracking. $ mv ~/.android/adbkey ~/cfg/etc/.local/share/misc ","date":"2020-01-12","objectID":"/encrypted-dotfiles/:5:0","tags":["gnupg","gpg","dotfiles","encrypted_dotfiles","configuration_files","encryption"],"title":"Encrypted dotfiles with GnuPG","uri":"/encrypted-dotfiles/"},{"categories":null,"content":"Create a symlink for private file $ cd ~/cfg/etc/.android $ ln -sf ../.local/share/misc/adbkey adbkey ","date":"2020-01-12","objectID":"/encrypted-dotfiles/:6:0","tags":["gnupg","gpg","dotfiles","encrypted_dotfiles","configuration_files","encryption"],"title":"Encrypted dotfiles with GnuPG","uri":"/encrypted-dotfiles/"},{"categories":null,"content":"Create a symlink or stow the file(s) Let stow do this for you. It’s very useful piece of software and I manage my dotfiles using it. But you can use ln too if you can’t find stow in your distribution repositories. $ cd ~/cfg $ stow etc It will create a symlink ~/.android/adbkey pointing to ~/cfg/etc/.android/adbkey. ","date":"2020-01-12","objectID":"/encrypted-dotfiles/:7:0","tags":["gnupg","gpg","dotfiles","encrypted_dotfiles","configuration_files","encryption"],"title":"Encrypted dotfiles with GnuPG","uri":"/encrypted-dotfiles/"},{"categories":null,"content":"Track file(s) with git Now we can add this symlink to track. Git doesn’t track the real file. It will only track the symlink. $ cd ~/cfg $ git add etc/.android ","date":"2020-01-12","objectID":"/encrypted-dotfiles/:8:0","tags":["gnupg","gpg","dotfiles","encrypted_dotfiles","configuration_files","encryption"],"title":"Encrypted dotfiles with GnuPG","uri":"/encrypted-dotfiles/"},{"categories":null,"content":"Tell git to ignore sensitive file(s) $ echo \"etc/.local/share/misc/\" \u003e\u003e ~/cfg/.gitignore Now it won’t track the sensitive files in ~/cfg/.local/share/misc. ","date":"2020-01-12","objectID":"/encrypted-dotfiles/:9:0","tags":["gnupg","gpg","dotfiles","encrypted_dotfiles","configuration_files","encryption"],"title":"Encrypted dotfiles with GnuPG","uri":"/encrypted-dotfiles/"},{"categories":null,"content":"Compress the sensitive file(s) with tar $ cd ~/cfg $ tar czf encrypted.tar.gz etc/.local/share/misc ","date":"2020-01-12","objectID":"/encrypted-dotfiles/:10:0","tags":["gnupg","gpg","dotfiles","encrypted_dotfiles","configuration_files","encryption"],"title":"Encrypted dotfiles with GnuPG","uri":"/encrypted-dotfiles/"},{"categories":null,"content":"Encrypt the tar archive and delete the un-encrypted archive $ gpg -er abdullah@abdullah.today encrypted.tar.gz $ rm encrypted.tar.gz Replace abdullah@abdullah.today with your email ID you used while creating gpg key. ","date":"2020-01-12","objectID":"/encrypted-dotfiles/:11:0","tags":["gnupg","gpg","dotfiles","encrypted_dotfiles","configuration_files","encryption"],"title":"Encrypted dotfiles with GnuPG","uri":"/encrypted-dotfiles/"},{"categories":null,"content":"Add encrypted archive to git $ cd ~/cfg $ git add encrypted.tar.gz.gpg ","date":"2020-01-12","objectID":"/encrypted-dotfiles/:12:0","tags":["gnupg","gpg","dotfiles","encrypted_dotfiles","configuration_files","encryption"],"title":"Encrypted dotfiles with GnuPG","uri":"/encrypted-dotfiles/"},{"categories":null,"content":"Commit and push the changes to remote $ git commit -m 'adding encrypted dotfiles' $ git push ","date":"2020-01-12","objectID":"/encrypted-dotfiles/:13:0","tags":["gnupg","gpg","dotfiles","encrypted_dotfiles","configuration_files","encryption"],"title":"Encrypted dotfiles with GnuPG","uri":"/encrypted-dotfiles/"},{"categories":null,"content":"Functions to automate this process Here I have written two bash/zsh functions to automate this stuff. endot to encrypt the dotfiles and dedot to decrypt them. endot() { cd ~/cfg tar czf encrypted.tar.gz etc/.local/share/misc gpg -er abdullah@abdullah.today encrypted.tar.gz rm encrypted.tar.gz } and dedot() { cd ~/cfg gpg -do encrypted.tar.gz encrypted.tar.gz.gpg tar xvf encrypted.tar.gz rm encrypted.tar.gz } You can save the functions into your shell initialzing files like ~/.zshrc for zsh and ~/.bashrc for bash. Whenever you change these sensitive files, just run the endot function in the terminal and it will encrypt the new dotfiles and git will complain that the encrypted.tar.gz.gpg is modified so commit it and push the new version. I hope this article will help many of you. If you have better alternatives or need some assistance, just leave a comment. ","date":"2020-01-12","objectID":"/encrypted-dotfiles/:14:0","tags":["gnupg","gpg","dotfiles","encrypted_dotfiles","configuration_files","encryption"],"title":"Encrypted dotfiles with GnuPG","uri":"/encrypted-dotfiles/"},{"categories":null,"content":"Encrypted Arch Linux installation","date":"2020-01-03","objectID":"/encrypted-archlinux/","tags":["archlinux","encryption","encrypted install","luks","lvm","luks_on_lvm"],"title":"Encrypted Arch Linux installation","uri":"/encrypted-archlinux/"},{"categories":null,"content":"What’s Arch Linux? Arch Linux is a free and open source linux distribution based on the rule Keep it Simple. ","date":"2020-01-03","objectID":"/encrypted-archlinux/:0:0","tags":["archlinux","encryption","encrypted install","luks","lvm","luks_on_lvm"],"title":"Encrypted Arch Linux installation","uri":"/encrypted-archlinux/"},{"categories":null,"content":"Installation Arch Linux has no graphical installer. You have to install using CLI. ","date":"2020-01-03","objectID":"/encrypted-archlinux/:0:1","tags":["archlinux","encryption","encrypted install","luks","lvm","luks_on_lvm"],"title":"Encrypted Arch Linux installation","uri":"/encrypted-archlinux/"},{"categories":null,"content":"Installation media creation Go to Downloads page and select a nearby mirror. Download the iso file. If you’re on Windows, you can use rufus to create a bootable media. On linux, you can use dd: dd if=downloaded iso file of=/dev/sdX status=progress where X is your USB device’s ID. Don’t use a single partition. Use the whole device. ","date":"2020-01-03","objectID":"/encrypted-archlinux/:0:2","tags":["archlinux","encryption","encrypted install","luks","lvm","luks_on_lvm"],"title":"Encrypted Arch Linux installation","uri":"/encrypted-archlinux/"},{"categories":null,"content":"Boot the media Insert the USB device and reboot the computer. Press the button configured to come boot options up. Choose your USB device from boot options. ","date":"2020-01-03","objectID":"/encrypted-archlinux/:0:3","tags":["archlinux","encryption","encrypted install","luks","lvm","luks_on_lvm"],"title":"Encrypted Arch Linux installation","uri":"/encrypted-archlinux/"},{"categories":null,"content":"Connect to internet If you have ethernet, Arch linux iso will detect it. If you have a wireless connection, you have to connect it manually. wpa_passphrase 'wifi APN' 'wifi password' \u003e\u003e /etc/wpa_supplicant/wpa_supplicant.conf wpa_supplicant -Bc /etc/wpa_supplicant/wpa_supplicant.conf -i 'wifi interface' dhclient where wifi APN is the access point name you get when you scan for your wifi. And wifi interface you can get using iwconfig. It might be wlp3s0 or wlan0. Or you can use wifi-menu. Now ping some website abdullah.today to check if you’re connected to internet or not. ","date":"2020-01-03","objectID":"/encrypted-archlinux/:0:4","tags":["archlinux","encryption","encrypted install","luks","lvm","luks_on_lvm"],"title":"Encrypted Arch Linux installation","uri":"/encrypted-archlinux/"},{"categories":null,"content":"Partitioning There are multiple ways to encrypt the installation. One of them in LUKS on lvm. It’s straightforward. Assuming you have a UEFI system and sda is your drive where you wanna install archlinux. gdisk /dev/sda GPT fdisk (gdisk) version 1.0.1 Partition table scan: MBR: protective BSD: not present APM: not present GPT: present Found valid GPT with protective MBR; using GPT. Command (? for help): o This option deletes all partitions and creates a new protective MBR. Proceed? (Y/N): Y Command (? for help): n Partition number (1-128, default 1): First sector (34-242187466, default = 2048) or {+-}size{KMGTP}: Last sector (2048-242187466, default = 242187466) or {+-}size{KMGTP}: +512M Current type is 'Linux filesystem' Hex code or GUID (L to show codes, Enter = 8300): EF00 Changed type of partition to 'EFI System' Command (? for help): n Partition number (2-128, default 2): First sector (34-242187466, default = 1050624) or {+-}size{KMGTP}: Last sector (1050624-242187466, default = 242187466) or {+-}size{KMGTP}: Current type is 'Linux filesystem' Hex code or GUID (L to show codes, Enter = 8300): 8309 Changed type of partition to 'Linux LUKS' Command (? for help): p Disk /dev/sda: 242187500 sectors, 115.5 GiB Logical sector size: 512 bytes Disk identifier (GUID): 569FFB67-6969-49E4-B999-15A681987564 Partition table holds up to 128 entries First usable sector is 34, last usable sector is 242187466 Partitions will be aligned on 2048-sector boundaries Total free space is 2014 sectors (1007.0 KiB) Number Start (sector) End (sector) Size Code Name 1 2048 1050623 512.0 MiB EF00 EFI System 2 1050624 242187466 115.0 GiB 8309 Linux LUKS command (? for help): w Type o and then Y. Type n to create a new partition. Select 1 to create a very first partition for EFI. Hit enter and then type +512M to create a 512 Mbs partition. Enter ef00 as partition type. Again type n to create a new partition. Select 2. Hit enter and again enter to give it rest of the storage if you don’t wanna install some other operating system. Hex code for LUKS is 8309 but you can go without it. By default it will be 8300 (linux filesystem). Type p to check if everything is fine. And once satisfied, type w and hit enter to save the work. ","date":"2020-01-03","objectID":"/encrypted-archlinux/:0:5","tags":["archlinux","encryption","encrypted install","luks","lvm","luks_on_lvm"],"title":"Encrypted Arch Linux installation","uri":"/encrypted-archlinux/"},{"categories":null,"content":"Create file systems First, create a filesystem for EFI. mkfs.vfat -F32 /dev/sda1 Now create a LUKS container. cryptsetup luksFormat /dev/sda2 It will ask you to confirm. Type YES in all uppercase. Then choose a good passphrase. Write it if you can’t memorize it. Once forgotten, you can’t recover it. Now open the new container. cryptsetup open /dev/sda2 cryptlvm Create a physical volume in this LUKS container. pvcreate /dev/mapper/cryptlvm Create a volume group. I’ll name it nix. vgcreate nix /dev/mapper/cryptlvm Create logical volumes on volume group. I’m creating three, one for encrypted swap and another for home and last one for root. lvcreate -L 8G nix -n swap lvcreate -L 25G nix -n root lvcreate -l +100%FREE nix -n home Now create filesystems. mkfs.ext4 /dev/mapper/nix-root mkfs.ext4 /dev/mapper/nix-home mkswap /dev/mapper/nix-swap Mount them. mount /dev/mapper/nix-root /mnt mkdir /mnt/home mkdir /mnt/boot mount /dev/mapper/nix-home /mnt/home mount /dev/sda1 /mnt/boot Turn the swap partition on. swapon /dev/mapper/nix-swap ","date":"2020-01-03","objectID":"/encrypted-archlinux/:0:6","tags":["archlinux","encryption","encrypted install","luks","lvm","luks_on_lvm"],"title":"Encrypted Arch Linux installation","uri":"/encrypted-archlinux/"},{"categories":null,"content":"Install the base system pacstrap /mnt base base-devel linux linux-firmware ","date":"2020-01-03","objectID":"/encrypted-archlinux/:0:7","tags":["archlinux","encryption","encrypted install","luks","lvm","luks_on_lvm"],"title":"Encrypted Arch Linux installation","uri":"/encrypted-archlinux/"},{"categories":null,"content":"Generate fstab genfstab -U /mnt \u003e\u003e /mnt/etc/fstab NOTE: If you’re using an SSD, replace relatime with noatime in /mnt/etc/fstab except boot partition. ","date":"2020-01-03","objectID":"/encrypted-archlinux/:0:8","tags":["archlinux","encryption","encrypted install","luks","lvm","luks_on_lvm"],"title":"Encrypted Arch Linux installation","uri":"/encrypted-archlinux/"},{"categories":null,"content":"chroot into new system. arch-chroot /mnt Set the timezone. ln -s /usr/share/zoneinfo/Asia/Karachi /etc/localtime hwclock --systohc Replace Asia with your continent and Karachi with city. Set hostname echo nix \u003e /etc/hostname Replace nix with name you wanna give your machine to. Set locales vim /etc/locale.gen #en_HK ISO-8859-1 #en_IE.UTF-8 UTF-8 #en_IE ISO-8859-1 #en_IE@euro ISO-8859-15 #en_IL UTF-8 #en_IN UTF-8 #en_NG UTF-8 #en_NZ.UTF-8 UTF-8 #en_NZ ISO-8859-1 #en_PH.UTF-8 UTF-8 #en_PH ISO-8859-1 #en_SC.UTF-8 UTF-8 #en_SG.UTF-8 UTF-8 #en_SG ISO-8859-1 en_US.UTF-8 UTF-8 #en_US ISO-8859-1 #en_ZA.UTF-8 UTF-8 #en_ZA ISO-8859-1 #en_ZM UTF-8 #en_ZW.UTF-8 UTF-8 #en_ZW ISO-8859-1 #eo UTF-8 #es_AR.UTF-8 UTF-8 #es_AR ISO-8859-1 #es_BO.UTF-8 UTF-8 Uncomment en_US.UTF-8 UTF-8 . (remove # from the beginning) echo LANG=en_US.UTF-8 \u003e /etc/locale.conf locale-gen Install some necessary software. pacman -S wpa_supplicant dhclient dialog Create a user. useradd -m -G wheel 'username' passwd 'username' Create root password passwd ","date":"2020-01-03","objectID":"/encrypted-archlinux/:0:9","tags":["archlinux","encryption","encrypted install","luks","lvm","luks_on_lvm"],"title":"Encrypted Arch Linux installation","uri":"/encrypted-archlinux/"},{"categories":null,"content":"mkinitcpio configuration Edit the file /etc/mkinitcpio.conf. Copy this line or write in order in hooks line. Order matters so don’t ignore or you will get un-bootable system. vim /etc/mkinitcpio.conf HOOKS=(base udev autodetect keyboard keymap consolefont modconf block encrypt lvm2 filesystems resume fsck) Generate mkinitcpio mkinitcpio -p linux ","date":"2020-01-03","objectID":"/encrypted-archlinux/:0:10","tags":["archlinux","encryption","encrypted install","luks","lvm","luks_on_lvm"],"title":"Encrypted Arch Linux installation","uri":"/encrypted-archlinux/"},{"categories":null,"content":"Install bootloader bootctl install Create entries. Create a file /boot/loader/entries/arch.conf. vim /boot/loader/entries/arch.conf title ArchLinux linux /vmlinuz-linux initrd /initramfs-linux.img options cryptdevice=UUID=\u003cYOUR-PARTITION-UUID\u003e:lvm:allow-discards resume=/dev/mapper/nix-swap root=/dev/mapper/nix-root rw quiet Where UUID you can get using blkid. It would be in /dev/sda2. ","date":"2020-01-03","objectID":"/encrypted-archlinux/:0:11","tags":["archlinux","encryption","encrypted install","luks","lvm","luks_on_lvm"],"title":"Encrypted Arch Linux installation","uri":"/encrypted-archlinux/"},{"categories":null,"content":"Un-mount and reboot exit umount /mnt reboot Remove the USB device. And enjoy your new archlinux encrypted installation. ","date":"2020-01-03","objectID":"/encrypted-archlinux/:0:12","tags":["archlinux","encryption","encrypted install","luks","lvm","luks_on_lvm"],"title":"Encrypted Arch Linux installation","uri":"/encrypted-archlinux/"},{"categories":null,"content":"Polybar - A stylish bar","date":"2019-10-12","objectID":"/polybar/","tags":["polybar","bspwm","status_bar"],"title":"Polybar - A stylish bar","uri":"/polybar/"},{"categories":null,"content":"I recently tried to compile polybar and used it with tiling window manager bspwm. ","date":"2019-10-12","objectID":"/polybar/:0:0","tags":["polybar","bspwm","status_bar"],"title":"Polybar - A stylish bar","uri":"/polybar/"},{"categories":null,"content":"Polybar Here is my bar configuration I have been using for over the years with i3, bspwm, dwm and many other window managers even with xfce4. $ cat $HOME/.config/polybar/config [colors] background = #FF000000 background-alt = ${xrdb:polybar*color8} foreground = ${xrdb:polybar*foreground} urgent = #B34747 foreground-alt = #555 primary = ${xrdb:polybar*color3} secondary = ${xrdb:polybar*color1} alert = ${xrdb:polybar*color13} [settings] screenchange-reload = true screenchange = true throttle-output = 5 throttle-output-for = 10 throttle-input-for = 30 compositing-background = source compositing-foreground = over compositing-overline = over compositing-underline = over compositing-border = over pseudo-transparency = true [global/wm] margin-top = 0 margin-bottom = 0 [bar/eDP-1] monitor = ${env:MONITOR:eDP-1} monitor-fallback = eDP1 bottom = false width = 100% height = 25 offset-x = 0 offset-y = 0 radius = 10 fixed-center = true background = ${colors.background} foreground = ${colors.foreground} line-size = 0 line-color = #f00 border-size = 0 border-top-size = 0 border-color = ${xrdb:background} padding-left = 0 padding-right = 1 module-margin-left = 2 module-margin-right = 2 font-0 = FontAwesome font-1 = Monospace:weight=regular:pixelsize=13 font-2 = DejaVu Sans:pixelsize=11 font-3 = Segoe UI Emoji modules-right = bspwm modules-center = mpd modules-left = date hijri wlan battery temperature cpu memory pulseaudio arch_backlight tray-position = right tray-padding = 6 ;tray-background = #24292A00 tray-background = ${root.background} wm-restack = bspwm override-redirect = false ;scroll-up = bspwm-desknext ;scroll-down = bspwm-deskprev [module/bspwm] type = internal/bspwm pin-workspaces = true inline-mode = false enable-click = true enable-scroll = true reverse-scroll = true fuzzy-match = false ws-icon-0 = \"I\" ws-icon-1 = \"II\" ws-icon-2 = \"III\" ws-icon-3 = \"IV\" ws-icon-4 = \"V\" ws-icon-5 = \"VI\" ws-icon-6 = \"VII\" ws-icon-7 = \"VIII\" ws-icon-8 = \"IX\" ws-icon-9 = \"X\" format = \u003clabel-state\u003e \u003clabel-mode\u003e label-monitor = %name% label-dimmed-foreground = #555 ;label-dimmed-focused-background = #f00 label-focused = %icon% %name% label-focused-underline= ${colors.primary} label-focused-foreground = #f00000 label-occupied = %icon% %name% label-occupied-underline = #555555 label-urgent = %icon% %name% label-urgent-underline = ${colors.primary} label-urgent-background = ${colors.alert} label-empty = %icon% %name% label-empty-foreground = #d700ff ;label-empty-foreground = ${colors.foreground-alt} label-monocle = \"  \" label-monocle-foreground = #fff995 label-tiled = \"  \" ;label-tiled-foreground = #750080 label-tiled-foreground = #00ffff label-fullscreen = \"  \" ;label-floating = \"  \" label-floating = \"  \" label-floating-foreground = #ff45ff label-pseudotiled = \"  \" label-locked = \"  \" label-locked-foreground = #bd2c40 label-sticky = \"  \" label-sticky-foreground = #fba922 label-private = \"  \" label-private-foreground = #bd2c40 label-marked = \" \" label-marked-foreground = #0000ff label-separator = label-separator-padding = 3 label-separator-foreground = #ffb52a label-occupied-padding = 3 label-empty-padding = 3 label-urgent-padding = 3 [module/xwindow] type = internal/xwindow label = \" / %title:0:48:...%\" [module/backlight-acpi] type = internal/backlight sub = module/backlight-acpi base = module/xbacklight inherit = module/xbacklight card = intel_backlight format = \u003cramp\u003e\u003clabel\u003e label = %percentage%% ramp-0 = 🌕 ramp-1 = 🌔 ramp-2 = 🌓 ramp-3 = 🌒 ramp-4 = 🌑 ;[module/backlight] ;type = internal/backlight ;card = intel_backlight ;;output = eDP-1 ;format = \u003cramp\u003e\u003clabel\u003e ;label = %percentage%% ;label-foreground = #3EC13F ;format-padding = 1 ;ramp-0 = 🌕 ;ramp-1 = 🌔 ;ramp-2 = 🌓 ;ramp-3 = 🌒 ;ramp-4 = 🌑 ;enable-scroll = true ;scroll-up = exec light -A 5 ;scroll-down = exec light -U 6 ; [module/pavolume] type = custom/script tail = true label = %output% label-foreground = #D1FF00 exec = ~/.config/polybar/scripts/pavolume.sh --listen click-right = exec pavuc","date":"2019-10-12","objectID":"/polybar/:1:0","tags":["polybar","bspwm","status_bar"],"title":"Polybar - A stylish bar","uri":"/polybar/"},{"categories":null,"content":"SXHKD cat $HOME/.config/sxhkd/sxhkdrc #!/bin/sh # Reload functions #super + Escape # \"$XDG_CONFIG_HOME\"/sxhkd/functions # Reload sxhkd super + Escape pkill -USR1 -x sxhkd # Exit bspwm super + shift + q bspc quit # Alternate between the tiled and monocle layout super + t bspc desktop -l next # Swap the current node and the biggest node super + g bspc node -s biggest # Kill a window super + q bspc node -c # Scratchpad super + i ~/.local/bin/scratchtoggle super + Return urxvtc Alt + Return termite super + d dmenu_run super + {h,j,k,l} bspc node -f {west,south,north,east} super + w $BROWSER super + alt + {0-9} mpc -q seek {0-9}0% super + {_,alt + }{h,j,k,l} bspc node -{f,s} {west,south,north,east} #XF86Audio{RaiseVolume,LowerVolume,Mute} # amixer {-q set Master 5%+,-q set Master 5%-,set Master toggle} # set the window state super + {t,shift + t,s,f} bspc node -t {tiled,pseudo_tiled,floating,fullscreen} # set the node flags super + ctrl + {m,x,y,z} bspc node -g {marked,locked,sticky,private} # Music XF86LaunchA mpc toggle # # focus/swap # # focus the node in the given direction #super + {_,shift + }{h,j,k,l} # bspc node -{f,s} {west,south,north,east} # focus the node for the given path jump super + {p,b,comma,period} bspc node -f @{parent,brother,first,second} # focus the next/previous node in the current desktop super + {_,shift + }c bspc node -f {next,prev}.local # focus the next/previous desktop in the current monitor super + bracket{left,right} bspc desktop -f {prev,next}.local # focus the last node/desktop super + {Tab,semicolon} bspc {node,desktop} -f next # focus the older or newer node in the focus history super + {o,i} bspc wm -h off; \\ bspc node {older,newer} -f; \\ bspc wm -h on # focus or send to the given desktop super + {_,shift + }{1-9,0} bspc {desktop -f,node -d} '^{1-9,10}' # # preselect # # preselect the direction super + ctrl + {h,j,k,l} bspc node -p {west,south,north,east} # preselect the ratio super + ctrl + {1-9} bspc node -o 0.{1-9} # cancel the preselection for the focused node super + ctrl + space bspc node -p cancel # cancel the preselection for the focused desktop super + ctrl + shift + space bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel # # move/resize # # expand a window by moving one of its side outward super + shift + {h,j,k,l} bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0} # contract a window by moving one of its side inward super + alt + shift + {h,j,k,l} bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0} # move a floating window super + {Left,Down,Up,Right} bspc node -v {-20 0,0 20,0 -20,20 0} ############################################################################ # ▗▄▖ ▗▖ # # ▝▜▌ ▐▌ # # ▐▙█▙ ▟█▙ █▟█▌▗▟██▖ ▟█▙ ▐▙██▖ ▟██▖ ▐▌ ▐▌▟▛ ▟█▙ ▝█ █▌▗▟██▖ # # ▐▛ ▜▌▐▙▄▟▌ █▘ ▐▙▄▖▘▐▛ ▜▌▐▛ ▐▌ ▘▄▟▌ ▐▌ ▐▙█ ▐▙▄▟▌ █▖█ ▐▙▄▖▘ # # ▐▌ ▐▌▐▛▀▀▘ █ ▀▀█▖▐▌ ▐▌▐▌ ▐▌▗█▀▜▌ ▐▌ ▐▛█▖ ▐▛▀▀▘ ▐█▛ ▀▀█▖ # # ▐█▄█▘▝█▄▄▌ █ ▐▄▄▟▌▝█▄█▘▐▌ ▐▌▐▙▄█▌ ▐▙▄ ▐▌▝▙ ▝█▄▄▌ █▌ ▐▄▄▟▌ # # ▐▌▀▘ ▝▀▀ ▀ ▀▀▀ ▝▀▘ ▝▘ ▝▘ ▀▀▝▘ ▀▀ ▝▘ ▀▘ ▝▀▀ █ ▀▀▀ # # ▐▌ █▌ # ############################################################################ # Brightness keys XF86MonBrightnessDown xbacklight -5 XF86MonBrightnessUp xbacklight +5 # Raise Volume XF86AudioRaiseVolume amixer set Master 10%+ # Lower Volume XF86AudioLowerVolume amixer set Master 10%- # Mute XF86AudioMute amixer -D pulse set Master 1+ toggle # Screenshot Print import -window root /tmp/foo.png; cat /tmp/foo.png | xclip -selection clipboard -t image/png # File Manager XF86Explorer urxvtc -e ranger ## Mouse buttons #super + button{1-3} # bspc pointer -g {move,resize_side,resize_corner} # #super + !button{1-3} # bspc pointer -t %i %i # #super + @button{1-3} # bspc pointer -u # # Music little backward/forward alt + bracket{left,right} mpc seek {-10,+10} # Music backward/forward alt + shift + bracket{left,right} mpc seek {-120,+120} # Lock the screen super + x slock # vim:ft=sxhkdrc I hope you will get a working desktop experience with these configurations. It’s easy to manipulate them t","date":"2019-10-12","objectID":"/polybar/:2:0","tags":["polybar","bspwm","status_bar"],"title":"Polybar - A stylish bar","uri":"/polybar/"},{"categories":null,"content":"How to use vIM as IDE","date":"2019-10-11","objectID":"/vim-as-IDE/","tags":["vim","editor","visual","text editor","vi","IDE","youcompleteme"],"title":"How to use vIM as IDE in Debian, Ubuntu, Mint","uri":"/vim-as-IDE/"},{"categories":null,"content":"Been using source based distributions for a long time. Source based distributions are cool for systems with limited resources. But what if you don’t have enough time? Debian is one of the oldest distribution there which is known for stability. Stability? Well that never had been a priority for me but for some reasons I came to it and now using it for some months. It’s a cool distribution. Well, that enough said, let’s come to the topic. vIM has been my editor since I started using Linux. There are many other text editors like nano but I never been interested in them. To be honest still I only know how to exit from nano when a command is run by me and nano was the default editor there. I have been maintaining my dotfiles no matter which distribution I was using. But still I had to compile things for vIM and other cool software I use in my daily routine. I was looking for some tool using apt search and found vim-youcompleteme in search results. Which leaded me to install it. I installed it and it also installed its dependencies. In other distros I had been using before I manually had to compile vIM and YouCompleteMe plugin. So here is the process you can follow to have vIM with your plugins. ","date":"2019-10-11","objectID":"/vim-as-IDE/:0:0","tags":["vim","editor","visual","text editor","vi","IDE","youcompleteme"],"title":"How to use vIM as IDE in Debian, Ubuntu, Mint","uri":"/vim-as-IDE/"},{"categories":null,"content":"Installing vIM Debian is a decent distribution. It has many flavours of packages. If you don’t want some extra features for some package, you can have lightweight one. Others can have it how they want it to be. Debian vIM is a light package. If you wanna use YouCompleteMe vIM plugin, you must install vIM with extra features compiled. But don’t worry, Debian has it. Assuming you want vIM as your default editor, these commands will install vIM, remove vIM with less features and make it default editor. Remove vIM if you have it. $ sudo apt remove vim vim-runtime gvim vim-tiny vim-common vim-gui-common vim-tiny vim-common vim-gui-common Install vIM. $ sudo apt install vim-nox Install Addon Manager. You can use plugins without a plugin manager too but it really makes your life easier. $ sudo apt install vim-addon-manager vim-youcompleteme Make vIM your default editor. $ sudo update-alternatives --set editor /usr/bin/vim.nox $ sudo update-alternatives --install /usr/bin/vi vi /usr/bin/vim.nox 1 $ sudo update-alternatives --set vi /usr/bin/vim.nox ","date":"2019-10-11","objectID":"/vim-as-IDE/:0:1","tags":["vim","editor","visual","text editor","vi","IDE","youcompleteme"],"title":"How to use vIM as IDE in Debian, Ubuntu, Mint","uri":"/vim-as-IDE/"},{"categories":null,"content":"Configure vIM After everything is installed, now you can configure vIM to use these plugins. For example, I use vim-youcompleteme. $ vam install youcompleteme That’s it. You can always have a look at my dotfiles if have some issues. Enjoy using vIM. ","date":"2019-10-11","objectID":"/vim-as-IDE/:0:2","tags":["vim","editor","visual","text editor","vi","IDE","youcompleteme"],"title":"How to use vIM as IDE in Debian, Ubuntu, Mint","uri":"/vim-as-IDE/"},{"categories":null,"content":"Things to do after a new Debian installation","date":"2019-09-22","objectID":"/debian-fresh-install/","tags":["debian","fresh install"],"title":"Things to do after a new Debian installation","uri":"/debian-fresh-install/"},{"categories":null,"content":"So you have a new Debian installation? Maybe a minimal install like I do? Don’t worry, I have you covered what to do next. ","date":"2019-09-22","objectID":"/debian-fresh-install/:0:0","tags":["debian","fresh install"],"title":"Things to do after a new Debian installation","uri":"/debian-fresh-install/"},{"categories":null,"content":"Setup a sudo user without password Go here. ","date":"2019-09-22","objectID":"/debian-fresh-install/:1:0","tags":["debian","fresh install"],"title":"Things to do after a new Debian installation","uri":"/debian-fresh-install/"},{"categories":null,"content":"Install software Install software for daily use. $ sudo apt install build-essential \\ git zsh mpv feh xss-lock urlview \\ xbindkeys stow offlineimap mutt msmtp \\ notmuch vim.nox rxvt-unicode -y ","date":"2019-09-22","objectID":"/debian-fresh-install/:2:0","tags":["debian","fresh install"],"title":"Things to do after a new Debian installation","uri":"/debian-fresh-install/"},{"categories":null,"content":"Setup touchpad If you have a machine that supports multitouch, enabling tap to click is a good option. Create directories if they don’t have already created. $ sudo mkdir -p /etc/X11/xorg.conf.d Create a file here as 20-libinput.conf. Mine looks like: $ cat /etc/X11/xorg.conf.d/20-libinput.conf Section \"InputClass\" Identifier \"libinput touchpad catchall\" MatchIsTouchpad \"on\" Driver \"libinput\" MatchDevicePath \"/dev/input/event*\" Option \"Tapping\" \"on\" Option \"TappingButtonMap\" \"lrm\" Option \"NaturalScrolling\" \"true\" EndSection ","date":"2019-09-22","objectID":"/debian-fresh-install/:3:0","tags":["debian","fresh install"],"title":"Things to do after a new Debian installation","uri":"/debian-fresh-install/"},{"categories":null,"content":"Brightness Keys On some hardware, brightness keys don’t work out of the box. So create a file 30-backlight.conf in the same directory as you did in touchpad file. $ cat /etc/X11/xorg.conf.d/30-backlight.conf Section \"Device\" Identifier \"card0\" Driver \"intel\" Option \"Backlight\" \"intel_backlight\" BusID \"PCI:0:2:0\" EndSection ","date":"2019-09-22","objectID":"/debian-fresh-install/:4:0","tags":["debian","fresh install"],"title":"Things to do after a new Debian installation","uri":"/debian-fresh-install/"},{"categories":null,"content":"Automatically lock screen on resume from suspension systemd-logind automatically suspends the laptop if lid is closed. But you have to create another unit file and enable it to lock the screen on resume from suspension. Create a file /etc/systemd/system/wakelock@.service with following contents. Put your favorite locker application path in ExecStart if you don’t use slock. $ cat /etc/systemd/system/wakelock@.service [Unit] Description=Automatically lock the screen on resume from suspension Before=sleep.target suspend.target [Service] User=%i Environment=DISPLAY=:0 ExecStart=/usr/bin/slock [Install] WantedBy=sleep.target suspend.target Reload the systemd daemon and enable/start it. Replace YOUR USERNAME with your username. $ sudo systemctl daemon-reload $ sudo systemctl enable wakelock@\u003cYOUR USERNAME\u003e.service $ sudo systemctl start wakelock@\u003cYOUR USERNAME\u003e.service That’s it. I’ll update this article for more things I remember or anytime I had to reinstall and find something I had to do… ","date":"2019-09-22","objectID":"/debian-fresh-install/:5:0","tags":["debian","fresh install"],"title":"Things to do after a new Debian installation","uri":"/debian-fresh-install/"},{"categories":null,"content":"URXVT - Terminal for Geeks","date":"2019-09-19","objectID":"/urxvt/","tags":["rxvt","urxvt","rxvt-unicode","terminal","term","xterm"],"title":"URXVT - Terminal for Geeks","uri":"/urxvt/"},{"categories":null,"content":"What’s URxvt? As a linux user, I spend most of my time in terminal emulators. There are alot of emulators available today but none can beat rxvt-unicode. The biggest problem most new linux users face is how to configure it. Today I’ll explain how you can use it to your needs. Most distributions package it with less features enabled. I always compile it from source. So let’s start and in the end you’ll end up with a perfect terminal emulator. Get the source and compile it. $ wget http://dist.schmorp.de/rxvt-unicode/Attic/rxvt-unicode-9.22.tar.bz2 $ tar xvf rxvt-unicode-9.22.tar.bz2 $ cd rxvt-unicode-9.22 $ ./configure --enable-everything --enable-256-color $ make # make install –enable-everything will compile all things for us except 256 color support. So keep that in mind. So now rxvt-unicode is installed, just execute it. You won’t like it out of the box. We have to configure it. Configuration rxvt-unicode reads the configuration from two files, ~/.Xresources or ~/.Xdefaults. So here I’m gonna put my ~/.Xdefaults, just copy it to your home directory as ~/.Xdefaults. You can always get the latest one here. $ cat ~/.Xresources ! In the name of Allah, the most Gracious, the most Merciful. ! ! ▓▓▓▓▓▓▓▓▓▓ ! ░▓ Author ▓ Abdullah \u003chttps://abdullah.today\u003e ! ░▓▓▓▓▓▓▓▓▓▓ ! ░░░░░░░░░░ ! ! ░█░█░█▀▄░█▀▀░█▀▀░█▀█░█░█░█▀▄░█▀▀░█▀▀░█▀▀ ! ░▄▀▄░█▀▄░█▀▀░▀▀█░█░█░█░█░█▀▄░█░░░█▀▀░▀▀█ ! ░▀░▀░▀░▀░▀▀▀░▀▀▀░▀▀▀░▀▀▀░▀░▀░▀▀▀░▀▀▀░▀▀▀ ! Colors !black *color0 : #1C1C1C *color8 : #4d4d4d !red *color1 : #D81860 *color9 : #F00060 !green *color2 : #B7CE42 *color10 : #BDE077 !yellow *color3 : #FEA63C *color11 : #FFE863 !blue *color4 : #66AABB *color12 : #AACCBB !magenta *color5 : #B7416E *color13 : #BB4466 !cyan *color6 : #5E7175 *color14 : #A3BABF !white *color7 : #DDEEDD *color15 : #6C887A *.foreground : #fffaf4 *.background : #0e1019 *.cursorColor : #ff0018 ! URxvt ! if remote host is having problems with rxvt-unicode, copy ! /usr/share/terminfo/r/rxvt-unicode at hosts ~/.terminfo/r/rxvt-unicode URxvt*font : xft:FantasqueSansMono Nerd Font:Italic:size=21, xft:Fantasque Sans Mono:Italic:size=21, xft:DejaVu Sans Mono for Powerline:size=21, xft:Segoe UI Emoji:size=21, xft:SimHei:size=21 URxvt*boldfont : xft:Bitstream Vera Sans Mono:Bold:size=17:antialias=true URxvt*bolditalicfont : xft:Bitstream Vera Sans Mono:Bold:italic:size=17:antialias=true URxvt*utf : 1 URxvt*locale : 1 URxvt.imlocale : en_US.UTF-8 URxvt*letterSpace : 0 URxvt*termName : rxvt-unicode-256color URxvt*geometry : 96x30 URxvt*background : #1B2B34 URxvt*reverseVideo : 0 URxvt*loginShell : 0 URxvt*jumpScroll : 1 URxvt*skipScroll : 1 URxvt*pastableTabs : 1 URxvt*scrollstyle : plain URxvt*scrollBar : 0 URxvt*scrollBar_right : 0 URxvt*scrollBar_floating : 0 URxvt*scrollBar_align : centre URxvt*thickness : 0 URxvt*scrollTtyOutput : 0 URxvt*scrollTtyKeypress : 1 URxvt*scrollWithBuffer : 1 URxvt*inheritPixmap : 0 URxvt*transparent : 0 URxvt*tintColor : #ffffff URxvt*shading : 145 URxvt*blurRadius : 1x65 URxvt*fading : 25 URxvt*fadeColor : #008B8B URxvt*utmpInhibit : 1 URxvt*urgentOnBell : 1 URxvt*visualBell : 0 URxvt*mapAlert : 0 URxvt*meta8 : 0 URxvt*mouseWheelScrollPage : 0 URxvt*tripleclickwords : 0 URxvt*insecure : 0 URxvt*cursorUnderline : 1 URxvt*cursorBlink : 0 URxvt*pointerBlank : 1 URxvt*iconFile : /usr/share/icons/Adwaita/16x16/apps/utilities-terminal-symbolic.symbolic.png URxvt*pointerShape : ul_angle URxvt*intensityStyles : 1 URxvt*saveLines : 9999 URxvt*buffered : 1 URxvt*depth : 32 URxvt*visual : 0x16f URxvt*override-redirect : 0 URxvt*externalBorder : 15 URxvt*internalBorder : 15 URxvt*borderLess : 0 URxvt*lineSpace : 0 URxvt*skipBuiltinGlyphs : 0 URxvt*pointerBlankDelay : 1 URxvt*print-pipe : cat \u003e /tmp/$(echo urxvt.dump.$(date +'%Y%M%d%H%m%S')) URxvt*modifier : URxvt*cutchars : BACKSLASH \" \" '\"'\u0026()*,;\u003c=\u003e?@[]^{|}\\\"()*,\u003c\u003e[]{}|''\"\\ URxvt*secondaryScreen : 1 URxvt*secondaryScroll : 0 URxvt*perl-lib : /home/ak/.urxvt/ext URxvt*iso14755 : 1 URxvt*iso14755_52 : 1 URxvt*matcher.button : 2 URxvt*ur","date":"2019-09-19","objectID":"/urxvt/:0:0","tags":["rxvt","urxvt","rxvt-unicode","terminal","term","xterm"],"title":"URXVT - Terminal for Geeks","uri":"/urxvt/"},{"categories":null,"content":"Fonts","date":"2019-09-18","objectID":"/fonts/","tags":["fonts","linux","fontconfig","fontset","xset","xrdb","xresources","xdefaults"],"title":"How to install fonts in Linux","uri":"/fonts/"},{"categories":null,"content":"I have been using different distributions in my machines. A term which is called in our linux community distrohopping. On different distributions/machines, it’s pain to collect packages you can’t live without. For me and maybe for you too, the fonts are the part of OS which at least I care about the most. ","date":"2019-09-18","objectID":"/fonts/:0:0","tags":["fonts","linux","fontconfig","fontset","xset","xrdb","xresources","xdefaults"],"title":"How to install fonts in Linux","uri":"/fonts/"},{"categories":null,"content":"Fonts path Different linux distributions package fonts in with different names. So I decided to add the fonts to my dotfiles. And yeah now I’m happy. On any new machine/installation, I don’t need to install those fonts. Here is the path I have added the fonts which almost all distributions accept today. And it’s easy to maintain them too. $ ls ~/.local/share/fonts awesome Tamzen7x13b.pt3 brands Tamzen7x13b.ttf DejaVuMathTeXGyre.ttf Tamzen7x13r-13.fnt DejaVuSans-BoldOblique.ttf Tamzen7x13r.afm DejaVuSans-Bold.ttf Tamzen7x13r.bdf DejaVuSansCondensed-BoldOblique.ttf Tamzen7x13r.dfont DejaVuSansCondensed-Bold.ttf Tamzen7x13r.pcf DejaVuSansCondensed-Oblique.ttf Tamzen7x13r.png DejaVuSansCondensed.ttf Tamzen7x13r.pt3 DejaVuSans-ExtraLight.ttf Tamzen7x13r.ttf DejaVuSansMono-BoldOblique.ttf Tamzen7x14b-14.fnt DejaVuSansMono-Bold.ttf Tamzen7x14b.afm DejaVuSansMono-Oblique.ttf Tamzen7x14b.bdf DejaVuSansMono.ttf Tamzen7x14b.dfont DejaVuSans-Oblique.ttf Tamzen7x14b.pcf DejaVuSans.ttf Tamzen7x14b.png DejaVuSerif-BoldItalic.ttf Tamzen7x14b.pt3 DejaVuSerif-Bold.ttf Tamzen7x14b.ttf DejaVuSerifCondensed-BoldItalic.ttf Tamzen7x14r-14.fnt DejaVuSerifCondensed-Bold.ttf Tamzen7x14r.afm DejaVuSerifCondensed-Italic.ttf Tamzen7x14r.bdf DejaVuSerifCondensed.ttf Tamzen7x14r.dfont DejaVuSerif-Italic.ttf Tamzen7x14r.pcf DejaVuSerif.ttf Tamzen7x14r.png devicons-regular.sh Tamzen7x14r.pt3 devicons-regular.ttf Tamzen7x14r.ttf DroidSansFallbackFull.ttf Tamzen8x15b-15.fnt 'Font Awesome 5 Brands-Regular-400.otf' Tamzen8x15b.afm 'Font Awesome 5 Free-Regular-400.otf' Tamzen8x15b.bdf 'Font Awesome 5 Free-Solid-900.otf' Tamzen8x15b.dfont fontawesome-regular.sh Tamzen8x15b.pcf fontawesome-regular.ttf Tamzen8x15b.png fontawesome-webfont.ttf Tamzen8x15b.pt3 fonts.dir Tamzen8x15b.ttf Lato-BlackItalic.ttf Tamzen8x15r-15.fnt Lato-Black.ttf Tamzen8x15r.afm Lato-BoldItalic.ttf Tamzen8x15r.bdf Lato-Bold.ttf Tamzen8x15r.dfont Lato-HairlineItalic.ttf Tamzen8x15r.pcf Lato-Hairline.ttf Tamzen8x15r.png Lato-HeavyItalic.ttf Tamzen8x15r.pt3 Lato-Heavy.ttf Tamzen8x15r.ttf Lato-Italic.ttf Tamzen8x16b-16.fnt Lato-LightItalic.ttf Tamzen8x16b.afm Lato-Light.ttf Tamzen8x16b.bdf Lato-MediumItalic.ttf Tamzen8x16b.dfont Lato-Medium.ttf Tamzen8x16b.pcf Lato-Regular.ttf Tamzen8x16b.png Lato-SemiboldItalic.ttf Tamzen8x16b.pt3 Lato-Semibold.ttf Tamzen8x16b.ttf Lato-ThinItalic.ttf Tamzen8x16r-16.fnt Lato-Thin.ttf Tamzen8x16r.afm LiberationMono-BoldItalic.ttf Tamzen8x16r.bdf LiberationMono-Bold.ttf Tamzen8x16r.dfont LiberationMono-Italic.ttf Tamzen8x16r.pcf LiberationMono-Regular.ttf Tamzen8x16r.png LiberationSans-BoldItalic.ttf Tamzen8x16r.pt3 LiberationSans-Bold.ttf Tamzen8x16r.ttf LiberationSans-Italic.ttf TamzenForPowerline10x20b-20.fnt LiberationSansNarrow-BoldItalic.ttf TamzenForPowerline10x20b.afm LiberationSansNarrow-Bold.ttf TamzenForPowerline10x20b.bdf LiberationSansNarrow-Italic.ttf TamzenForPowerline10x20b.dfont LiberationSansNarrow-Regular.ttf TamzenForPowerline10x20b.pcf LiberationSans-Regular.ttf TamzenForPowerline10x20b.png LiberationSerif-BoldItalic.ttf TamzenForPowerline10x20b.pt3 LiberationSerif-Bold.ttf TamzenForPowerline10x20r-20.fnt LiberationSerif-Italic.ttf TamzenForPowerline10x20r.afm LiberationSerif-Regular.ttf TamzenForPowerline10x20r.bdf NafeesWeb.ttf TamzenForPowerline10x20r.dfont NotoMono-Regular.ttf TamzenForPowerline10x20r.pcf octicons-regular.sh TamzenForPowerline10x20r.png octicons-regular.ttf TamzenForPowerline10x20r.pt3 pomicons-regular.sh TamzenForPowerline5x9b-9.fnt pomicons-regular.ttf TamzenForPowerline5x9b.afm Powerline10x20.bdf TamzenForPowerline5x9b.bdf Powerline5x9.bdf TamzenForPowerline5x9b.dfont Powerline6x12.bdf TamzenForPowerline5x9b.pcf Powerline7x13.bdf TamzenForPowerline5x9b.png Powerline7x14.bdf TamzenForPowerline5x9b.pt3 Powerline8x15.bdf TamzenForPowerline5x9r-9.fnt Powerline8x16.bdf TamzenForPowerline5x9r.afm regular TamzenForPowerline5x9r.bdf siji.pcf TamzenForPowerline5x9r.dfont solid TamzenForPowerline5x9r.pcf Symbola_Hinted.ttf TamzenFo","date":"2019-09-18","objectID":"/fonts/:1:0","tags":["fonts","linux","fontconfig","fontset","xset","xrdb","xresources","xdefaults"],"title":"How to install fonts in Linux","uri":"/fonts/"},{"categories":null,"content":"How to get fonts? Well, As I said I have installed most of the fonts from Arch Linux official/community and AUR and some I downloaded from internet different websites. Just install them and create these directories if they already don’t exist. $ mkdir -p ~/.local/share/fonts $ find / -name '*.ttf' -o -name '*.psf' -o -name '*.bdf' -o -name '*.fnt' -o -name '*.ttf' -o -name '*.pcf' -exec cp {} ~/.local/share/fonts \\; ","date":"2019-09-18","objectID":"/fonts/:2:0","tags":["fonts","linux","fontconfig","fontset","xset","xrdb","xresources","xdefaults"],"title":"How to install fonts in Linux","uri":"/fonts/"},{"categories":null,"content":"Load/reload fonts After copying the files, we have to load them. $ fc-cache -fvv ","date":"2019-09-18","objectID":"/fonts/:3:0","tags":["fonts","linux","fontconfig","fontset","xset","xrdb","xresources","xdefaults"],"title":"How to install fonts in Linux","uri":"/fonts/"},{"categories":null,"content":"Autoload fonts on boot ;(adsbygoogle = window.adsbygoogle || []).push({}) Put this file in session starting file. Like .Xsession or if you’re using xorg-xinit to start your Desktop Environment or Windows Manager then put it into ~/.xinitrc. $ xset +fp ~/.local/share/fonts $ xset fp rehash Still have problems? Just lemme know in comments section and I’ll be happy to assist you. ","date":"2019-09-18","objectID":"/fonts/:4:0","tags":["fonts","linux","fontconfig","fontset","xset","xrdb","xresources","xdefaults"],"title":"How to install fonts in Linux","uri":"/fonts/"},{"categories":null,"content":"How to enable sudo without password in Debian, Ubuntu, Mint","date":"2019-09-18","objectID":"/enable%20sudo%20with%20no%20password/","tags":["sudo","visudo","privileges"],"title":"use sudo with no password","uri":"/enable%20sudo%20with%20no%20password/"},{"categories":null,"content":"In Unix world, we shouldn’t use administrator user without some important stuff which needs access to it. There is a utility sudo we can use to have administrator access. But everytime you invoke it, it asks for your user’s password. Today, I’m going to guide you, how you can use sudo without password. Once you install Debian, you get some option to create a user. And if you choose the option, “Don’t use root for login”, this new user becomes privileged user by default. Which means you can invoke any command by using sudo. It will ask for your password and command is executed. Assuming you have a privileged user, edit sudoers file. $ sudo visudo On my Debian installation, it looks like this: ## /etc/sudoers # # This file MUST be edited with the 'visudo' command as root. # # Please consider adding local content in /etc/sudoers.d/ instead of # directly modifying this file. # # See the man page for details on how to write a sudoers file. # Defaults env_reset Defaults mail_badpass Defaults secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" # Host alias specification # User alias specification # Cmnd alias specification # User privilege specification root ALL=(ALL:ALL) ALL # Allow members of group sudo to execute any command %sudo ALL=(ALL:ALL) ALL # See sudoers(5) for more information on \"#include\" directives: #includedir /etc/sudoers.d At the end of the file, just append this: username ALL=(ALL) NOPASSWD:ALL Replace username with your username. Here is my sudoers file. $ sudo cat /etc/sudoers # # This file MUST be edited with the 'visudo' command as root. # # Please consider adding local content in /etc/sudoers.d/ instead of # directly modifying this file. # # See the man page for details on how to write a sudoers file. # Defaults env_reset Defaults mail_badpass Defaults secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" # Host alias specification # User alias specification # Cmnd alias specification # User privilege specification root ALL=(ALL:ALL) ALL # Allow members of group sudo to execute any command %sudo ALL=(ALL:ALL) ALL # See sudoers(5) for more information on \"#include\" directives: # I don't want a password everytime for my user. ak ALL=(ALL) NOPASSWD:ALL #includedir /etc/sudoers.d Now open a new terminal and try to install something using sudo. You won’t be asked to enter your password from now. ","date":"2019-09-18","objectID":"/enable%20sudo%20with%20no%20password/:0:0","tags":["sudo","visudo","privileges"],"title":"use sudo with no password","uri":"/enable%20sudo%20with%20no%20password/"},{"categories":null,"content":"My Terminal based mail setup","date":"2019-09-17","objectID":"/mutt/","tags":["mutt","email","commandline_email","neomutt","isync","mbsync","sendmail","mail"],"title":"My Email Setup","uri":"/mutt/"},{"categories":null,"content":"why commandline? TL;DR powerful and efficient! I have been creating multiple accounts for email since 2009. Some of the accounts I still have them in 2019 and others I don’t have access to. I realized that having your own email server on your own domain is a good thing. So I started creating mail server. I did that well. Learned a lot. ;(adsbygoogle = window.adsbygoogle || []).push({}) As you know I like things to keep minimalistic yet powerful than most written GUI apps. So here is how I use a command line email client Mutt with many other tools which make it perfect setup. There are several scenarios. Like if you have an email server, you can ssh into it and start reading your email inside some tmux session. But what I have is totally different. I use isync to sync my remote mailbox with local one, invoke notmuch and read/reply the emails using mutt. ","date":"2019-09-17","objectID":"/mutt/:1:0","tags":["mutt","email","commandline_email","neomutt","isync","mbsync","sendmail","mail"],"title":"My Email Setup","uri":"/mutt/"},{"categories":null,"content":"Installation ","date":"2019-09-17","objectID":"/mutt/:1:1","tags":["mutt","email","commandline_email","neomutt","isync","mbsync","sendmail","mail"],"title":"My Email Setup","uri":"/mutt/"},{"categories":null,"content":"Install required tools $ sudo apt install -y isync mutt notmuch ;(adsbygoogle = window.adsbygoogle || []).push({}) ","date":"2019-09-17","objectID":"/mutt/:2:0","tags":["mutt","email","commandline_email","neomutt","isync","mbsync","sendmail","mail"],"title":"My Email Setup","uri":"/mutt/"},{"categories":null,"content":"sync mail accounts ","date":"2019-09-17","objectID":"/mutt/:2:1","tags":["mutt","email","commandline_email","neomutt","isync","mbsync","sendmail","mail"],"title":"My Email Setup","uri":"/mutt/"},{"categories":null,"content":"isync I use isync to sync mailboxes. Let’s configure it. IMAPAccount abdullah Host imap.gmail.com User user@gmail.com PassCmd \"gpg -dq ~/.local/share/misc/abdullah.gpg\" SSLType IMAPS CertificateFile /etc/ssl/certs/ca-certificates.crt IMAPStore abdullah-remote Account abdullah MaildirStore abdullah-local Subfolders Verbatim Path ~/.mail/ Inbox ~/.mail/Inbox Channel abdullah Master :abdullah-remote: Slave :abdullah-local: Patterns * CopyArrivalDate yes Create Both SyncState * Replace mailbox stuff with yours where necessary. And start isync. $ mbsync -VXa Don’t forget to run notmuch before or after it. Answer all questions it asks, it’s one time process. You can edit the cofiguration later, they reside in your home directory. ","date":"2019-09-17","objectID":"/mutt/:3:0","tags":["mutt","email","commandline_email","neomutt","isync","mbsync","sendmail","mail"],"title":"My Email Setup","uri":"/mutt/"},{"categories":null,"content":"Mutt Mutt is a command line utility which runs inside a terminal session. Pretty easy to use and have tons of features. Mut looks for configuration files for user base in $HOME/.config/mutt/. So create this directory. $ mkdir -p ~/.config/mutt/credentials $ touch ~/.config/mutt/muttrc Edit muttrc to your needs. I’m pasting mine here for reference. $ cat ~/.config/mutt/muttrc # ▓▓▓▓▓▓▓▓▓▓ # ░▓ Author ▓ Abdullah \u003chttps://abdullah.today/\u003e # ░▓▓▓▓▓▓▓▓▓▓ # ░░░░░░░░░░ # # source important files source $HOME/.config/mutt/colorrc source $HOME/.config/mutt/gpgforak.rc source ~/.config/mutt/aliases set folder = ~/.mail mailboxes = `echo $HOME/.mail/*` set from = abdullah@abdullah.today set sendmail = msmtp set abort_noattach = \"no\" set abort_noattach_regexp = \"attach\" set abort_nosubject = \"ask-yes\" set alias_file = \"~/.config/mutt/aliases\" #source it set alias_format = \"%4n %2f %t %-10a %r\" set allow_8bit = \"yes\" set allow_ansi = \"no\" set arrow_cursor = \"yes\" set ascii_chars = \"no\" set askbcc = \"no\" set askcc = \"no\" set assumed_charset = set attach_charset = set attach_format = \"%u%D%I %t%4n %T%.40d%\u003e [%.7m/%.10M, %.6e%?C?, %C?, %s] \" set attach_sep = \"\\n\" set attach_split = \"yes\" set attribution = \"On %d, %n wrote:\" set attribution_locale = set auto_tag = \"no\" set autoedit = \"yes\" set beep = \"yes\" set beep_new = \"yes\" set bounce = \"ask-yes\" set bounce_delivered = \"no\" set braille_friendly = \"no\" set browser_abbreviate_mailboxes = \"yes\" set certificate_file = \"~/.config/mutt/certs\" set crypt_autosign = yes set crypt_replyencrypt = yes set date_format = \"%d/%m\" set editor = vim set fast_reply = yes set header_cache = ~/.cache/mutt set imap_keepalive = 300 set include = yes set mail_check = 60 set mail_check_stats = yes set mailcap_path = ~/.config/mutt/mailcap set mbox_type = Maildir set message_cachedir = ~/.cache/mutt/messages set pager = vim set pager_context = 3 set pager_index_lines = 8 set pgp_autosign = yes set pgp_replysign = yes set pgp_replysignencrypted = yes set pgp_sign_as = 0x5CBC7BC7 set pgp_timeout = 3600 set pgp_use_gpg_agent = yes set postpone_encrypt = yes set postpone_encrypt_as = 0xE6E81782 set postponed = ~/.mail/Drafts set prompt_after = no set quote_regexp = \"^( {0,4}[\u003e|:#%]| {0,4}[a-z0-9]+[\u003e|]+)+\" set record = ~/.mail/Sent set trash = ~/.mail/Trash set reply_regexp = \"^(([Rr][Ee]?(\\[[0-9]+\\])?: *)?(\\[[^]]+\\] *)?)*\" set rfc2047_parameters = yes set send_charset = utf-8 set sidebar_format = \"%B%?F? [%F]?%* %?N?%N/?%S\" set sidebar_visible = yes set thorough_search set sidebar_width = 24 set status_chars = \" *%A\" set sig_dashes = no set signature = ~/.config/mutt/signature set sort = threads set sort_aux = reverse-last-date-received set spoolfile = ~/.mail/INBOX set ssl_force_tls = yes set ssl_starttls = yes set timeout = 3 set use_from = yes set quit set visual = vim set wait_key = no set status_format = \"───[ Folder: %f ]───[%r%m messages%?n? (%n new)?%?d? (%d to delete)?%?t? (%t tagged)? ]───%\u003e─%?p?( %p postponed )?───\" set sort_re set edit_headers unset confirmappend unset imap_passive unset mark_old set smart_wrap unset markers set pipe_decode set text_flowed set pager_stop auto_view application/pgp-encrypted set menu_scroll set uncollapse_jump set delete set tilde set imap_check_subscribed # HTML auto_view text/html alternative_order text/enriched text/plain text/html alternative_order text/plain text/enriched text/html alternative_order text/plain text/html # Keybindings bind attach \u003creturn\u003e view-mailcap bind attach,index G last-entry bind attach,index g first-entry bind attach,index,pager \\CD next-page bind attach,index,pager \\CU previous-page bind browser $ check-new bind index \\t next-unread bind index ,\\t previous-unread bind index \u003cspace\u003e collapse-thread bind index \u003ctab\u003e sync-mailbox bind index G last-entry bind index R group-reply bind index,pager \u003cdown\u003e sidebar-next bind index,pager \u003cright\u003e sidebar-open bind index,pager \u003cup\u003e sidebar-prev bind pager G bottom bind pager R group-reply bind pager g top bin","date":"2019-09-17","objectID":"/mutt/:4:0","tags":["mutt","email","commandline_email","neomutt","isync","mbsync","sendmail","mail"],"title":"My Email Setup","uri":"/mutt/"},{"categories":null,"content":"Automate it with systemd You can automate it with systemd. Here are two files which will invoke isync a minute after your machine is rebooted and then after every two minutes synchronization. A service file: $ cat ~/.config/systemd/user/isync.service [Unit] Description=Mailbox Sync [Service] Type=oneshot ExecStart=/usr/bin/mbsync -VXa ExecStartPost=/usr/bin/notmuch new and a timer: $ cat ~/.config/systemd/user/isync.timer [Unit] Description=Mailbox Sync Timer [Timer] OnBootSec=1m OnUnitActiveSec=2m Unit=isync.service [Install] WantedBy=timers.target Start them using: $ systemctl --user --now enable isync.timer ","date":"2019-09-17","objectID":"/mutt/:5:0","tags":["mutt","email","commandline_email","neomutt","isync","mbsync","sendmail","mail"],"title":"My Email Setup","uri":"/mutt/"},{"categories":null,"content":"Password management I use encrypted passwords. You can check my dotfiles for reference. Voila! You have a perfect email setup now. You can enable extra functionality like encryption, password management, aliasing etc… Just have a look here if you think something isn’t discussed or well-explained, and don’t forget to comment and lemme know about your thoughts. Here is a demonstration video. ","date":"2019-09-17","objectID":"/mutt/:5:1","tags":["mutt","email","commandline_email","neomutt","isync","mbsync","sendmail","mail"],"title":"My Email Setup","uri":"/mutt/"},{"categories":null,"content":"latest nodejs for debian and derived distributions","date":"2019-09-16","objectID":"/latest-nodejs-in-debian/","tags":["nodejs"],"title":"latest nodejs for debian and derived distributions","uri":"/latest-nodejs-in-debian/"},{"categories":null,"content":"latest NODE installation in debian $ echo 'deb https://deb.nodesource.com/node_12.x sid main' | sudo tee -a /etc/apt/sources.list \u003e /dev/null $ sudo apt update $ sudo apt install -y nodejs Enjoy using NODEjs! ","date":"2019-09-16","objectID":"/latest-nodejs-in-debian/:0:0","tags":["nodejs"],"title":"latest nodejs for debian and derived distributions","uri":"/latest-nodejs-in-debian/"},{"categories":null,"content":"How to install google chrome in Debian based distributions","date":"2019-09-15","objectID":"/chrome/","tags":["chrome","google","google-chrome","chrome_in_linux"],"title":"Google Chrome for deiban and derived distributions","uri":"/chrome/"},{"categories":null,"content":"You’ll have to admit google chrome is super fast. Along with other plugins I love to use it as main browser. But unfortunately it isn’t in debian repositories. So how to install it? Here is the procedure you can follow to get latest chrome from google. $ echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee -a /etc/apt/sources.list \u003e /dev/null $ sudo apt update $ sudo apt install -y google-chrome-stable ;(adsbygoogle = window.adsbygoogle || []).push({}) Enjoy using Chrome. ","date":"2019-09-15","objectID":"/chrome/:0:0","tags":["chrome","google","google-chrome","chrome_in_linux"],"title":"Google Chrome for deiban and derived distributions","uri":"/chrome/"},{"categories":null,"content":"How to boot linux kernel without grub or extra boot manager","date":"2019-09-13","objectID":"/EFISTUB/","tags":["efistub","efibootmgr","bootloader"],"title":"EFISTUB","uri":"/EFISTUB/"},{"categories":null,"content":"So in this post I’m gonna guide you how you can use efistub, a feature which you can use to boot the kernel without an extra boot manager(grub, systemd-boot, rEFInd etc.) Create a boot entry using efibootmgr. # efibootmgr --create --disk /dev/sda --part 1 --label Debian --loader /vmlinuz --unicode \"root=/dev/sda2 rw initrd=\\initrd.img\" --verbose Explaination of the command. --create 'creates a new boot entry' --disk 'disk where you wanna create the boot entry' --part 'partition number' --label 'the label for new entry' --loader 'loader to boot, it's vmlinuz in this example' --unicode 'kernel parameters you can define here like initrd, swap, encrypted container for root' --verbose 'let it verbose' I have an encrypted installation on my machine so here is how I create an entry for me. # efibootmgr --create --disk /dev/sda --part 1 --label 'My Debian' --loader /vmlinuz --unicode \"cryptdevice=UUID=XXXXXXXXXXXXXXXXXX:cryptlvm root=UUID=XXXXXXXXXXXXXXXXXX rw initrd=\\initrd.img resume=UUID=XXXXXXXXXXXXXXXXX\" --verbose where cryptdevice UUID is the UUID of my SSD’s encrypted container’s UUID and root’s UUID is the UUID for my lvm volume where root is located, resume UUID is the lvm UUID where swap partition is. You can get UUID with blkid command. Now go to /boot directory and check for the vmlinuz and initrd.img. They might be in child directories like if EFI/grub or maybe somewhere else depending on your current boot managers. and move them to /boot. Also change your fstab (/etc/fstab) so that it mount your boot partition on /boot. # mv /boot/efi/grub/vmlinuz-4.19.0-1-rt-amd64 /boot/vmlinuz # mv /boot/efi/grub/initrd.img-4.9.0-8-amd64 /boot/initrd.img and your fstab should be look like this. UUID=XXXX-XXXX /boot vfat umask=0077 0 1 By default, debian installs kernel and initrd images with their version numbers. But also puts a symlink to it in / with vmlinuz name. So we have to write a script so that if we get an update of kernel, it will automatically rename it to vmlinuz and initrd.img. Just create a script with following path and make it executable. # vim /etc/kernel/postinst.d/update-efistub #!/bin/sh cp /vmlinuz /boot/ save it and make it executable. # chmod +x /etc/kernel/postinst.d/update-efistub and do the same with initramfs. # vim /etc/initramfs/post-update.d/update-efistub #!/bin/sh cp /initrd.img /boot/ make it executable. chmod +x /etc/initramfs/post-update.d/update-efistub That’s it. Now uninstall any extra boot manager and reboot. You’ll see that your machine is booting without a boot manager. Yeah, you heard it right. No sensible person will call it bootloader. They are just boot managers which also create an entry just like we did. So why don’t we do it ourselves. Feel free to mail me if you get some errors. NOTE: On a standard debian installation, installer creates an ESP if not already exists, and formats it as vFAT. And also creates another ext2 formatted partition. Installer mounts ESP as /boot/efi. So for debian standard install, your command looks like this. # efibootmgr --create --disk /dev/sda --part 1 --label Debian --loader '\\EFI\\debian\\vmlinuz' --unicode 'root=UUID=XXXX-XXXX-XXXX-XXX ro quiet initrd=\\\\EFI\\\\debian\\\\initrd.img' --verbose and for an encrypted installation with lvm, it should be. # efibootmgr --create --disk /dev/sda --part 1 --label Debian --loader '\\EFI\\debian\\vmlinuz' --unicode 'cryptdevice=UUID=XXXX-XXXX-XXXX-XXXX:cryptlvm root=UUID=XXXX-XXXX-XXXX-XXXX ro quiet initrd=\\\\EFI\\\\debian\\\\initrd.img resume=UUID=XXXX-XXXX-XXXX-XXXX' --verbose where first UUID is your /dev/sda3 encrypted container UUID, root UUID is where rootfs is installed and resume UUID is your encrypted swap partition UUID. ","date":"2019-09-13","objectID":"/EFISTUB/:0:0","tags":["efistub","efibootmgr","bootloader"],"title":"EFISTUB","uri":"/EFISTUB/"},{"categories":null,"content":"Tiling window manager that sucks less","date":"2019-09-11","objectID":"/dwm/","tags":["dwm","windowmanager","suckless"],"title":"dwm window manager","uri":"/dwm/"},{"categories":null,"content":"What’s DWM? DWM is a Tiling window manager by Suckless community. ","date":"2019-09-11","objectID":"/dwm/:1:0","tags":["dwm","windowmanager","suckless"],"title":"dwm window manager","uri":"/dwm/"},{"categories":null,"content":"Installation You can install dwm by using your distribution package maangers. But as dwm is configured by hand before compilation, so it’s recommended you clone its repository, configure and then compile it for your system. I have a fork which you may like. ;(adsbygoogle = window.adsbygoogle || []).push({}) ","date":"2019-09-11","objectID":"/dwm/:1:1","tags":["dwm","windowmanager","suckless"],"title":"dwm window manager","uri":"/dwm/"},{"categories":null,"content":"Configuration In the root directory, there is a file config.h. You can edit it how you like. After editing run make and then as root (if you wanna install as system-wide) or copy the dwm executable file to your path. ;(adsbygoogle = window.adsbygoogle || []).push({}) Let’s take a look at my fork compiled dwm. The default Modifier is Super Key (Windows key on most laptops). You can change it to Alt key or whatever you like. From now on I’m using Mod for super key. Let’s open a window. The first window will always be in full screen. Let’s add more windows. I’ll introduce you some terms used in Window Managers. The larger area is called Master. When you open new windows, the first window is pushed to stack area. Take a look at this screenshot. Add another terminal window. If you wanna move the window in stack area to come back in Master area, just focus it with Mod + j/k and then press Mod + Shift + Return. You can resize the increase/decrease Master area with Mod + h/l. For now, it’s enough for you to get started. I’ll update it soon. In sha Allah. Here is a demonstration video. ","date":"2019-09-11","objectID":"/dwm/:2:0","tags":["dwm","windowmanager","suckless"],"title":"dwm window manager","uri":"/dwm/"},{"categories":null,"content":"My loving dad","date":"2019-09-11","objectID":"/baba/","tags":["baba","dad","pak_army"],"title":"Loving Dad","uri":"/baba/"},{"categories":null,"content":"Da satargo tor da zrha takor baba ","date":"2019-09-11","objectID":"/baba/:1:0","tags":["baba","dad","pak_army"],"title":"Loving Dad","uri":"/baba/"},{"categories":null,"content":"Khatam dy ma sha da zrha zor baba ","date":"2019-09-11","objectID":"/baba/:2:0","tags":["baba","dad","pak_army"],"title":"Loving Dad","uri":"/baba/"},{"categories":null,"content":"Sta dy wujood wona samsora ghuwaram ","date":"2019-09-11","objectID":"/baba/:3:0","tags":["baba","dad","pak_army"],"title":"Loving Dad","uri":"/baba/"},{"categories":null,"content":"Sta zindagi la Khudai nora ghuwaram ","date":"2019-09-11","objectID":"/baba/:4:0","tags":["baba","dad","pak_army"],"title":"Loving Dad","uri":"/baba/"},{"categories":null,"content":"Zaka zari minat o sawal koma ","date":"2019-09-11","objectID":"/baba/:5:0","tags":["baba","dad","pak_army"],"title":"Loving Dad","uri":"/baba/"},{"categories":null,"content":"Dua dy sta rogh sehat koma! ","date":"2019-09-11","objectID":"/baba/:6:0","tags":["baba","dad","pak_army"],"title":"Loving Dad","uri":"/baba/"},{"categories":null,"content":"How to set timezone in Debian based distributions","date":"2019-09-11","objectID":"/tzdata/","tags":["tzdata","timezone","date"],"title":"Set time zone in Debian, Ubuntu, Raspberry Pi(Raspbian)","uri":"/tzdata/"},{"categories":null,"content":"Sometimes we install systems and don’t care about setting timezone. Or we travel to some other countries where timezone is different. So here is how you can change timezone in Debian, Ubuntu, Mint, Raspbian and almost all distributions derived from Debian. # dpkg-reconfigure tzdata You will see a dialog box opened. Select your continent. Hit enter after selecting your continent using arrow keys. Select your city and hit Enter. Voila, you are done! ","date":"2019-09-11","objectID":"/tzdata/:0:0","tags":["tzdata","timezone","date"],"title":"Set time zone in Debian, Ubuntu, Raspberry Pi(Raspbian)","uri":"/tzdata/"},{"categories":null,"content":"Automate the boring stuff of wallpapers with systemd","date":"2019-05-08","objectID":"/wallpaper-automation/","tags":["wallpapers","automation","systemd","systemd timer","systemd unit"],"title":"Automate the boring stuff of wallpapers with systemd","uri":"/wallpaper-automation/"},{"categories":null,"content":"So assuming you’re not using a DE and don’t wanna install a tool which comes with a lot of dependencies just to automate the boring stuf of changing wallpapers (root window of Xorg). I wrote a simple Python program which you can use as systemd unit too. Clone the repository or download/copy the beautify.py if you don’t want systemd part. I’d recommend ~/bin for such executable scripts. You can execute it from .xinitrc or .xprofile. For systemd there is explaination in repository readme file too. $ git clone https://github.com/Awan/beautify.git $ cp beautify/beautify.py ~/bin/beautify $ cp beautify/systemd/beautify.service ~/.config/systemd/user/default.target.wants/ $ systemctl enable --user beautify.service $ systemctl start --user beautify.service Don’t forget to edit the beautify.service. Add path to beautify script where you copied it, and also add your wallpapers collection’s path and duration. ;(adsbygoogle = window.adsbygoogle || []).push({}) If you wanna execute it without systemd, you can copy the beautify.py to ~/bin and execute it from ~/.xinitrc or ~/.xprofile like this. $ vi ~/.xinitrc ... ~/bin/beautify ~/pix/wallpapers 300 ... :wq! It will change the wallpapers from ~/pix/wallpapers every 5 minutes. Enjoy! Here is a demonstration video. ","date":"2019-05-08","objectID":"/wallpaper-automation/:0:0","tags":["wallpapers","automation","systemd","systemd timer","systemd unit"],"title":"Automate the boring stuff of wallpapers with systemd","uri":"/wallpaper-automation/"}]